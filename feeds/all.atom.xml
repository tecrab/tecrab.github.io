<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>てっくらぶ</title><link href="https://www.tecrab.com/" rel="alternate"></link><link href="https://www.tecrab.com/feeds/all.atom.xml" rel="self"></link><id>https://www.tecrab.com/</id><updated>2023-02-10T00:00:00+09:00</updated><subtitle>PythonやPC関連の情報をまとめているブログです</subtitle><entry><title>【Python】リスト内のDataFrameを並び替える（ソートする）方法</title><link href="https://www.tecrab.com/articles/dataframe-list-sort.html" rel="alternate"></link><published>2023-02-10T00:00:00+09:00</published><updated>2023-02-10T00:00:00+09:00</updated><author><name>かに</name></author><id>tag:www.tecrab.com,2023-02-10:/articles/dataframe-list-sort.html</id><summary type="html">&lt;p&gt;リスト内のDataFrameを並び替える方法を解説しています．&lt;/p&gt;</summary><content type="html">&lt;div class="admonition abstract"&gt;
&lt;p&gt;本記事ではリストに入ったDataFrameの順序を並び替える方法について紹介しています．&lt;/p&gt;
&lt;/div&gt;
&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;目次&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;事前準備&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#dataframe"&gt;リストに入ったDataFrameを並び替える&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;ひとこと&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="_1"&gt;事前準備&lt;/h2&gt;
&lt;p&gt;まずはサンプルのDataFrameを３つ作成し，順不同でリストに格納します．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;
import pandas as pd

c = ['get_date', 'col_1']
df1 = pd.DataFrame([['2023-02-01', 'アジ'], ['2023-02-01', 'サバ']], columns=c)
df2 = pd.DataFrame([['2023-02-02', 'ホタテ'], ['2023-02-02', 'アサリ']], columns=c)
df3 = pd.DataFrame([['2023-02-03', 'エビ'], ['2023-02-03', 'カニ']], columns=c)

# 各DataFrameを順不同でリストに格納
df_l = [df3, df1, df2]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="dataframe"&gt;リストに入ったDataFrameを並び替える&lt;/h3&gt;
&lt;p&gt;リストに格納したDataFrameを順番に表示してみると以下のようになります．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;
for df in df_l:
    display(df)
&lt;/code&gt;&lt;/pre&gt;
&lt;table class="dataframe" border="1" style="margin-bottom: 20px;"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;get_date&lt;/th&gt;
      &lt;th&gt;col_1&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;2023-02-03&lt;/td&gt;
      &lt;td&gt;エビ&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;2023-02-03&lt;/td&gt;
      &lt;td&gt;カニ&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table class="dataframe" border="1" style="margin-bottom: 20px;"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;get_date&lt;/th&gt;
      &lt;th&gt;col_1&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;2023-02-01&lt;/td&gt;
      &lt;td&gt;アジ&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;2023-02-01&lt;/td&gt;
      &lt;td&gt;サバ&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table class="dataframe" border="1"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;get_date&lt;/th&gt;
      &lt;th&gt;col_1&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;2023-02-02&lt;/td&gt;
      &lt;td&gt;ホタテ&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;2023-02-02&lt;/td&gt;
      &lt;td&gt;アサリ&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;次にリスト内のDataFrameを並び替えて順に表示してみましょう．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;
df_ls = sorted(df_l, key=lambda x: x['get_date'][0])

for df in df_ls:
    display(df)
&lt;/code&gt;&lt;/pre&gt;

&lt;table class="dataframe" border="1" style="margin-bottom: 20px;"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;get_date&lt;/th&gt;
      &lt;th&gt;col_1&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;2023-02-01&lt;/td&gt;
      &lt;td&gt;アジ&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;2023-02-01&lt;/td&gt;
      &lt;td&gt;サバ&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table class="dataframe" border="1" style="margin-bottom: 20px;"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;get_date&lt;/th&gt;
      &lt;th&gt;col_1&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;2023-02-02&lt;/td&gt;
      &lt;td&gt;ホタテ&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;2023-02-02&lt;/td&gt;
      &lt;td&gt;アサリ&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table class="dataframe middle" border="1"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;get_date&lt;/th&gt;
      &lt;th&gt;col_1&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;2023-02-03&lt;/td&gt;
      &lt;td&gt;エビ&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;2023-02-03&lt;/td&gt;
      &lt;td&gt;カニ&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;div class="admonition explanation"&gt;
&lt;p class="admonition-title"&gt;解説&lt;/p&gt;
&lt;p&gt;上記のコードでは，Pythonの組み込み関数&lt;code&gt;sorted&lt;/code&gt;を使用して並び替えをした上で，DataFrameを順番に表示しています．&lt;br&gt;
&lt;code&gt;sorted&lt;/code&gt;の引数&lt;code&gt;key&lt;/code&gt;にlambda関数を使うことで，リストの各DataFrameにおけるget_dateの最初の値を基準に並び替えを行うように指定しています．&lt;/p&gt;
&lt;/div&gt;
&lt;div style="margin-bottom: -50px;"&gt;&lt;/div&gt;

&lt;div class="admonition danger-box"&gt;
&lt;p class="admonition-title"&gt;注意&lt;/p&gt;
&lt;p&gt;（当然ですが）この方法は各DataFrameのget_date列が同じ値でないと使えません．&lt;br&gt;
日付や何らかの種類でまとまったデータの列を基準にすることが必要です．&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id="_2"&gt;ひとこと&lt;/h2&gt;
&lt;p&gt;日付ごとにまとまったデータを扱う際に使用しました．&lt;br&gt;
あまり使い所はないですが，何かの役に立てば幸いです．&lt;/p&gt;
&lt;div style="margin-bottom: 100px;"&gt;&lt;/div&gt;</content><category term="Python"></category><category term="Python"></category><category term="pandas"></category></entry><entry><title>【Python】カンマのある数値・X桁の数値だけを取得する正規表現</title><link href="https://www.tecrab.com/articles/python-reg-comma-x-numbers.html" rel="alternate"></link><published>2023-02-08T00:00:00+09:00</published><updated>2023-02-08T00:00:00+09:00</updated><author><name>かに</name></author><id>tag:www.tecrab.com,2023-02-08:/articles/python-reg-comma-x-numbers.html</id><summary type="html">&lt;p&gt;カンマのある数値・X桁の数値だけを取得する方法について解説しています．&lt;/p&gt;</summary><content type="html">&lt;div class="admonition abstract"&gt;
&lt;p&gt;本記事では文字列から数値/数値だけを取得する正規表現をご紹介します．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;カンマのある数値（価格など）から数値をカンマ付きで取得&lt;/li&gt;
&lt;li&gt;カンマを除いた数値だけを取得&lt;/li&gt;
&lt;li&gt;X桁の数値だけを取得&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;目次&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;事前準備&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_2"&gt;正規表現を使用して数値部分を抽出&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;カンマを除く場合&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_4"&gt;数値部分が複数ある場合の取得方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_5"&gt;特定の桁数の数値を取得する方法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_6"&gt;ひとこと&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="_1"&gt;事前準備&lt;/h2&gt;
&lt;p&gt;今回は正規表現を使用するのでPythonの標準ライブラリの&lt;code&gt;re&lt;/code&gt;を&lt;code&gt;import&lt;/code&gt;します．&lt;br&gt;&lt;/p&gt;
&lt;pre class="end"&gt;&lt;code class="language-python"&gt;
import re
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="_2"&gt;正規表現を使用して数値部分を抽出&lt;/h3&gt;
&lt;p&gt;まずはコンマのある数値部分を抽出する方法です．&lt;br&gt;
「1,000,000円」のような文字列からコンマ＋数値部分を抽出します．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;
s1 = '1,000,000円'
s1_r1 = re.search(r'[\d,]+', s1).group()
print(s1_r1)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="middle"&gt;
1,000,000
&lt;/pre&gt;

&lt;p&gt;上記は正規表現を使って&lt;code&gt;,&lt;/code&gt;を含めて数値を取得しています．&lt;br&gt;&lt;/p&gt;
&lt;h3 id="_3"&gt;カンマを除く場合&lt;/h3&gt;
&lt;p&gt;前項で取得した文字から&lt;code&gt;,&lt;/code&gt;を除きたい場合は以下のようにします．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;
s1_r2 = s1_r1.replace(',', '')
print(s1_r2)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="middle"&gt;
1000000
&lt;/pre&gt;
&lt;p&gt;Pythonの組み込みメソッドの&lt;code&gt;replace&lt;/code&gt;を使用してコンマを置換しています．&lt;br&gt;
&lt;code&gt;,&lt;/code&gt;を取り除くと組み込みの&lt;code&gt;int()&lt;/code&gt;などを使用して数値に変換することができます.&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;div style="margin-bottom: 50px;"&gt;&lt;/div&gt;

&lt;p&gt;なお，文字列の形式が統一されている場合は以下のような方法でも可能です．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;
s1 = '1,000,000円'

s1_r3 = s1[:-1].replace(',', '')
print(s1_r3)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="middle"&gt;
1000000
&lt;/pre&gt;

&lt;p&gt;上記の方法は変換対象の文字列の最後が必ず「円」で終わるという前提で成り立ちます．&lt;br&gt;
桁数の増減や&lt;code&gt;,&lt;/code&gt;がない場合は許容されますが「円」がないと適切に数値が取れません．&lt;br&gt;
以下の例を見てみましょう．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;
# 数値を取得したい文字列のリスト
sl = ['100円', '10,000円', '5,000', '2000円']


# 正規表現なし
sl_r1 = [s[:-1].replace(',', '') for s in sl]
# 正規表現あり
sl_r2 = [re.search(r'[\d,]+', s).group().replace(',', '') for s in sl]

print(sl_r1)
print(sl_r2)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="middle"&gt;
['100', '10000', '500', '2000']
['100', '10000', '5000', '2000']
&lt;/pre&gt;
&lt;p&gt;リスト内の「5,000」には「円」が付いていないので正規表現を使っていない方の結果では「500」になっています．一方で正規表現の場合はこうした表記揺れがあっても正しく数値を取得できています．&lt;/p&gt;
&lt;h3 id="_4"&gt;数値部分が複数ある場合の取得方法&lt;/h3&gt;
&lt;p&gt;「500円〜1,000円」のように文字列中に取得したい数値が複数ある場合の取得方法です．&lt;br&gt;
&lt;code&gt;re&lt;/code&gt;ライブラリの&lt;code&gt;findall&lt;/code&gt;メソッドを使用します．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;
s2 = '500円〜1,000円'
s2_r = re.findall(r'[\d,]+', s2)
print(s2_r)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre  class="middle"&gt;
['500', '1,000']
&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;findall&lt;/code&gt;メソッドでは指定した正規表現に合致する文字列をリストで取得します．&lt;br&gt;
今回は２つの数値が含まれているため，２つの数値が取得できています．&lt;/p&gt;
&lt;div style="margin-bottom: 50px;"&gt;&lt;/div&gt;

&lt;p&gt;なお&lt;code&gt;,&lt;/code&gt;を除きたい場合は以下のようにします．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;
s2_r2 = [s.replace(',', '') for s in s2_r]
print(s2_r2)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;
['500', '1000']
&lt;/pre&gt;

&lt;h3 id="_5"&gt;特定の桁数の数値を取得する方法&lt;/h3&gt;
&lt;p&gt;商品コードなど，特定の桁数を取得する際には以下のようにします．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;
s3 = '商品コード: 12345, 商品コード: 6789'
print(re.findall(r'(?&amp;lt;!\d)\d{4}(?!\d)', s3))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;
['6789']
&lt;/pre&gt;
&lt;p&gt;４桁の数値に限定するためには上記のような正規表現になります.&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2"&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;br&gt;&lt;/p&gt;
&lt;div class="admonition info-box"&gt;
&lt;p class="admonition-title"&gt;任意の桁数を取得する場合&lt;/p&gt;
&lt;p&gt;&lt;code&gt;\d{4}&lt;/code&gt;の&lt;code&gt;4&lt;/code&gt;が取得する数値の桁数になっているので，この数値を変更すれば任意の桁数を取得できます．&lt;/p&gt;
&lt;/div&gt;
&lt;div style="margin-bottom: 50px;"&gt;&lt;/div&gt;

&lt;p&gt;もし，文字列に出てくる数値が固定されている場合は以下でも可能です．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;
s4 = '商品コード: 1234, 商品コード: 5678'
print(re.findall(r'\d{4}', s4))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="middle"&gt;
['1234', '5678']
&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;\d{4}&lt;/code&gt;は１〜９の数値が４個続いた場合にマッチするので，４桁の数値を取得できます．&lt;/p&gt;
&lt;p&gt;ただし，この正規表現の場合は４桁以上の数値にもマッチするので注意が必要です．&lt;br&gt;
以下で見てみましょう．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;
s3 = '商品コード: 12345, 商品コード: 6789'
print(re.findall(r'\d{4}', s3))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="middle"&gt;
['1234', '6789']
&lt;/pre&gt;
&lt;p&gt;最初の商品コードは&lt;code&gt;12345&lt;/code&gt;と５桁ですが，数値が４個続いている最初の４桁が正規表現にマッチするので，最初の４桁を取得してしまいます．&lt;/p&gt;
&lt;div class="admonition info-box"&gt;
&lt;p class="admonition-title"&gt;参考&lt;/p&gt;
&lt;p&gt;「文字列に含まれる数値は４桁以下」かつ「取得したい数値が４桁」である場合も&lt;code&gt;\d{4}&lt;/code&gt;が使えます．&lt;br&gt;
（３桁以下の数値はマッチしないからです）
&lt;pre&gt;&lt;code class="language-python"&gt;
s5 = 'コード1, コード22, コード345, コード6789, コード1111'
print(re.findall(r'\d{4}', s5))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="in-box"&gt;
['6789', '1111']
&lt;/pre&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id="_6"&gt;ひとこと&lt;/h2&gt;
&lt;p&gt;色々な数値を取得する内容を見てきましたが，もっとよい方法をご存知の方がいればぜひお知らせください！&lt;/p&gt;
&lt;div style="margin-bottom: 100px;"&gt;&lt;/div&gt;

&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;&lt;code&gt;,&lt;/code&gt;があると&lt;code&gt;int()&lt;/code&gt;で数値に変換することができません．&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;否定的後読み/先読みを使って４桁の数値だけが取れるようにしていますが，他によい方法あればご連絡ください．&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="正規表現"></category><category term="Python"></category><category term="正規表現"></category></entry><entry><title>【pandas】BigQueryのデータをDataFrameで取得する方法</title><link href="https://www.tecrab.com/articles/pandas-read-gbq-basic.html" rel="alternate"></link><published>2023-01-30T00:00:00+09:00</published><updated>2023-01-30T00:00:00+09:00</updated><author><name>かに</name></author><id>tag:www.tecrab.com,2023-01-30:/articles/pandas-read-gbq-basic.html</id><summary type="html">&lt;p&gt;BigQueryに存在するテーブルをpandas DataFrameとして取得する方法を解説しています．&lt;/p&gt;</summary><content type="html">&lt;div class="admonition abstract"&gt;
&lt;p&gt;BigQueryに存在するテーブルをDataFrameとして取得する方法を解説しています．&lt;/p&gt;
&lt;p&gt;公式 Reference: &lt;a href="https://pandas.pydata.org/docs/reference/api/pandas.read_gbq.html" rel="noopener noreferrer" target="_blank"&gt;pandas.read_gbq&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;目次&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;前提条件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#bigquerydataframe"&gt;BigQueryからDataFrameを取得する&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_2"&gt;メソッドの主な引数&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_3"&gt;使用例：インデックス指定とカラム順序の指定&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_4"&gt;使用例：高速化とプログレスバー表示&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_5"&gt;ひとこと&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="_1"&gt;前提条件&lt;/h2&gt;
&lt;p&gt;本記事で記載しているコードを実行するには&lt;code&gt;pandas&lt;/code&gt;や&lt;code&gt;read_gbq&lt;/code&gt;などのライブラリがインストールされている必要があります．&lt;/p&gt;
&lt;h2 id="bigquerydataframe"&gt;BigQueryからDataFrameを取得する&lt;/h2&gt;
&lt;p&gt;pandasの&lt;code&gt;read_gbq&lt;/code&gt;メソッドを使用して以下のように取得できます．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;
import pandas as pd

# BigQueryのパブリックデータ(67.58 KB)
query = '''
SELECT
    County_of_Residence,
    Births,
    Ave_Age_of_Mother
FROM
    `bigquery-public-data.sdoh_cdc_wonder_natality.county_natality`
LIMIT
    10
'''

df = pd.read_gbq(query)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;
display(df.head(3))
print(df.shape)
&lt;/code&gt;&lt;/pre&gt;
&lt;table class="dataframe middle" border="1"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;County_of_Residence&lt;/th&gt;
      &lt;th&gt;Births&lt;/th&gt;
      &lt;th&gt;Ave_Age_of_Mother&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;Calhoun County, AL&lt;/td&gt;
      &lt;td&gt;1265&lt;/td&gt;
      &lt;td&gt;26.67&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;Tulsa County, OK&lt;/td&gt;
      &lt;td&gt;8933&lt;/td&gt;
      &lt;td&gt;28.13&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;Carroll County, GA&lt;/td&gt;
      &lt;td&gt;1540&lt;/td&gt;
      &lt;td&gt;27.20&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;pre class="middle" style="margin-top: -30px;"&gt;
(10, 3)
&lt;/pre&gt;

&lt;p&gt;テーブルからデータを取得するためのクエリを用意し，それをメソッドに渡せばOKです．&lt;br&gt;&lt;/p&gt;
&lt;div class="admonition danger-box"&gt;
&lt;p class="admonition-title"&gt;注意&lt;/p&gt;
&lt;p&gt;BigQueryは実行した操作に応じて料金がかかるため，クエリを変更する際などは注意してください.&lt;sup id="fnref2:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;h3 id="_2"&gt;メソッドの主な引数&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;read_gbq&lt;/code&gt;メソッドには主に以下の引数があります．&lt;br&gt;&lt;/p&gt;
&lt;table id="large"&gt;
    &lt;tr&gt;
        &lt;td&gt;&lt;b&gt;引数&lt;/b&gt;&lt;/td&gt;
        &lt;td&gt;&lt;b&gt;データ型&lt;/b&gt;&lt;/td&gt;
        &lt;td&gt;&lt;b&gt;説明&lt;/b&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;&lt;code&gt;project_id&lt;/code&gt;&lt;/td&gt;
        &lt;td&gt;str&lt;/td&gt;
        &lt;td&gt;アカウントのプロジェクトIDを指定．&lt;br&gt;
        省略時はデフォルトのプロジェクトIDが指定される．&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;&lt;code&gt;index_col&lt;/code&gt;&lt;/td&gt;
        &lt;td&gt;str&lt;/td&gt;
        &lt;td&gt;DataFrameのindexに指定するカラムを指定．&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;&lt;code&gt;col_order&lt;/code&gt;&lt;/td&gt;
        &lt;td&gt;list or str&lt;/td&gt;
        &lt;td&gt;DataFrameのカラム順序を指定．&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;&lt;code&gt;dialect&lt;/code&gt;&lt;/td&gt;
        &lt;td&gt;str&lt;/td&gt;
        &lt;td&gt;
        以下のいずれかを指定可能．&lt;br&gt;
        &lt;ul style="margin: 0px 0px 3px 2px;"&gt;
          &lt;li&gt;レガシーSQL: &lt;code&gt;dialect='legacy'&lt;/code&gt;&lt;/li&gt;
          &lt;li&gt;標準SQL: &lt;code&gt;dialect='standard'&lt;/code&gt;&lt;/li&gt;
        &lt;/ul&gt;
        デフォルトは&lt;code&gt;dialect='legacy'&lt;/code&gt;
    &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;&lt;code&gt;use_bqstorage_api&lt;/code&gt;&lt;/td&gt;
        &lt;td&gt;bool&lt;/td&gt;
        &lt;td&gt;BigQuery Storage API client を使用して結果を高速に取得できる．&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;&lt;code&gt;progress_bar_type&lt;/code&gt;&lt;/td&gt;
        &lt;td&gt;str&lt;/td&gt;
        &lt;td&gt;tqdm package のプログレスバーを表示できる．&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;

&lt;div class="admonition info-box"&gt;
&lt;p class="admonition-title"&gt;公式ドキュメント&lt;/p&gt;
&lt;p&gt;その他の引数などは以下の公式ドキュメントを参照&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;公式 Reference: &lt;a href="https://pandas.pydata.org/docs/reference/api/pandas.read_gbq.html" rel="noopener noreferrer" target="_blank"&gt;pandas.read_gbq&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h4 id="_3"&gt;使用例：インデックス指定とカラム順序の指定&lt;/h4&gt;
&lt;p&gt;以下は&lt;code&gt;index_col&lt;/code&gt;と&lt;code&gt;col_order&lt;/code&gt;を指定した例です．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;
df = pd.read_gbq(query, index_col='County_of_Residence', col_order=['Ave_Age_of_Mother', 'Births'])
df.head(3)
&lt;/code&gt;&lt;/pre&gt;
&lt;table class="dataframe middle" border="1"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;Ave_Age_of_Mother&lt;/th&gt;
      &lt;th&gt;Births&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;County_of_Residence&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;Calhoun County, AL&lt;/th&gt;
      &lt;td&gt;26.67&lt;/td&gt;
      &lt;td&gt;1265&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Tulsa County, OK&lt;/th&gt;
      &lt;td&gt;28.13&lt;/td&gt;
      &lt;td&gt;8933&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Carroll County, GA&lt;/th&gt;
      &lt;td&gt;27.20&lt;/td&gt;
      &lt;td&gt;1540&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;code&gt;index_col&lt;/code&gt;で指定したカラムがDataFrameのindexになり&lt;code&gt;col_order&lt;/code&gt;で指定した順序でカラムが表示されています．&lt;/p&gt;
&lt;div class="admonition explanation"&gt;
&lt;p class="admonition-title"&gt;参考&lt;/p&gt;
&lt;p&gt;&lt;code&gt;col_order&lt;/code&gt;は取得するカラムをすべて指定しないとエラーになります．&lt;br&gt;
また，可能ならクエリ側でカラム順序を指定した方がシンプルです．&lt;/p&gt;
&lt;/div&gt;
&lt;h4 id="_4"&gt;使用例：高速化とプログレスバー表示&lt;/h4&gt;
&lt;p&gt;テーブルを高速に取得するには&lt;code&gt;use_bqstorage_api&lt;/code&gt;を使用します．&lt;br&gt;
また，以下ではテーブル取得の進捗状況を表示できる&lt;code&gt;progress_bar_type&lt;/code&gt;も併せて指定しています．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;
df = pd.read_gbq(query, use_bqstorage_api=True, progress_bar_type='tqdm')
df.head(3)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;
Downloading: 100%|&lt;span style="color:rgb(0, 187, 0)"&gt;██████████&lt;/span&gt;|
&lt;/pre&gt;
&lt;table class="dataframe middle" border="1"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;County_of_Residence&lt;/th&gt;
      &lt;th&gt;Births&lt;/th&gt;
      &lt;th&gt;Ave_Age_of_Mother&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;Calhoun County, AL&lt;/td&gt;
      &lt;td&gt;1265&lt;/td&gt;
      &lt;td&gt;26.67&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;Tulsa County, OK&lt;/td&gt;
      &lt;td&gt;8933&lt;/td&gt;
      &lt;td&gt;28.13&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;Carroll County, GA&lt;/td&gt;
      &lt;td&gt;1540&lt;/td&gt;
      &lt;td&gt;27.20&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;上記で取得しているテーブルは非常に小さいので&lt;code&gt;use_bqstorage_api&lt;/code&gt;を指定しなくてもストレスなくデータを取得できますが，大きいテーブルを取得する際は指定をおすすめします.&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;h2 id="_5"&gt;ひとこと&lt;/h2&gt;
&lt;p&gt;BigQueryからテーブルをDataFrameとして取得してあれこれする場合には&lt;code&gt;read_gbq&lt;/code&gt;が便利に使えますね．&lt;br&gt;
テーブルのスキーマなどの情報を得たい場合は以下の記事もご覧ください．&lt;/p&gt;
&lt;div class="admonition explanation"&gt;
&lt;p class="admonition-title"&gt;関連記事&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.tecrab.com/articles/python-bqc-basic.html" rel="noopener noreferrer" target="_blank"&gt;【Python】BigQueryのテーブル/テーブルスキーマを取得する方法&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div style="margin-bottom: 100px;"&gt;&lt;/div&gt;

&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;指定した方が圧倒的に高速化されるので，&lt;code&gt;use_bqstorage_api&lt;/code&gt;が使える状況であれば積極的に使うとストレスがなくなります．&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;a class="footnote-backref" href="#fnref2:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Python"></category><category term="Python"></category><category term="pandas"></category><category term="BigQuery"></category></entry><entry><title>【Neovim】インサートモードから離れる際に自動で英字に切り替える方法</title><link href="https://www.tecrab.com/articles/vscode-nvim-jpen-chj.html" rel="alternate"></link><published>2023-01-29T00:00:00+09:00</published><updated>2023-01-29T00:00:00+09:00</updated><author><name>かに</name></author><id>tag:www.tecrab.com,2023-01-29:/articles/vscode-nvim-jpen-chj.html</id><summary type="html">&lt;p&gt;Neovimでモード切り替え時に自動で英字に切り替える方法です．&lt;/p&gt;</summary><content type="html">&lt;div class="admonition abstract"&gt;
&lt;p&gt;Neovimでインサートモードから離れる際に，自動で英字に切り替える設定を解説しています．&lt;/p&gt;
&lt;/div&gt;
&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;目次&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;環境&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_2"&gt;設定の手順&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#im-select"&gt;im-select のインストールと確認&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#neovim"&gt;NeoVimの設定ファイルに設定を追加&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;ひとこと&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="_1"&gt;環境&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;macOS Ventura 13.1&lt;/li&gt;
&lt;li&gt;USキーボード&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_2"&gt;設定の手順&lt;/h3&gt;
&lt;h4 id="im-select"&gt;im-select のインストールと確認&lt;/h4&gt;
&lt;p&gt;入力モードをコマンドで切り替えることができる&lt;a href="https://github.com/daipeihust/im-select" rel="noopener noreferrer" target="_blank"&gt;im-select&lt;/a&gt;をHomebrewでインストールします．&lt;/p&gt;
&lt;pre class="command-line" data-prompt="%"&gt;
&lt;code class="language-bash"&gt;
brew install im-select
&lt;/code&gt;
&lt;/pre&gt;

&lt;div style="margin-bottom: 50px;"&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;which&lt;/code&gt;コマンドで&lt;code&gt;im-select&lt;/code&gt;のコマンドパスを確認します．&lt;/p&gt;
&lt;pre class="command-line" data-prompt="%"&gt;
&lt;code class="language-bash"&gt;
which im-select
&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class="end"&gt;
/opt/homebrew/bin/im-select
&lt;/pre&gt;

&lt;h4 id="neovim"&gt;NeoVimの設定ファイルに設定を追加&lt;/h4&gt;
&lt;p&gt;設定ファイルの&lt;code&gt;init.vim&lt;/code&gt;に以下の内容を追記します．&lt;/p&gt;
&lt;pre class="middle"&gt;&lt;code class="language-vim"&gt;
autocmd InsertLeave * :silent !/opt/homebrew/bin/im-select com.apple.keylayout.ABC
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;/opt/homebrew/bin/im-select&lt;/code&gt;の部分は&lt;code&gt;im-select&lt;/code&gt;のpathを指定&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;します．&lt;/p&gt;
&lt;p&gt;これでインサートモードを離れると自動で英字入力に切り替わるようになります．&lt;/p&gt;
&lt;h2 id="_3"&gt;ひとこと&lt;/h2&gt;
&lt;p&gt;この設定でスムーズにモード切り替えができるので大変おすすめです．&lt;br&gt;
インサート &amp;gt; ノーマルへのモード切り替えを設定する記事も以下にありますので，興味のある方は併せてご覧ください．&lt;/p&gt;
&lt;div class="admonition explanation"&gt;
&lt;p class="admonition-title"&gt;関連記事&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.tecrab.com/articles/vscode-nvim-ctrlk.html" rel="noopener noreferrer" target="_blank"&gt;【VSCode Neovim】モード切り替えのキーバインディングを設定する方法&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div style="margin-bottom: 100px;"&gt;&lt;/div&gt;

&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;&lt;code&gt;which&lt;/code&gt;コマンドの結果で出たpathを指定します．&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="VSCode"></category><category term="Vim"></category><category term="環境構築"></category></entry><entry><title>【Python】BigQueryのテーブル/テーブルスキーマを取得する方法</title><link href="https://www.tecrab.com/articles/python-bqc-basic.html" rel="alternate"></link><published>2023-01-24T00:00:00+09:00</published><updated>2023-01-24T00:00:00+09:00</updated><author><name>かに</name></author><id>tag:www.tecrab.com,2023-01-24:/articles/python-bqc-basic.html</id><summary type="html">&lt;p&gt;BigQueryのPythonクライアントライブラリでテーブル情報を取得する方法です．&lt;/p&gt;</summary><content type="html">&lt;div class="admonition abstract"&gt;
&lt;p&gt;本記事ではPythonを使用した以下の操作を解説しています．
&lt;ul style="margin: -5px 0px 0px 15px;"&gt;
    &lt;li&gt;BigQueryからテーブルをpandas DataFrameとして取得する&lt;/li&gt;
    &lt;li&gt;テーブルのスキーマに関する情報を取得する&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;目次&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;前提条件&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#bigquery"&gt;BigQueryからテーブルを取得する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;テーブルのスキーマに関する情報を取得する&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_3"&gt;スキーマ&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_4"&gt;列名（カラム名，フィールド名）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_5"&gt;列のデータ型（フィールドタイプ）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_6"&gt;列名，データ型，モードを辞書で取得&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_7"&gt;行数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_8"&gt;その他の属性&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_9"&gt;関連情報&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_10"&gt;ひとこと&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="_1"&gt;前提条件&lt;/h2&gt;
&lt;p&gt;本記事ではPythonの&lt;a href="https://cloud.google.com/bigquery/docs/reference/libraries#client-libraries-install-python" rel="noopener noreferrer" target="_blank"&gt;BigQuery APIクライアントライブラリ&lt;/a&gt;を使用します．&lt;br&gt;
インストールをしていない場合は先にインストールが必要です．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;検証バージョン：&lt;code&gt;google-cloud-bigquery 3.4.0&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="bigquery"&gt;BigQueryからテーブルを取得する&lt;/h3&gt;
&lt;p&gt;BigQuery上にあるテーブルをSQLクエリで取得します．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;
from google.cloud import bigquery

# BigQueryのパブリックデータ(67.58 KB)
query = '''
SELECT
    County_of_Residence,
    Births,
    Ave_Age_of_Mother
FROM
    `bigquery-public-data.sdoh_cdc_wonder_natality.county_natality`
LIMIT
    10
'''

client = bigquery.Client()
cj = client.query(query)
print(cj, '\n', type(cj))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="middle"&gt;
QueryJob&amp;lt;project=***, location=US, id=***&amp;gt;
 &amp;lt;class 'google.cloud.bigquery.job.query.QueryJob'&amp;gt;
&lt;/pre&gt;

&lt;p&gt;BigQueryからのテーブル取得は&lt;code&gt;Client()&lt;/code&gt;オブジェクトのメソッド&lt;code&gt;query()&lt;/code&gt;で可能です．&lt;br&gt;
&lt;code&gt;query()&lt;/code&gt;を実行するとQueryJobオブジェクトが返ってきます．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;公式 Reference: &lt;a href="https://cloud.google.com/python/docs/reference/bigquery/latest/google.cloud.bigquery.job.QueryJob" rel="noopener noreferrer" target="_blank"&gt;QueryJob&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div style="margin-bottom: 50px;"&gt;&lt;/div&gt;

&lt;div class="admonition danger-box"&gt;
&lt;p class="admonition-title"&gt;注意&lt;/p&gt;
&lt;p&gt;BigQueryは実行した操作に応じて料金がかかるため，クエリを変更する際などは注意してください.&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;QueryJobオブジェクトには様々なメソッドがあり&lt;code&gt;to_dataframe()&lt;/code&gt;メソッドを使用すれば取得したテーブルをDataFrameとして取得できます．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;
df = cj.to_dataframe()
df.head(3)
&lt;/code&gt;&lt;/pre&gt;
&lt;table class="dataframe middle" border="1"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;County_of_Residence&lt;/th&gt;
      &lt;th&gt;Births&lt;/th&gt;
      &lt;th&gt;Ave_Age_of_Mother&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;Calhoun County, AL&lt;/td&gt;
      &lt;td&gt;1265&lt;/td&gt;
      &lt;td&gt;26.67&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;Tulsa County, OK&lt;/td&gt;
      &lt;td&gt;8933&lt;/td&gt;
      &lt;td&gt;28.13&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;Carroll County, GA&lt;/td&gt;
      &lt;td&gt;1540&lt;/td&gt;
      &lt;td&gt;27.20&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;code&gt;to_dataframe()&lt;/code&gt;メソッドの主な引数は以下のとおりです．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;公式 Reference: &lt;a href="https://cloud.google.com/python/docs/reference/bigquery/latest/google.cloud.bigquery.job.QueryJob#google_cloud_bigquery_job_QueryJob_to_dataframe" rel="noopener noreferrer" target="_blank"&gt;to_dataframe&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;table id="normal"&gt;
    &lt;thead&gt;&lt;tr&gt;
        &lt;th&gt;引数&lt;/th&gt;
        &lt;th&gt;説明&lt;/th&gt;
    &lt;/tr&gt;
&lt;/thead&gt;&lt;tr&gt;
&lt;tr&gt;
&lt;td&gt;bqstorage_client&lt;/td&gt;
&lt;td&gt;BigQuery Storage API client を使用して結果を高速に取得できる&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;dtypes&lt;/td&gt;
    &lt;td&gt;DataFrameの列におけるデータ型を指定&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;progress_bar_type&lt;/td&gt;
    &lt;td&gt;tqdm packageのプログレスバーを表示できる&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;max_results&lt;/td&gt;
    &lt;td&gt;取得する結果の最大行数を指定&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;以下は&lt;code&gt;dtypes&lt;/code&gt;と&lt;code&gt;progress_bar_type&lt;/code&gt;を指定して実行した例です．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;
dtypes={'Births': 'float16'}

df = cj.to_dataframe(dtypes=dtypes, progress_bar_type='tqdm')
df.dtypes
&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="middle"&gt;
Job ID *** successfully executed: 100%|&lt;span style="color:rgb(0, 187, 0)"&gt;██████████&lt;/span&gt;|
Downloading: 100%|&lt;span style="color:rgb(0, 187, 0)"&gt;██████████&lt;/span&gt;|

County_of_Residence     object
Births                 float16
Ave_Age_of_Mother      float64
dtype: object
&lt;/pre&gt;
&lt;p&gt;DataFrameのデータ型を見ると指定した「Births」列が&lt;code&gt;float16&lt;/code&gt;になっていますね．&lt;br&gt;
また&lt;code&gt;progress_bar_type&lt;/code&gt;を指定しているので，進捗具合も表示されています．&lt;/p&gt;
&lt;details class="accordion-block"&gt;
&lt;summary&gt;高速化に関して（クリックで展開します）&lt;/summary&gt;
&lt;div class="accordion-summary"&gt;
&lt;p&gt;&lt;code&gt;bqstorage_client&lt;/code&gt;にBigQuery Storage API clientを指定すると高速にテーブルを取得できると公式ドキュメントに記載がありますが，管理人の手元では指定の有無に関わらず取得速度に差がありませんでした．&lt;br&gt;
取得するデータが大きい場合などでは効果があるかもしれません．&lt;br&gt;
（こうしたら早くなるなど，情報をお持ちの方がいらっしゃればご連絡いただけると嬉しいです．&lt;a href="https://www.tecrab.com/pages/contact.html" rel="noopener noreferrer" target="_blank"&gt;問い合わせフォーム&lt;/a&gt; or &lt;a href="https://twitter.com/tecrab_blog" rel="noopener noreferrer" target="_blank"&gt;Twitter&lt;/a&gt;）&lt;/p&gt;
&lt;p&gt;なお，以下「関連記事」で紹介しているpandasの&lt;code&gt;read_gbq&lt;/code&gt;メソッドについては引数&lt;code&gt;use_bqstorage_api=True&lt;/code&gt;とするとテーブルの取得を圧倒的に高速化できます．&lt;/p&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;div class="admonition explanation"&gt;
&lt;p class="admonition-title"&gt;関連記事&lt;/p&gt;
&lt;p&gt;BigQueryからテーブルをDataFrameとして取得するにはpandasの&lt;code&gt;read_gbq&lt;/code&gt;メソッドを使う方法もあります．&lt;br&gt;
テーブルデータをDataFrameとして扱いたい場合はこちらの方がシンプルで便利です．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.tecrab.com/articles/pandas-read-gbq-basic.html" rel="noopener noreferrer" target="_blank"&gt;【pandas】BigQueryのデータをDataFrameで取得する方法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="_2"&gt;テーブルのスキーマに関する情報を取得する&lt;/h2&gt;
&lt;p&gt;スキーマの情報を取得する例を以下より確認していきます．&lt;/p&gt;
&lt;p&gt;QueryJobオブジェクトの&lt;code&gt;result()&lt;/code&gt;メソッドでRowIteratorオブジェクトを取得します．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;
cjr = cj.result()
cjr
&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="end"&gt;
&amp;lt;google.cloud.bigquery.table.RowIterator at ***&amp;gt;
&lt;/pre&gt;

&lt;h3 id="_3"&gt;スキーマ&lt;/h3&gt;
&lt;p&gt;テーブルのスキーマを確認するには&lt;code&gt;schema&lt;/code&gt;属性を使用します．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;
cjr.schema
&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="middle"&gt;
[SchemaField('County_of_Residence', 'STRING', 'NULLABLE', None, None, (), None),
 SchemaField('Births', 'INTEGER', 'NULLABLE', None, None, (), None),
 SchemaField('Ave_Age_of_Mother', 'FLOAT', 'NULLABLE', None, None, (), None)]
&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;schema&lt;/code&gt;属性にはSchemaFieldというオブジェクトがリストで存在し，それぞれのSchemaFieldが各列（カラム）ごとの情報を保持しています．必要な情報にはSchemaFieldの属性を使用してアクセスします．&lt;/p&gt;
&lt;h4 id="_4"&gt;列名（カラム名，フィールド名）&lt;/h4&gt;
&lt;p&gt;列名はSchemaFieldの&lt;code&gt;name&lt;/code&gt;属性で取得します．&lt;br&gt;
以下の例では全カラム名をfor文で取り出しています．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;
[i.name for i in cjr.schema]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="end"&gt;
['County_of_Residence', 'Births', 'Ave_Age_of_Mother']
&lt;/pre&gt;

&lt;h4 id="_5"&gt;列のデータ型（フィールドタイプ）&lt;/h4&gt;
&lt;p&gt;各列のデータ型は&lt;code&gt;field_type&lt;/code&gt;属性で取得します．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;
[i.field_type for i in cjr.schema]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="end"&gt;
['STRING', 'INTEGER', 'FLOAT']
&lt;/pre&gt;

&lt;h4 id="_6"&gt;列名，データ型，モードを辞書で取得&lt;/h4&gt;
&lt;p&gt;SchemaFieldの&lt;code&gt;to_api_repr()&lt;/code&gt;メソッドを使用すればスキーマの情報を辞書で取得できます．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;
[i.to_api_repr() for i in cjr.schema]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="end"&gt;
[{'name': 'County_of_Residence', 'type': 'STRING', 'mode': 'NULLABLE'},
 {'name': 'Births', 'type': 'INTEGER', 'mode': 'NULLABLE'},
 {'name': 'Ave_Age_of_Mother', 'type': 'FLOAT', 'mode': 'NULLABLE'}]
&lt;/pre&gt;

&lt;h4 id="_7"&gt;行数&lt;/h4&gt;
&lt;p&gt;行数はRowIteratorオブジェクトの&lt;code&gt;total_rows&lt;/code&gt;属性で確認できます．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;
cjr.total_rows
&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="end"&gt;
10
&lt;/pre&gt;

&lt;h4 id="_8"&gt;その他の属性&lt;/h4&gt;
&lt;p&gt;他にもスキーマに関する主な情報は以下の属性で取得できます．&lt;/p&gt;
&lt;table id="normal"&gt;
    &lt;thead&gt;&lt;tr&gt;
        &lt;th&gt;属性&lt;/th&gt;
        &lt;th&gt;取得できる情報&lt;/th&gt;
    &lt;/tr&gt;
&lt;/thead&gt;&lt;tr&gt;
&lt;td&gt;mode&lt;/td&gt;
&lt;td&gt;モード&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;is_nullable&lt;/td&gt;
    &lt;td&gt;モードがNULLABLEか否か&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;default_value_expression&lt;/td&gt;
    &lt;td&gt;デフォルト値&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;policy_tags&lt;/td&gt;
    &lt;td&gt;ポリシータグ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;description&lt;/td&gt;
    &lt;td&gt;説明&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

&lt;div class="admonition info-box"&gt;
&lt;p class="admonition-title"&gt;参考&lt;/p&gt;
&lt;p&gt;その他の属性や詳細は以下の公式 Referenceを参照．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;公式 Reference: &lt;a href="https://cloud.google.com/python/docs/reference/bigquery/latest/google.cloud.bigquery.schema.SchemaField#google_cloud_bigquery_schema_SchemaField_scale" rel="noopener noreferrer" target="_blank"&gt;SchemaField&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div style="margin-bottom: 50px;"&gt;&lt;/div&gt;

&lt;h2 id="_9"&gt;関連情報&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://cloud.google.com/bigquery/docs/information-schema-intro" rel="noopener noreferrer" target="_blank"&gt;BigQuery INFORMATION_SCHEMA&lt;/a&gt;を使用して情報を取得することも可能です．
クエリでテーブル情報を取得できるのでとても便利です．&lt;/p&gt;
&lt;h2 id="_10"&gt;ひとこと&lt;/h2&gt;
&lt;p&gt;BigQuery APIクライアントライブラリを使うとPythonで色々な情報を取得できますね．&lt;br&gt;
テーブルを取得するだけならpandasの&lt;code&gt;read_gbq&lt;/code&gt;をよく使います．&lt;/p&gt;
&lt;div class="admonition explanation"&gt;
&lt;p class="admonition-title"&gt;関連記事&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.tecrab.com/articles/pandas-read-gbq-basic.html" rel="noopener noreferrer" target="_blank"&gt;【pandas】BigQueryのデータをDataFrameで取得する方法&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div style="margin-bottom: 100px;"&gt;&lt;/div&gt;

&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;上記のサンプルコード（クエリ）の処理量は約68KBと少ないのでそれほど気にする必要はありません．&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Python"></category><category term="Python"></category><category term="BigQuery"></category></entry><entry><title>Pythonのfor文で家族絵文字をひとつずつ取り出す</title><link href="https://www.tecrab.com/articles/python-emoji-for-family.html" rel="alternate"></link><published>2023-01-14T00:00:00+09:00</published><updated>2023-01-14T00:00:00+09:00</updated><author><name>かに</name></author><id>tag:www.tecrab.com,2023-01-14:/articles/python-emoji-for-family.html</id><summary type="html">&lt;p&gt;絵文字をPythonのfor文で取り出す豆知識です．&lt;/p&gt;</summary><content type="html">&lt;div class="admonition abstract"&gt;
&lt;p&gt;使えるか全くわからない豆知識です．&lt;/p&gt;
&lt;/div&gt;
&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;目次&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;内容&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;ひとこと&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h3 id="_1"&gt;内容&lt;/h3&gt;
&lt;p&gt;以下のコードを見てください.&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;
for i in '👨‍👩‍👧‍👦':
    print(i, end=' ')
&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="middle"&gt;
👨 ‍ 👩 ‍ 👧 ‍ 👦 
&lt;/pre&gt;

&lt;p&gt;何と絵文字がそれぞれ取得できます・・・&lt;/p&gt;
&lt;h2 id="_2"&gt;ひとこと&lt;/h2&gt;
&lt;p&gt;絵文字をfor文で取得できるのは面白いですね．&lt;br&gt;&lt;/p&gt;
&lt;div style="margin-bottom: 100px;"&gt;&lt;/div&gt;

&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;絵文字「👨‍👩‍👧‍👦」は「ファミリー」と打って変換すれば出てきます．&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="豆知識"></category><category term="Python"></category><category term="豆知識"></category></entry><entry><title>【シェルスクリプト】文字列を「〜で始まる/終わる/〜が含まれる/存在有無」で判定する方法</title><link href="https://www.tecrab.com/articles/shell-if-test-str.html" rel="alternate"></link><published>2022-12-26T00:00:00+09:00</published><updated>2022-12-27T00:00:00+09:00</updated><author><name>かに</name></author><id>tag:www.tecrab.com,2022-12-26:/articles/shell-if-test-str.html</id><summary type="html">&lt;p&gt;文字列判定「〜で始まる/終わる/〜が含まれる/存在有無」をまとめています．&lt;/p&gt;</summary><content type="html">&lt;div class="admonition abstract"&gt;
&lt;p&gt;本記事ではシェルスクリプトの文字列判定に関する以下の内容をまとめています．&lt;br&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「〜で始まる/終わる」文字を判定&lt;/li&gt;
&lt;li&gt;「〜が含まれる」文字を判定&lt;/li&gt;
&lt;li&gt;文字列の有無による判定&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;目次&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;「〜で始まる/終わる」文字を判定&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;「〜が含まれる」文字を判定&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;大文字と小文字の区別&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_4"&gt;文字列の有無による判定&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_5"&gt;文字列ありの場合を判定&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_6"&gt;文字列なしの場合を判定&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_7"&gt;文字列の内容で判定&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_8"&gt;ひとこと&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="_1"&gt;「〜で始まる/終わる」文字を判定&lt;/h2&gt;
&lt;p&gt;「〜で始まる/終わる」についてコード例と共に見ていきましょう．&lt;br&gt;
例として「&lt;code&gt;m_&lt;/code&gt;で始まる」 を判定する例は以下です．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;
#!/bin/zsh

match_check=('ab' 'm_b' 'c' 'm_d')

# 要素を1つずつ取り出す
for i in "${match_check[@]}"; do
    # m_で始まるか
    if [[ "$i" = "m_"* ]]; then
        echo $i
    fi
done
&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="middle"&gt;
m_b
m_d
&lt;/pre&gt;

&lt;p&gt;if文の条件式でパターンマッチを使用しており&lt;code&gt;[[ "$i" = "m_"* ]]&lt;/code&gt;の&lt;code&gt;"m_"*&lt;/code&gt;が「&lt;code&gt;m_&lt;/code&gt;で始まる」を指定している部分です.&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;div style="margin-bottom: 50px;"&gt;&lt;/div&gt;

&lt;p&gt;次に「&lt;code&gt;b&lt;/code&gt;で終わる」を判定する場合を見てみましょう．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;
#!/bin/zsh

match_check=('ab' 'm_b' 'c' 'm_d')

# 要素を1つずつ取り出す
for i in "${match_check[@]}"; do
    # bで終わるか
    if [[ "$i" = *"b" ]]; then
        echo $i
    fi
done
&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="middle"&gt;
ab
m_b
&lt;/pre&gt;

&lt;p&gt;「〜で始まる」と同じようにif文の条件式でパターンマッチを使用しています．&lt;br&gt;
そのため&lt;code&gt;b&lt;/code&gt;で終わる&lt;code&gt;ab&lt;/code&gt;, &lt;code&gt;m_b&lt;/code&gt;が出力されていますね．&lt;/p&gt;
&lt;h2 id="_2"&gt;「〜が含まれる」文字を判定&lt;/h2&gt;
&lt;p&gt;「〜が含まれる」のコード例は以下のとおりです．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;
#!/bin/zsh

match_check2=('abc' 'bbc' 'cnn' 'WBS')

for i in "${match_check2[@]}"; do
    # bが含まれるか
    if [[ "$i" = *"b"* ]]; then
        echo $i
    fi
done
&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="middle"&gt;
abc
bbc
&lt;/pre&gt;

&lt;p&gt;if文の条件式でパターンマッチを使用し「&lt;code&gt;b&lt;/code&gt;が含まれる」を表現しています．&lt;br&gt;
そのため&lt;code&gt;b&lt;/code&gt;で終わる&lt;code&gt;ab&lt;/code&gt;, &lt;code&gt;m_b&lt;/code&gt;が出力されていますね．&lt;/p&gt;
&lt;h2 id="_3"&gt;大文字と小文字の区別&lt;/h2&gt;
&lt;p&gt;パターンマッチを使用して判定する場合，アルファベットの大文字小文字は区別されます．&lt;br&gt;
もし区別せずに判定したい場合は条件式を以下のようにします．&lt;/p&gt;
&lt;pre class="middle"&gt;&lt;code class="language-bash"&gt;
if [[ "$i" = *[bB]* ]]; then
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;*[bB]*&lt;/code&gt;は「&lt;code&gt;b&lt;/code&gt;もしくは&lt;code&gt;B&lt;/code&gt;が含まれる」を表現しています．&lt;/p&gt;
&lt;h2 id="_4"&gt;文字列の有無による判定&lt;/h2&gt;
&lt;p&gt;任意の変数に文字列が存在するか否かを確認するには&lt;code&gt;test&lt;/code&gt;コマンドの&lt;code&gt;-z&lt;/code&gt;, &lt;code&gt;-n&lt;/code&gt;オプションを使用します．&lt;/p&gt;
&lt;h3 id="_5"&gt;文字列ありの場合を判定&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;-n&lt;/code&gt;オプションをつけると「文字列の長さが０でない」場合に真となります．&lt;br&gt;
すなわち，変数に何らかの文字が存在すれば真です．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;
#!/bin/zsh

moji='moji'

if [ -n "$moji" ]; then
    echo '文字あり'
fi
&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="middle"&gt;
文字あり
&lt;/pre&gt;

&lt;p&gt;変数&lt;code&gt;moji&lt;/code&gt;には４文字の文字列が代入されているので&lt;code&gt;if&lt;/code&gt;文内の処理が実行されます．&lt;/p&gt;
&lt;h3 id="_6"&gt;文字列なしの場合を判定&lt;/h3&gt;
&lt;p&gt;文字が含まれない場合を判定するには&lt;code&gt;-z&lt;/code&gt;オプションを使用します．&lt;br&gt;
&lt;code&gt;-z&lt;/code&gt;オプションは「文字列の長さが０」の場合に真となります．&lt;/p&gt;
&lt;pre class="middle"&gt;&lt;code class="language-bash"&gt;
#!/bin/zsh

moji='moji'

if [ -z "$moji" ]; then
    echo '文字あり'
fi
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;前項のコードのオプションを変更して実行すると今回は何も表示されません．&lt;br&gt;
（変数&lt;code&gt;moji&lt;/code&gt;には文字列が代入されており「文字列の長さが０」ではないため&lt;code&gt;if&lt;/code&gt;文内の処理が実行されていません）&lt;/p&gt;
&lt;details class="accordion-block"&gt;
&lt;summary&gt;文字列の長さ判定に関する別記法を確認したい方はこちらをクリック&lt;/summary&gt;
&lt;div class="accordion-summary"&gt;
&lt;p&gt;文字列の長さ判定は以下のように記載することも可能です．&lt;br&gt;
しかし，オプション指定の方がシンプルで速度もやや速いです（後述）&lt;/p&gt;
&lt;pre class="middle"&gt;&lt;code class="language-bash"&gt;
#!/bin/zsh

moji='moji'

# 文字列の長さが0で真
if [ "$moji" = "" ]; then
    echo '文字なし'
fi

# 文字列の長さが0でない場合に真
if [ "$moji" != "" ]; then
    echo '文字あり'
fi

# 条件式は[ "$moji" != "" ]と同義（書き方が違うだけです）
# わかりづらいので非推奨
if [ ! "$moji" = "" ]; then
    echo '文字あり'
fi
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;＜速度＞&lt;/strong&gt;&lt;br&gt;
以下のコード・コマンドで速度を確認&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2"&gt;2&lt;/a&gt;&lt;/sup&gt;したところ両者に大きな差はありませんでした．&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;str_time.sh&lt;/strong&gt;&lt;/p&gt;
&lt;div style="margin: 0px 0px -15px 0px;"&gt;&lt;/div&gt;
&lt;pre class="middle"&gt;&lt;code class="language-bash"&gt;
n=0
nn=1000000
moji=''

# オプション比較
while [ $n -le $nn ]; do
    if [ -z "$moji" ]; then
        :
    fi
    n=$((n + 1))
done

# 文字列比較
while [ $n -le $nn ]; do
    if [ "$moji" = "" ]; then
        :
    fi
    n=$((n + 1))
done
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;実行&lt;/p&gt;
&lt;div style="margin: 0px 0px -15px 0px;"&gt;&lt;/div&gt;
&lt;pre class="command-line" data-prompt="%"&gt;
&lt;code class="language-bash"&gt;
time ./str_time.sh
&lt;/code&gt;
&lt;/pre&gt;
&lt;div style="margin-bottom: 50px;"&gt;&lt;/div&gt;
&lt;p&gt;結果は以下のとおりで，差は微妙ですがオプションの方が高速です．&lt;br&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;7.22s user 0.44s system 99% cpu 7.663 total&lt;/code&gt;（オプション）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;7.61s user 0.44s system 99% cpu 8.061 total&lt;/code&gt;（文字列比較）&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;h3 id="_7"&gt;文字列の内容で判定&lt;/h3&gt;
&lt;p&gt;変数に代入されている特定の文字列を確認して条件分岐させたい場合は以下です．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;
#!/bin/zsh

moji='任意'

if [ "$moji" = "任意" ]; then
    echo '任意です'
fi
&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="middle"&gt;
任意です
&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;test&lt;/code&gt;コマンドで文字列同士を比較するには&lt;code&gt;=&lt;/code&gt;演算子を使用します．&lt;br&gt;
上記のコードでは変数&lt;code&gt;moji&lt;/code&gt;に「任意」が入っているためif文内の処理が実行されています．&lt;/p&gt;
&lt;div style="margin-bottom: 50px;"&gt;&lt;/div&gt;

&lt;p&gt;否定の場合は&lt;code&gt;!&lt;/code&gt;を使用して以下のように記載すればOKです．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;
if [ "$moji" != "任意" ]; then
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="_8"&gt;ひとこと&lt;/h2&gt;
&lt;p&gt;シェルスクリプトの条件式は色々と書き方があるので，なかなかややこしいですね．&lt;br&gt;
もっとよい書き方をご存知の方がいればぜひお知らせください！&lt;/p&gt;
&lt;div style="margin-bottom: 100px;"&gt;&lt;/div&gt;

&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;&lt;code&gt;m_&lt;/code&gt;の後に（あらゆる）文字が０字以上続く（＝&lt;code&gt;m_&lt;/code&gt;で始まる）という意味です．&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;以下のコードを実行する際はどちらかの&lt;code&gt;while&lt;/code&gt;をコメントアウトして行います．&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Mac-Linux"></category><category term="zsh"></category><category term="shellscript"></category></entry><entry><title>【シェルスクリプト】if文でのブール値（true/false）判定</title><link href="https://www.tecrab.com/articles/shell-if-test-boolean.html" rel="alternate"></link><published>2022-12-25T00:00:00+09:00</published><updated>2022-12-26T00:00:00+09:00</updated><author><name>かに</name></author><id>tag:www.tecrab.com,2022-12-25:/articles/shell-if-test-boolean.html</id><summary type="html">&lt;p&gt;シェルスクリプトのif文におけるブール値判定をまとめています&lt;/p&gt;</summary><content type="html">&lt;div class="admonition abstract"&gt;
&lt;p&gt;本記事ではシェルスクリプトにおけるif文のブール値判定について解説しています．&lt;/p&gt;
&lt;/div&gt;
&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;目次&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;ブール値判定&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;ひとこと&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="_1"&gt;ブール値判定&lt;/h2&gt;
&lt;p&gt;シェルスクリプトの&lt;code&gt;if&lt;/code&gt;文でシンプルにブール値判定を行うには以下のとおりです．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;
#!/bin/zsh

check=true

if $check; then
    echo 'check'
fi

&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="middle"&gt;
check
&lt;/pre&gt;

&lt;p&gt;上記のように記載すると&lt;code&gt;if&lt;/code&gt;文の条件式に&lt;code&gt;true&lt;/code&gt;コマンドを入れているものと同義です．&lt;br&gt;
引数等で条件分岐する際に簡便に使用できます．&lt;/p&gt;
&lt;div style="margin-bottom: 50px;"&gt;&lt;/div&gt;

&lt;p&gt;否定の場合は&lt;code&gt;!&lt;/code&gt;を使用して以下のように記載します．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;
#!/bin/zsh

check=false

if ! $check; then
    echo 'check false'
fi

&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="end"&gt;
check false
&lt;/pre&gt;

&lt;div class="admonition explanation"&gt;
&lt;p class="admonition-title"&gt;関連記事&lt;/p&gt;
&lt;p&gt;任意の文字列について「〜で始まる/終わる/〜が含まれる」を条件式にしたい場合は以下の記事をご覧ください．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;シェルスクリプト&lt;br&gt;
　&lt;a href="https://www.tecrab.com/articles/shell-if-test-str.html" rel="noopener noreferrer" target="_blank"&gt;文字列を「〜で始まる/終わる/〜が含まれる/存在有無」で判定する方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Python&lt;br&gt;
　&lt;a href="https://www.tecrab.com/articles/python-starts-ends-with-in.html" rel="noopener noreferrer" target="_blank"&gt;文字列を「〜で始まる/終わる/〜が含まれる」で抽出する方法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="_2"&gt;ひとこと&lt;/h2&gt;
&lt;p&gt;if文の条件式としてシンプルにbooleanで判定する方法について紹介しました．&lt;br&gt;&lt;/p&gt;
&lt;div style="margin-bottom: 100px;"&gt;&lt;/div&gt;</content><category term="Mac-Linux"></category><category term="zsh"></category><category term="shellscript"></category></entry><entry><title>【Python】一番最後に出現する文字のみを置換する方法</title><link href="https://www.tecrab.com/articles/python-reg-replace-end.html" rel="alternate"></link><published>2022-12-14T00:00:00+09:00</published><updated>2022-12-14T00:00:00+09:00</updated><author><name>かに</name></author><id>tag:www.tecrab.com,2022-12-14:/articles/python-reg-replace-end.html</id><summary type="html">&lt;p&gt;最後にマッチする文字列を正規表現で置換する方法です．&lt;/p&gt;</summary><content type="html">&lt;div class="admonition abstract"&gt;
&lt;p&gt;本記事では特定の文字を検索し，一番最後にヒットした文字列を置換する方法をご紹介します．&lt;/p&gt;
&lt;/div&gt;
&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;目次&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;事前準備&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_2"&gt;一番最後にヒットした文字列のみを置換&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;行単位で最後の文字列のみを置換&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_4"&gt;ひとこと&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="_1"&gt;事前準備&lt;/h2&gt;
&lt;p&gt;今回は正規表現を使用するのでPythonの標準ライブラリの&lt;code&gt;re&lt;/code&gt;を&lt;code&gt;import&lt;/code&gt;します．&lt;br&gt;
また，置換対象の文章も合わせて変数に入れておきます．&lt;/p&gt;
&lt;pre class="end"&gt;&lt;code class="language-python"&gt;
import re

s = '''吾輩は猫である。名前はまだ無い。〜中略〜 吾輩はここで始めて人間というものを見た。
〜中略〜 はてな何でも容子がおかしいと、のそのそ這い出して見ると非常に痛い。
吾輩は藁わらの上から急に笹原の中へ棄てられたのである。
'''
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="_2"&gt;一番最後にヒットした文字列のみを置換&lt;/h3&gt;
&lt;p&gt;事前準備で用意した文章には「吾輩」という言葉が複数出現しています．&lt;br&gt;
この「吾輩」のうち，一番最後にヒットする「吾輩」のみを任意の文字列に変換します．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;
ss = re.sub(r'吾輩(?!.+吾輩)', '★★', s, flags=re.DOTALL)
print(ss)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;
吾輩は猫である。名前はまだ無い。〜中略〜 吾輩はここで始めて人間というものを見た。
〜中略〜 はてな何でも容子がおかしいと、のそのそ這い出して見ると非常に痛い。
&lt;span style="color:#ff0000;"&gt;★★&lt;/span&gt;は藁わらの上から急に笹原の中へ棄てられたのである。
&lt;/pre&gt;
&lt;p style="font-size: 13px;"&gt;※ 実行結果の色は見やすさのためにつけています．&lt;/p&gt;
&lt;p&gt;結果を見ると最後に出現した「吾輩」のみが「★★」になっていますね．&lt;/p&gt;
&lt;div style="margin-bottom: 60px;"&gt;&lt;/div&gt;

&lt;p&gt;また，「吾輩」の出現数が１つだけ減っているのも以下で確認できます．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;
print(f'置換前の吾輩の数{s.count("吾輩")}')
print(f'置換後の吾輩の数{ss.count("吾輩")}')
&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="middle"&gt;
置換前の吾輩の数3
置換後の吾輩の数2
&lt;/pre&gt;

&lt;div class="admonition explanation"&gt;
&lt;p class="admonition-title"&gt;解説&lt;/p&gt;
&lt;p&gt;正規表現の否定先読みを使用して「吾輩」とマッチし，その後「吾輩」で終わることがなければマッチした「吾輩」を置換するということをしています．&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sub()&lt;/code&gt;の引数については以下のとおりです．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一引数：正規表現を指定します.&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;第二引数：置換後の文字列を指定します．&lt;/li&gt;
&lt;li&gt;第三引数：置換対象の文字列を指定します．&lt;/li&gt;
&lt;li&gt;第四引数：&lt;code&gt;.&lt;/code&gt;を改行にもマッチさせるためのフラグ指定です.&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2"&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="_3"&gt;行単位で最後の文字列のみを置換&lt;/h2&gt;
&lt;p&gt;行単位で最後に出現する文字を置換する場合は以下のようなコードです．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;
sss = re.sub(r'吾輩(?!.+吾輩)', '★★', s)
print(sss)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;
吾輩は猫である。名前はまだ無い。〜中略〜 &lt;span style="color:#ff0000;"&gt;★★&lt;/span&gt;はここで始めて人間というものを見た。
〜中略〜 はてな何でも容子がおかしいと、のそのそ這い出して見ると非常に痛い。
&lt;span style="color:#ff0000;"&gt;★★&lt;/span&gt;は藁わらの上から急に笹原の中へ棄てられたのである。
&lt;/pre&gt;
&lt;p style="font-size: 13px;"&gt;※ 実行結果の色は見やすさのためにつけています．&lt;/p&gt;

&lt;p&gt;前項のコードから&lt;code&gt;flags=re.DOTALL&lt;/code&gt;を除いただけです．&lt;br&gt;
これにより改行を含む単位で最後に出現する「吾輩」を判定するようになります.&lt;sup id="fnref:3"&gt;&lt;a class="footnote-ref" href="#fn:3"&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;h2 id="_4"&gt;ひとこと&lt;/h2&gt;
&lt;p&gt;もっとよい方法をご存知の方がいればぜひお知らせください．&lt;/p&gt;
&lt;div style="margin-bottom: 100px;"&gt;&lt;/div&gt;

&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;&lt;code&gt;r&lt;/code&gt;はraw文字列を指定しています．&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;このフラグがない場合，&lt;code&gt;.&lt;/code&gt;が改行でマッチしなくなります．フラグを付けない場合の検証は事項参照．&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:3"&gt;
&lt;p&gt;結果を見ると「吾輩」が含まれる1, 3行目について，最後の「吾輩」が「★★」に置換されています．&amp;#160;&lt;a class="footnote-backref" href="#fnref:3" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="正規表現"></category><category term="Python"></category><category term="正規表現"></category></entry><entry><title>DataFrameで行・列（インデックス・カラム）をまとめて作成する方法</title><link href="https://www.tecrab.com/articles/dataframe-create-empty-col.html" rel="alternate"></link><published>2022-11-29T00:00:00+09:00</published><updated>2022-11-29T00:00:00+09:00</updated><author><name>かに</name></author><id>tag:www.tecrab.com,2022-11-29:/articles/dataframe-create-empty-col.html</id><summary type="html">&lt;p&gt;pandas DataFrameで空の行・列を複数一気に追加する方法です．&lt;/p&gt;</summary><content type="html">&lt;div class="admonition abstract"&gt;
&lt;p&gt;本記事ではDataFrameの操作として，以下の内容を解説しています．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;既存のDataFrameに空の行・列をまとめて追加する&lt;/li&gt;
&lt;li&gt;行・列の順番を入れ替える&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;公式 Reference: &lt;a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.reindex.html" rel="noopener noreferrer" target="_blank"&gt;pandas.DataFrame.reindex&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;目次&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;事前準備&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_2"&gt;空の行（インデックス）を追加&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;行（インデックス）を並び替える&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_4"&gt;空の列（カラム）を追加&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_5"&gt;列（カラム）を並び替える&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_6"&gt;新しく追加する行・列のデフォルト要素を変更したい&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_7"&gt;ひとこと&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="_1"&gt;事前準備&lt;/h2&gt;
&lt;p&gt;まずはサンプルのDataFrameを作成します．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;
import pandas as pd

df = pd.DataFrame(range(3), columns=['col_1'])
df
&lt;/code&gt;&lt;/pre&gt;
&lt;table class="dataframe end" border="1"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;col_1&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;2&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id="_2"&gt;空の行（インデックス）を追加&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;pandas.DataFrame&lt;/code&gt;のメソッド&lt;code&gt;reindex&lt;/code&gt;を使用して以下のように作成できます．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;
new_index = [0, 1, 2, 3]
df1 = df.reindex(index=new_index)
df1
&lt;/code&gt;&lt;/pre&gt;
&lt;table class="dataframe middle" border="1"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;col_1&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;1.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;2.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;code&gt;reindex&lt;/code&gt;のパラメータ&lt;code&gt;index&lt;/code&gt;を利用しています．&lt;br&gt;
「既存のDataFrameのインデックス」＋「追加したいインデックス」をリストで指定することで既存のデータはそのまま，追加したインデックスには&lt;code&gt;np.nan&lt;/code&gt;が入ります．&lt;/p&gt;
&lt;div class="admonition info-box"&gt;
&lt;p class="admonition-title"&gt;参考&lt;/p&gt;
&lt;p&gt;&lt;code&gt;col_1&lt;/code&gt;列のデータ型が&lt;code&gt;int64&lt;/code&gt;から&lt;code&gt;float64&lt;/code&gt;に変わっていることに注意してください.&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;br&gt;
これは新しく追加したインデックスの要素が&lt;code&gt;np.nan&lt;/code&gt;のため生じています．&lt;br&gt;
（追加インデックスの要素を指定する方法は&lt;a href="#_5"&gt;後述&lt;/a&gt;）&lt;/p&gt;
&lt;/div&gt;
&lt;div style="margin: -50px 0px;"&gt;&lt;/div&gt;

&lt;div class="admonition warning-box"&gt;
&lt;p class="admonition-title"&gt;注意&lt;/p&gt;
&lt;p&gt;&lt;code&gt;reindex&lt;/code&gt;ではパラメータ&lt;code&gt;index&lt;/code&gt;に指定したカラムのみが戻ってきます．&lt;br&gt;
そのため既存のDataFrameにあるインデックスを指定しなかった場合は以下のようになります．
&lt;pre&gt;&lt;code class="language-python"&gt;
df.reindex(index=[0, 3])
&lt;/code&gt;&lt;/pre&gt;
&lt;table class="dataframe in-box" border="1"&gt;
&lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
    &lt;th&gt;&lt;/th&gt;
    &lt;th&gt;col_1&lt;/th&gt;
    &lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
    &lt;tr&gt;
    &lt;th&gt;0&lt;/th&gt;
    &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
    &lt;th&gt;3&lt;/th&gt;
    &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/p&gt;
&lt;p&gt;既存のインデックス名を間違えるとインデックスが丸ごと消えるので注意しましょう．&lt;/p&gt;
&lt;/div&gt;
&lt;h3 id="_3"&gt;行（インデックス）を並び替える&lt;/h3&gt;
&lt;p&gt;インデックスを並び替えるには以下のようにします．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;
new_index2 = [3, 2, 1, 0]
df1_r = df.reindex(index=new_index2)
df1_r
&lt;/code&gt;&lt;/pre&gt;
&lt;table class="dataframe middle" border="1"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;col_1&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;2.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;1.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;パラメータ&lt;code&gt;index&lt;/code&gt;で指定するリストを任意の並びに変更すればその順序でインデックスが並び替えられます．&lt;/p&gt;
&lt;h3 id="_4"&gt;空の列（カラム）を追加&lt;/h3&gt;
&lt;p&gt;カラムを新しく追加する際もインデックス追加の場合と同様に&lt;code&gt;pandas.DataFrame&lt;/code&gt;のメソッド&lt;code&gt;reindex&lt;/code&gt;を使用して以下のように作成できます．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;
col = ['col_1', 'col_2', 'col_3']
df2 = df.reindex(columns=col)
df2
&lt;/code&gt;&lt;/pre&gt;
&lt;table class="dataframe middle" border="1"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;col_1&lt;/th&gt;
      &lt;th&gt;col_2&lt;/th&gt;
      &lt;th&gt;col_3&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;code&gt;reindex&lt;/code&gt;のパラメータ&lt;code&gt;columns&lt;/code&gt;を利用しています．&lt;br&gt;
「既存のDataFrameのカラム」＋「追加したいカラム」をリストで指定することで既存のデータはそのまま，追加したカラムには&lt;code&gt;np.nan&lt;/code&gt;が入ります．&lt;/p&gt;
&lt;div class="admonition warning-box"&gt;
&lt;p class="admonition-title"&gt;注意&lt;/p&gt;
&lt;p&gt;パラメータ&lt;code&gt;columns&lt;/code&gt;に関しても指定したカラムのみが戻ってきます．&lt;br&gt;
そのため既存のDataFrameにあるカラムを指定しなかった場合は以下のようになります．
&lt;pre&gt;&lt;code class="language-python"&gt;
df.reindex(columns=['col_2', 'col_3'])
&lt;/code&gt;&lt;/pre&gt;
&lt;table class="dataframe in-box" border="1"&gt;
&lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
    &lt;th&gt;&lt;/th&gt;
    &lt;th&gt;col_2&lt;/th&gt;
    &lt;th&gt;col_3&lt;/th&gt;
    &lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
    &lt;tr&gt;
    &lt;th&gt;0&lt;/th&gt;
    &lt;td&gt;NaN&lt;/td&gt;
    &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
    &lt;th&gt;1&lt;/th&gt;
    &lt;td&gt;NaN&lt;/td&gt;
    &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
    &lt;th&gt;2&lt;/th&gt;
    &lt;td&gt;NaN&lt;/td&gt;
    &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/p&gt;
&lt;p&gt;カラム名の指定を間違えるとカラムが丸ごと消えるので注意しましょう．&lt;/p&gt;
&lt;/div&gt;
&lt;h3 id="_5"&gt;列（カラム）を並び替える&lt;/h3&gt;
&lt;p&gt;カラムの並び替えもインデックスの場合と同様に以下のようにします．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;
col2 = ['col_3', 'col_1', 'col_2']
df2_r = df.reindex(columns=col2)
df2_r
&lt;/code&gt;&lt;/pre&gt;
&lt;table class="dataframe middle" border="1"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;col_3&lt;/th&gt;
      &lt;th&gt;col_1&lt;/th&gt;
      &lt;th&gt;col_2&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;パラメータ&lt;code&gt;columns&lt;/code&gt;で指定するリストを任意の並びに変更すればその順序でカラムが並び替えられます．&lt;/p&gt;
&lt;h3 id="_6"&gt;新しく追加する行・列のデフォルト要素を変更したい&lt;/h3&gt;
&lt;p&gt;新しくインデックス・カラムを追加する場合，その要素は&lt;code&gt;np.nan&lt;/code&gt;がデフォルトです．&lt;br&gt;
これを変更するにはパラメータ&lt;code&gt;fill_value&lt;/code&gt;を指定します.&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2"&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;br&gt;
以下の例では文字列「欠損値」を入れています．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;
df3 = df.reindex(columns=col, fill_value='欠損値')
df3
&lt;/code&gt;&lt;/pre&gt;
&lt;table class="dataframe end" border="1"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;col_1&lt;/th&gt;
      &lt;th&gt;col_2&lt;/th&gt;
      &lt;th&gt;col_3&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;欠損値&lt;/td&gt;
      &lt;td&gt;欠損値&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;欠損値&lt;/td&gt;
      &lt;td&gt;欠損値&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;欠損値&lt;/td&gt;
      &lt;td&gt;欠損値&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id="_7"&gt;ひとこと&lt;/h2&gt;
&lt;p&gt;必要に駆られてDataFrameにまとめて行・列を追加する際に役立つかと思います．&lt;br&gt;
1列だけ追加などであれば&lt;code&gt;df['列名'] = 100&lt;/code&gt;の方がいいですね．&lt;br&gt;
なお，DataFrameでの操作は基本的に遅いので，先にNumPyで行列を作成して一気にDataFrameへ変換することが普通です．&lt;/p&gt;
&lt;div style="margin-bottom: 100px;"&gt;&lt;/div&gt;

&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;&lt;code&gt;print(f'{df.dtypes[0]} -&amp;gt; {df1.dtypes[0]}')&lt;/code&gt; &amp;gt;&amp;gt;&amp;gt; &lt;code&gt;int64 -&amp;gt; float64&lt;/code&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;インデックス・カラムともに同じです．&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Python"></category><category term="Python"></category><category term="pandas"></category></entry><entry><title>サイトをWordPressからPelicanに切り替えました</title><link href="https://www.tecrab.com/articles/site-renewal.html" rel="alternate"></link><published>2022-10-30T00:00:00+09:00</published><updated>2022-10-30T00:00:00+09:00</updated><author><name>かに</name></author><id>tag:www.tecrab.com,2022-10-30:/articles/site-renewal.html</id><summary type="html">&lt;p&gt;ブログリニューアルのお知らせです．&lt;/p&gt;</summary><content type="html">&lt;div class="admonition abstract"&gt;
&lt;p&gt;サイトをリニューアルしました．&lt;/p&gt;
&lt;/div&gt;
&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;目次&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;概要&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pelican"&gt;pelicanに関して&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;ブログ移行の振り返り&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#pelican_1"&gt;pelicanの環境構築&amp;amp;動作確認&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;テーマ選定&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_4"&gt;既存記事の書き直し&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_5"&gt;デプロイ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_6"&gt;ひとこと&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="_1"&gt;概要&lt;/h2&gt;
&lt;p&gt;これまではWordPressでブログを運営していましたが，pelicanに切り替えました．&lt;br&gt;
WordPressでも大きな不満はなかったのですが，余計な機能が多くもっとシンプルに管理・運営がしたいと考えて移行を行なった次第です．&lt;/p&gt;
&lt;p&gt;装飾などについては&lt;a href="http://revalab.net/pages/about.html" rel="noopener noreferrer" target="_blank"&gt;こちら&lt;/a&gt;を参照．&lt;/p&gt;
&lt;h2 id="pelican"&gt;pelicanに関して&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://getpelican.com/" rel="noopener noreferrer" target="_blank"&gt;pelican&lt;/a&gt;はPython謹製の静的サイトジェネレーターで，とても簡単にブログを作成することができます．&lt;br&gt;&lt;/p&gt;
&lt;p&gt;（個人的）メリット&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;記事がローカル&amp;amp;Markdown形式で書ける&lt;/li&gt;
&lt;li&gt;サイトプレビュー・更新が１コマンド&lt;/li&gt;
&lt;li&gt;ディレクトリ構成もシンプルで管理が容易&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_2"&gt;ブログ移行の振り返り&lt;/h2&gt;
&lt;p&gt;ざっくりと以下の流れで実施しました．&lt;br&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;pelicanの環境構築&amp;amp;動作確認&lt;/li&gt;
&lt;li&gt;テーマ選定&lt;/li&gt;
&lt;li&gt;既存記事の書き直し&lt;/li&gt;
&lt;li&gt;デプロイ&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="pelican_1"&gt;pelicanの環境構築&amp;amp;動作確認&lt;/h3&gt;
&lt;p&gt;環境構築などはそれほど大きな問題なく進めることができました．&lt;/p&gt;
&lt;div style="margin-bottom: 90px;"&gt;&lt;/div&gt;

&lt;h3 id="_3"&gt;テーマ選定&lt;/h3&gt;
&lt;p&gt;pelicanには様々なテーマがありますので，気に入ったものがあれば簡単に取り込むことが可能です．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/getpelican/pelican-themes" rel="noopener noreferrer" target="_blank"&gt;pelican-themes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Flexというテーマがよく使われているみたいでしたが，当ブログはシンプルさを確保するために自作しました．&lt;/p&gt;
&lt;p&gt;自作テーマを作るのは面白い作業でしたが，管理人の知識不足で時間がかかりました・・・&lt;br&gt;&lt;/p&gt;
&lt;div style="margin-bottom: 90px;"&gt;&lt;/div&gt;

&lt;h3 id="_4"&gt;既存記事の書き直し&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;一番大変&lt;/strong&gt;&lt;br&gt;
頑張って書き直しました.&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;div style="margin-bottom: 90px;"&gt;&lt;/div&gt;

&lt;h3 id="_5"&gt;デプロイ&lt;/h3&gt;
&lt;p&gt;GitHub PagesというGitHubのサービスを使ってブログを公開しました．&lt;br&gt;
無料でブログを公開できるとはすごいサービスです．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GitHub Pagesへのデプロイ（記事公開）&lt;/li&gt;
&lt;li&gt;独自ドメインの引き継ぎ&lt;/li&gt;
&lt;li&gt;Google Analyticsなどの対応&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;すでに独自ドメインで運用していたブログがあったので少々面倒でした・・・&lt;/p&gt;
&lt;div style="margin-bottom: 90px;"&gt;&lt;/div&gt;

&lt;h2 id="_6"&gt;ひとこと&lt;/h2&gt;
&lt;p&gt;結構大変&amp;amp;面倒でしたが，これで記事をスムーズに書ける環境が整いました．&lt;br&gt;
早く慣れて有用な記事を作成していきたいです．&lt;/p&gt;
&lt;div style="margin-bottom: 100px;"&gt;&lt;/div&gt;

&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;WordPressからMarkdownへの出力もできるようですが見直しも兼ねて・・・&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="ブログ運営"></category><category term="雑記"></category><category term="pelican"></category></entry><entry><title>【PyTorch】touchvizのインストール方法（Mac）</title><link href="https://www.tecrab.com/articles/pytorch_torchviz.html" rel="alternate"></link><published>2022-10-29T00:00:00+09:00</published><updated>2022-10-30T00:00:00+09:00</updated><author><name>かに</name></author><id>tag:www.tecrab.com,2022-10-29:/articles/pytorch_torchviz.html</id><summary type="html">&lt;p&gt;計算グラフを表示するライブラリtouchvizをインストールする方法です．&lt;/p&gt;</summary><content type="html">&lt;div class="admonition abstract"&gt;
&lt;p&gt;本記事ではMacにおけるtouchvizのインストール方法をご紹介します．&lt;/p&gt;
&lt;/div&gt;
&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;目次&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;インストール方法&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_2"&gt;参考&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;ひとこと&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="_1"&gt;インストール方法&lt;/h2&gt;
&lt;p&gt;touchvizは計算グラフを表示できるPythonのライブラリです．&lt;br&gt;
touchvizのインストールには以下の&lt;strong&gt;２つ&lt;/strong&gt;のコマンドを実行すればOKです．&lt;/p&gt;
&lt;p&gt;torchviz自体のインストール&lt;/p&gt;
&lt;pre class="command-line s-middle" data-prompt="%"&gt;
&lt;code class="language-bash"&gt;
pip install torchviz
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;torchvizを動作させるのに必要なパッケージ（brewでインストール）&lt;/p&gt;
&lt;pre class="command-line s-end" data-prompt="%"&gt;
&lt;code class="language-bash"&gt;
brew install graphviz
&lt;/code&gt;
&lt;/pre&gt;

&lt;h3 id="_2"&gt;参考&lt;/h3&gt;
&lt;p&gt;torchvizだけをインストールして動かすと以下のようなエラーが出ます．&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ExecutableNotFound: failed to execute PosixPath('dot'), make sure the Graphviz executables are on your systems' PATH&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;torchvizはgraphvizというパッケージがインストールされていないと動かないようです．&lt;/p&gt;
&lt;h2 id="_3"&gt;ひとこと&lt;/h2&gt;
&lt;p&gt;管理人はtorchvizだけを入れて動かしたのでエラーとなってしまいました・・・&lt;br&gt;
&lt;code&gt;brew&lt;/code&gt;でgraphvizも忘れずに入れておきましょう．&lt;/p&gt;
&lt;div style="margin-bottom: 100px;"&gt;&lt;/div&gt;</content><category term="PyTorch"></category><category term="PyTorch"></category><category term="Python"></category><category term="環境構築"></category></entry><entry><title>JupyterでDockerのPostgreSQLに接続する方法</title><link href="https://www.tecrab.com/articles/jupyter-sql-postgres.html" rel="alternate"></link><published>2022-09-01T00:00:00+09:00</published><updated>2022-09-02T00:00:00+09:00</updated><author><name>かに</name></author><id>tag:www.tecrab.com,2022-09-01:/articles/jupyter-sql-postgres.html</id><summary type="html">&lt;p&gt;JupyterでDockerに構築したPostgreSQLと接続して動かす方法です．&lt;/p&gt;</summary><content type="html">&lt;div class="admonition abstract"&gt;
&lt;p&gt;ローカルのJupyterとDockerのPostgreSQLを接続しJupyterでクエリを実行する方法について解説しています．&lt;br&gt;
環境構築後はJupyterのセルで簡単にクエリを実行することができるようになります．&lt;/p&gt;
&lt;/div&gt;
&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;目次&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;前提条件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#postgresql"&gt;PostgreSQLのインストール&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pythonjupyter"&gt;Python（Jupyter）側の準備&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#docker"&gt;Docker側の設定&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#jupytersql"&gt;JupyterでSQLを実行する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_4"&gt;ひとこと&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="_1"&gt;前提条件&lt;/h2&gt;
&lt;p&gt;本記事の前提条件は以下のとおりです．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;macOS&lt;/li&gt;
&lt;li&gt;Homebrewがインストール済み&lt;/li&gt;
&lt;li&gt;Pythonの環境構築済み&lt;/li&gt;
&lt;li&gt;Docker Desktopがインストール済み&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="postgresql"&gt;PostgreSQLのインストール&lt;/h2&gt;
&lt;p&gt;PostgreSQLを&lt;code&gt;Homebrew&lt;/code&gt;でインストールします．&lt;/p&gt;
&lt;pre class="command-line" data-prompt="%" style="margin-bottom: 90px;"&gt;
&lt;code class="language-bash"&gt;
brew install postgresql
&lt;/code&gt;
&lt;/pre&gt;

&lt;h2 id="pythonjupyter"&gt;Python（Jupyter）側の準備&lt;/h2&gt;
&lt;h5 id="ipython-sql"&gt;ipython-sql のインストール&lt;/h5&gt;
&lt;p&gt;JupyterでSQLを動かすために&lt;code&gt;ipython-sql&lt;/code&gt;を以下のコマンドでインストールします．&lt;/p&gt;
&lt;pre class="command-line" data-prompt="%" style="margin-bottom: 90px;"&gt;
&lt;code class="language-bash"&gt;
pip install ipython-sql
&lt;/code&gt;
&lt;/pre&gt;

&lt;h5 id="psycopg2"&gt;psycopg2のインストール&lt;/h5&gt;
&lt;p&gt;続いてPythonのPostgreSQLドライバー&lt;code&gt;psycopg2&lt;/code&gt;を以下のコマンドでインストールします．&lt;/p&gt;
&lt;pre class="command-line" data-prompt="%" style="margin-bottom: 40px;"&gt;
&lt;code class="language-bash"&gt;
pip install psycopg2
&lt;/code&gt;
&lt;/pre&gt;

&lt;div class="admonition warning-box"&gt;
&lt;p class="admonition-title"&gt;注意&lt;/p&gt;
&lt;p&gt;psycopg2をインストールしておかないと後続の処理で&lt;code&gt;No module named 'psycopg2'&lt;/code&gt;が出てしまいます.&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id="docker"&gt;Docker側の設定&lt;/h2&gt;
&lt;p&gt;PostgreSQLの公式イメージを使用してDocker上に環境を作ります．&lt;br&gt;&lt;/p&gt;
&lt;h5 id="docker-composeyml"&gt;docker-compose.ymlの作成&lt;/h5&gt;
&lt;p&gt;以下の内容をコピーして&lt;code&gt;docker-compose.yml&lt;/code&gt;というファイル名で保存します．&lt;/p&gt;
&lt;pre style="margin-bottom: 90px;"&gt;
&lt;code class="language-yaml"&gt;
version: '3'

services:
  db:
    container_name: postgres_j
    image: postgres:14.0
    ports:
      - 5432:5432
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: pass
      TZ: "Asia/Tokyo"
    tty: true
    volumes:
      - ./db:/var/lib/postgresql/data
      - ./init_db:/docker-entrypoint-initdb.d
&lt;/code&gt;
&lt;/pre&gt;

&lt;h5 id="sql"&gt;構築時に実行するSQLの準備&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;docker-compose&lt;/code&gt;時に併せて実行するSQLファイルを作成します．&lt;br&gt;
以下の内容をコピーして&lt;code&gt;00_init.sql&lt;/code&gt;というファイル名で保存します．&lt;/p&gt;
&lt;pre style="margin-bottom: 90px;"&gt;
&lt;code class="language-sql"&gt;
--ユーザーの作成
CREATE USER tst_user;

--DBの作成
CREATE DATABASE tst_db;

--ユーザーにDBの権限をまとめて付与
GRANT ALL PRIVILEGES ON DATABASE tst_db TO tst_user;

-- DBを切り替え
\c tst_db tst_user

--テーブルを作成
CREATE TABLE tst_tb (
    id SERIAL PRIMARY KEY, 
    c_name VARCHAR(10),
    age INTEGER,
    check_date DATE
);

--テーブルにデータを挿入
INSERT INTO
    tst_tb
    (c_name, age, check_date)
VALUES
    ('maguro', 18, CURRENT_DATE),
    ('hokke', 19, CURRENT_DATE),
    ('iwashi', 20, CURRENT_DATE);
&lt;/code&gt;
&lt;/pre&gt;

&lt;h5 id="_2"&gt;階層の整理&lt;/h5&gt;
&lt;p&gt;以下のようなディレクトリ構成にしましょう．&lt;br&gt;&lt;/p&gt;
&lt;pre style="margin-bottom: 50px;"&gt;
postgres_j
├── docker-compose.yml
└── init_db
    └── 00_init.sql
&lt;/pre&gt;

&lt;div class="admonition warning-box"&gt;
&lt;p class="admonition-title"&gt;注意&lt;/p&gt;
&lt;p&gt;&lt;code&gt;postgres_j&lt;/code&gt;ディレクトリの保存場所にpathが通るので，今後も永続して使う場合は保存場所に注意しましょう．&lt;br&gt;
（次項の&lt;code&gt;docker-compose up -d&lt;/code&gt;を実行する前に適当な場所に移動させればOKです）&lt;/p&gt;
&lt;/div&gt;
&lt;h5 id="docker-compose"&gt;docker-compose&lt;/h5&gt;
&lt;p&gt;dockerアプリを起動し&lt;code&gt;docker-compose.yml&lt;/code&gt;がある階層で以下のコマンドを実行します．&lt;/p&gt;
&lt;pre class="command-line" data-prompt="%" style="margin-bottom: 30px;"&gt;
&lt;code class="language-bash"&gt;
docker-compose up -d
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;実行後，しばらく待つと&lt;code&gt;postgres_j&lt;/code&gt;というコンテナができます．&lt;/p&gt;
&lt;div style="margin-bottom: 50px;"&gt;&lt;/div&gt;

&lt;h5 id="psql"&gt;psqlで接続確認&lt;/h5&gt;
&lt;p&gt;ターミナルからDockerのPostgreSQLに接続します．&lt;br&gt;
以下のコマンドを実行するとパスワードを求められるので&lt;code&gt;docker-compose.yml&lt;/code&gt;で設定したパスワード&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2"&gt;2&lt;/a&gt;&lt;/sup&gt;を入れてreturnを押します．&lt;br&gt;
最終的に以下のような出力になっていればOKです．&lt;/p&gt;
&lt;pre class="command-line" data-prompt="%"&gt;
&lt;code class="language-bash"&gt;
psql -h localhost -p 5432 -U postgres tst_db
&lt;/code&gt;
&lt;/pre&gt;
&lt;pre style="margin-bottom: 90px;"&gt;
Password for user postgres:
psql (14.5 (Homebrew), server 14.0 (Debian 14.0-1.pgdg110+1))
Type "help" for help.

tst_db=#
&lt;/pre&gt;

&lt;h5 id="_3"&gt;クエリでテーブルの存在を確認&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;00_init.sql&lt;/code&gt;で作成した&lt;code&gt;tst_tb&lt;/code&gt;を確認しましょう．&lt;br&gt;
以下のクエリを実行してテーブルが表示されればOKです．&lt;/p&gt;
&lt;pre class="command-line" data-prompt="tst_db=#"&gt;
&lt;code class="language-bash"&gt;
SELECT * FROM tst_tb;
&lt;/code&gt;
&lt;/pre&gt;
&lt;pre style="margin-bottom: 50px;"&gt;
 id | c_name | age | check_date
----+--------+-----+------------
  1 | maguro |  18 | 2022-09-01
  2 | hokke  |  19 | 2022-09-01
  3 | iwashi |  20 | 2022-09-01
(3 rows)
&lt;/pre&gt;

&lt;p&gt;上記の確認が取れたら&lt;code&gt;exit&lt;/code&gt;で抜けておきましょう．&lt;/p&gt;
&lt;pre class="command-line" data-prompt="tst_db=#" style="margin-bottom: 90px;"&gt;
&lt;code class="language-bash"&gt;
exit
&lt;/code&gt;
&lt;/pre&gt;

&lt;h3 id="jupytersql"&gt;JupyterでSQLを実行する&lt;/h3&gt;
&lt;p&gt;これまでの手順でJupyterでSQLを実行する準備が整いました．&lt;br&gt;
Jupyterのセルで以下のマジックコマンドを実行します．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;
%load_ext sql
%sql postgresql://postgres:pass@localhost:5432/tst_db
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;２行目は以下のような構成になっています．&lt;br&gt;
&lt;code&gt;postgresql://{user}:{password}@{host}:{port}/{db_name}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;エラーなく実行が完了すればDocker内のPostgreSQLに接続できています．&lt;/p&gt;
&lt;div class="admonition info-box"&gt;
&lt;p class="admonition-title"&gt;参考&lt;/p&gt;
&lt;p&gt;上記のコマンドは１回実行すればOKです．&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;あとは，以下のように&lt;code&gt;%sql&lt;/code&gt;と共にクエリをセルで実行すればテーブルを取得できます！&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;
%sql SELECT * FROM tst_tb;
&lt;/code&gt;&lt;/pre&gt;

&lt;div class="nb-html-output" style="margin-bottom: 50px;"&gt;&lt;table&gt;
    &lt;tbody&gt;&lt;tr&gt;
        &lt;th&gt;id&lt;/th&gt;
        &lt;th&gt;c_name&lt;/th&gt;
        &lt;th&gt;age&lt;/th&gt;
        &lt;th&gt;check_date&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;1&lt;/td&gt;
        &lt;td&gt;maguro&lt;/td&gt;
        &lt;td&gt;18&lt;/td&gt;
        &lt;td&gt;2022-09-01&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;2&lt;/td&gt;
        &lt;td&gt;hokke&lt;/td&gt;
        &lt;td&gt;19&lt;/td&gt;
        &lt;td&gt;2022-09-01&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;3&lt;/td&gt;
        &lt;td&gt;iwashi&lt;/td&gt;
        &lt;td&gt;20&lt;/td&gt;
        &lt;td&gt;2022-09-01&lt;/td&gt;
    &lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;なお，クエリを複数行書く場合は&lt;code&gt;%%sql&lt;/code&gt;を使います．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-sql"&gt;
%%sql
SELECT
    *
FROM
    tst_tb
WHERE
    age &gt;= 20;
&lt;/code&gt;&lt;/pre&gt;

&lt;div class="nb-html-output"&gt;&lt;table&gt;
    &lt;tbody&gt;&lt;tr&gt;
        &lt;th&gt;id&lt;/th&gt;
        &lt;th&gt;c_name&lt;/th&gt;
        &lt;th&gt;age&lt;/th&gt;
        &lt;th&gt;check_date&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;3&lt;/td&gt;
        &lt;td&gt;iwashi&lt;/td&gt;
        &lt;td&gt;20&lt;/td&gt;
        &lt;td&gt;2022-09-01&lt;/td&gt;
    &lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;以下のように&lt;code&gt;;&lt;/code&gt;で区切れば複数のクエリも使えます．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-sql"&gt;
%%sql
INSERT INTO
    tst_tb
    (c_name, age, check_date)
VALUES
    ('saba', 22, CURRENT_DATE);

SELECT * FROM tst_tb;
&lt;/code&gt;&lt;/pre&gt;

&lt;div class="nb-html-output"&gt;&lt;table&gt;
    &lt;tbody&gt;&lt;tr&gt;
        &lt;th&gt;id&lt;/th&gt;
        &lt;th&gt;c_name&lt;/th&gt;
        &lt;th&gt;age&lt;/th&gt;
        &lt;th&gt;check_date&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;1&lt;/td&gt;
        &lt;td&gt;maguro&lt;/td&gt;
        &lt;td&gt;18&lt;/td&gt;
        &lt;td&gt;2022-09-01&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;2&lt;/td&gt;
        &lt;td&gt;hokke&lt;/td&gt;
        &lt;td&gt;19&lt;/td&gt;
        &lt;td&gt;2022-09-01&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;3&lt;/td&gt;
        &lt;td&gt;iwashi&lt;/td&gt;
        &lt;td&gt;20&lt;/td&gt;
        &lt;td&gt;2022-09-01&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;4&lt;/td&gt;
        &lt;td&gt;saba&lt;/td&gt;
        &lt;td&gt;22&lt;/td&gt;
        &lt;td&gt;2022-09-02&lt;/td&gt;
    &lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;

&lt;h2 id="_4"&gt;ひとこと&lt;/h2&gt;
&lt;p&gt;Jupyterを使ってクエリを気軽に叩けると楽でいいですね．&lt;br&gt;
当ブログを書く際にもこの機能を使っています．&lt;/p&gt;
&lt;div style="margin-bottom: 100px;"&gt;&lt;/div&gt;

&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;Psycopgは2022年9月現在でpsycopg3が出ているのですが，psycopg3だけだとうまく動きません．&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;&lt;code&gt;POSTGRES_PASSWORD: pass&lt;/code&gt;の「pass」です．&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="SQL"></category><category term="PostgreSQL"></category><category term="Docker"></category><category term="環境構築"></category></entry><entry><title>【VSCode Neovim】モード切り替えのキーバインディングを設定する方法</title><link href="https://www.tecrab.com/articles/vscode-nvim-ctrlk.html" rel="alternate"></link><published>2022-08-04T00:00:00+09:00</published><updated>2022-08-05T00:00:00+09:00</updated><author><name>かに</name></author><id>tag:www.tecrab.com,2022-08-04:/articles/vscode-nvim-ctrlk.html</id><summary type="html">&lt;p&gt;VSCode Neovimでインサート &amp;gt; ノーマルのキーバインディングを設定する方法です．&lt;/p&gt;</summary><content type="html">&lt;div class="admonition abstract"&gt;
&lt;p&gt;VSCode Neovimでインサートモードからノーマルモードへ戻る際のキーバインディングを設定する方法です．&lt;br&gt;
&lt;kbd&gt;&lt;kbd&gt;jj&lt;/kbd&gt;&lt;/kbd&gt;以外の設定に関しても解説しています．&lt;/p&gt;
&lt;/div&gt;
&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;目次&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;背景&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#keybindingsjson"&gt;keybindings.jsonに関して&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;設定方法&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_3"&gt;参考&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_4"&gt;ひとこと&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="_1"&gt;背景&lt;/h2&gt;
&lt;p&gt;VSCode NeoVimでインサートモードからノーマルモードに戻る際のキーバインディング設定をするには&lt;code&gt;keybindings.json&lt;/code&gt;に設定を追記する必要があります．&lt;/p&gt;
&lt;h3 id="keybindingsjson"&gt;keybindings.jsonに関して&lt;/h3&gt;
&lt;p&gt;VSCodeにおいてキーボードショートカットを定義したい場合に編集するファイルです．&lt;br&gt;
開き方は以下のとおりです．&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;基本設定 &amp;gt; キーボードショートカット&lt;/strong&gt; をクリック.&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;
&lt;img src="/images/vscode-nvim-ctrlk/vscode-nvim-ctrlk_01.png" width="500" height="178"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ウィンドウ右上にあるマーク（画像赤枠）をクリックすると開きます.&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2"&gt;2&lt;/a&gt;&lt;/sup&gt;
&lt;img src="/images/vscode-nvim-ctrlk/vscode-nvim-ctrlk_02.png" width="350" height="74"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="_2"&gt;設定方法&lt;/h2&gt;
&lt;p&gt;&lt;kbd&gt;&lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;K&lt;/kbd&gt;&lt;/kbd&gt;でインサートモードからノーマルモードへ戻るように設定します．&lt;br&gt;
以下の内容を&lt;code&gt;keybindings.json&lt;/code&gt;に追記すればOKです.&lt;sup id="fnref:3"&gt;&lt;a class="footnote-ref" href="#fn:3"&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;pre style="margin-bottom: 40px;"&gt;
&lt;code class="language-bash"&gt;
{
    "key": "ctrl+k",
    "command": "vscode-neovim.escape",
    "when": "neovim.mode == insert &amp;&amp; editorTextFocus",
},
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;ビジュアル &amp;gt; ノーマルも&lt;kbd&gt;&lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;K&lt;/kbd&gt;&lt;/kbd&gt;としたい場合は以下の設定も追記しましょう．&lt;/p&gt;
&lt;pre style="margin-bottom: 20px;"&gt;
&lt;code class="language-bash"&gt;
{
    "key": "ctrl+k",
    "command": "vscode-neovim.escape",
    "when": "neovim.mode == visual &amp;&amp; editorTextFocus",
},
&lt;/code&gt;
&lt;/pre&gt;

&lt;details class="accordion-block"&gt;
&lt;summary&gt;追記場所がよくわからない方はこちらをクリック&lt;/summary&gt;
&lt;div class="accordion-summary"&gt;
&lt;p&gt;&lt;code&gt;keybindings.json&lt;/code&gt;の全体像は以下のとおりです．&lt;/p&gt;
&lt;pre style="margin: 20px 0px;"&gt;
&lt;code class="language-bash"&gt;
[
    {
        〜〜設定①〜〜
    },

    {
        〜〜設定②〜〜
    },
]
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;そのため，新たな設定を追記する場合は&lt;code&gt;[]&lt;/code&gt;内の一番下に追記しましょう．&lt;br&gt;
今回のキーバインディングの設定を追記した例は以下のとおりです．&lt;/p&gt;
&lt;pre style="margin: 20px 0px;"&gt;
&lt;code class="language-bash"&gt;
[
    {
        〜〜設定①〜〜
    },

    {
        〜〜設定②〜〜
    },

    {
        "key": "ctrl+k",
        "command": "vscode-neovim.escape",
        "when": "neovim.mode == insert &amp;amp;&amp;amp; editorTextFocus",
    },
]
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;ちなみに，コメントを入れたい場合は&lt;code&gt;//&lt;/code&gt;をつければコメントになります．&lt;/p&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;h3 id="_3"&gt;参考&lt;/h3&gt;
&lt;p&gt;定番？の&lt;kbd&gt;&lt;kbd&gt;jj&lt;/kbd&gt;&lt;/kbd&gt;を設定したい場合は以下の内容を&lt;code&gt;keybindings.json&lt;/code&gt;に追記すればOKです．&lt;/p&gt;
&lt;pre style="margin-bottom: 90px;"&gt;
&lt;code class="language-bash"&gt;
{
    "command": "vscode-neovim.compositeEscape1",
    "key": "j",
    "when": "neovim.mode == insert &amp;&amp; editorTextFocus",
    "args": "j"
}
&lt;/code&gt;
&lt;/pre&gt;

&lt;h2 id="_4"&gt;ひとこと&lt;/h2&gt;
&lt;p&gt;インサートモードからノーマルモードへ戻る際のキーバインディングは&lt;kbd&gt;&lt;kbd&gt;jj&lt;/kbd&gt;&lt;/kbd&gt;が多いようですが，個人的には&lt;kbd&gt;&lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;K&lt;/kbd&gt;&lt;/kbd&gt;が楽でいい感じです．&lt;/p&gt;
&lt;p&gt;また&lt;kbd&gt;&lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;K&lt;/kbd&gt;&lt;/kbd&gt;にしておくとインサート &amp;gt; ノーマルの際に文字入力を自動で英字に切り替える設定もスムーズなのでおすすめです．&lt;/p&gt;
&lt;p&gt;英字への切り替え設定は以下の記事で解説しているので興味のある方はぜひご覧ください．&lt;/p&gt;
&lt;div class="admonition explanation"&gt;
&lt;p class="admonition-title"&gt;関連記事&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.tecrab.com/articles/vscode-nvim-jpen-chj.html" rel="noopener noreferrer" target="_blank"&gt;【Neovim】インサートモードから離れる際に自動で英字に切り替える方法&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div style="margin-bottom: 100px;"&gt;&lt;/div&gt;

&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;&lt;kbd&gt;&lt;kbd&gt;Command&lt;/kbd&gt;+&lt;kbd&gt;K&lt;/kbd&gt;&lt;/kbd&gt; &lt;kbd&gt;&lt;kbd&gt;Command&lt;/kbd&gt;+&lt;kbd&gt;S&lt;/kbd&gt;&lt;/kbd&gt;でもOKです．&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;「キーボードショートカット」タブを選択した状態でないとマークは出ないのでご注意ください．&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:3"&gt;
&lt;p&gt;&lt;code&gt;"ctrl+k"&lt;/code&gt;部分を変更すれば任意のキーバインディングを設定することができます．&amp;#160;&lt;a class="footnote-backref" href="#fnref:3" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="VSCode"></category><category term="Vim"></category><category term="環境構築"></category></entry><entry><title>【Mac】CopyClip2 クリップボード管理アプリのおすすめ設定</title><link href="https://www.tecrab.com/articles/copyclip-2-paste-directly.html" rel="alternate"></link><published>2022-08-01T00:00:00+09:00</published><updated>2022-08-02T00:00:00+09:00</updated><author><name>かに</name></author><id>tag:www.tecrab.com,2022-08-01:/articles/copyclip-2-paste-directly.html</id><summary type="html">&lt;p&gt;CopyClip2のおすすめ設定を解説しています．&lt;/p&gt;</summary><content type="html">&lt;div class="admonition abstract"&gt;
&lt;p&gt;有料クリップボード管理アプリ CopyClip 2 のおすすめ設定をご紹介します．&lt;br&gt;
クリップボード履歴をポップアップで呼び出し，素早くペーストすることができます．&lt;/p&gt;
&lt;/div&gt;
&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;目次&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#copyclip-2"&gt;CopyClip 2 に関して&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_1"&gt;設定画面&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;おすすめの設定&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#general-toggle-menu-with-hotkey"&gt;General &amp;gt; Toggle menu with hotkey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#advanced-paste-directly"&gt;Advanced &amp;gt; Paste Directly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;ペースト機能の使い方&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_4"&gt;もっと早くペーストしたい場合&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_5"&gt;ひとこと&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="copyclip-2"&gt;CopyClip 2 に関して&lt;/h2&gt;
&lt;p&gt;Macでクリップボード履歴を残してコピペを効率化するアプリです．&lt;br&gt;
他にも色々なアプリがありますが，CopyClip 2 がシンプルでよいと思います．&lt;/p&gt;
&lt;p&gt;ダウンロードはApp Storeからできますが，有料アプリなのでご注意ください．&lt;br&gt;
2022年8月現在で980円です．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://apps.apple.com/jp/app/copyclip-2-clipboard-manager/id1020812363?mt=12" rel="noopener noreferrer" target="_blank"&gt;CopyClip 2 - Clipboard Manager&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_1"&gt;設定画面&lt;/h2&gt;
&lt;p&gt;インストールすると自動的にアプリに追加されるので起動しましょう．&lt;/p&gt;
&lt;div style="margin-bottom: 50px;"&gt;&lt;/div&gt;

&lt;h5 id="1"&gt;① 画面上部のメニューバーにあるアイコンをクリック&lt;/h5&gt;
&lt;p&gt;&lt;img alt="01" src="/images/copyclip-2-paste-directly/copyclip-2-paste-directly_01.png"&gt;&lt;/p&gt;
&lt;h5 id="2-preferences"&gt;② ウィンドウ内にある歯車→Preferences の順にクリック&lt;/h5&gt;
&lt;p&gt;&lt;img alt="02" src="/images/copyclip-2-paste-directly/copyclip-2-paste-directly_02.png"&gt;&lt;/p&gt;
&lt;p&gt;以下のような設定画面が出てくるので，ここで設定を変更していきます．
&lt;img alt="03" src="/images/copyclip-2-paste-directly/copyclip-2-paste-directly_03.png"&gt;&lt;/p&gt;
&lt;h2 id="_2"&gt;おすすめの設定&lt;/h2&gt;
&lt;p&gt;クリップボード履歴をポップアップで呼び出し，素早くペーストする設定をしていきます．&lt;/p&gt;
&lt;div style="margin-bottom: 50px;"&gt;&lt;/div&gt;

&lt;h3 id="general-toggle-menu-with-hotkey"&gt;General &amp;gt; Toggle menu with hotkey&lt;/h3&gt;
&lt;p&gt;クリップボード履歴の呼び出しショートカットキーを指定する設定です．&lt;br&gt;
画像赤枠の部分をクリックするとショートカットキーの記録が始まるので，任意のキーを打ち込んで登録します．&lt;br&gt;
ちなみに管理人は&lt;kbd&gt;&lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;return&lt;/kbd&gt;&lt;/kbd&gt;を割り当てています．&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="04" src="/images/copyclip-2-paste-directly/copyclip-2-paste-directly_04.png"&gt;&lt;/p&gt;
&lt;h3 id="advanced-paste-directly"&gt;Advanced &amp;gt; Paste Directly&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Toggle menu with hotkey&lt;/code&gt;をより強力&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;にするために設定します．&lt;br&gt;
&lt;code&gt;Paste Directly&lt;/code&gt;にチェックを入れましょう．&lt;/p&gt;
&lt;p&gt;&lt;img alt="05" src="/images/copyclip-2-paste-directly/copyclip-2-paste-directly_05.png"&gt;&lt;/p&gt;
&lt;div class="admonition warning-box"&gt;
&lt;p class="admonition-title"&gt;ポイント&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Paste Directly&lt;/code&gt;にチェックを入れるとサイトに誘導するポップアップが出てきます．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ポップアップに従ってサイトを開いた場合は手順②に進んでください．&lt;/li&gt;
&lt;li&gt;ポップアップを閉じた場合は手順①に進んでください．&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h5 id="1-helper"&gt;① Helperツールのダウンロードサイトに移動&lt;/h5&gt;
&lt;p&gt;以下からHelperツール&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2"&gt;2&lt;/a&gt;&lt;/sup&gt;のダウンロードサイトに移動しましょう．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://fiplab.com/apps/copyclip-helper" rel="noopener noreferrer" target="_blank"&gt;CopyClip 2 Helper&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div style="margin-bottom: 50px;"&gt;&lt;/div&gt;

&lt;h5 id="2-helper"&gt;② Helperツールのダウンロード&lt;/h5&gt;
&lt;p&gt;サイトにある緑のダウンロードボタンからダウンロード．
&lt;img alt="06" src="/images/copyclip-2-paste-directly/copyclip-2-paste-directly_06.png"&gt;&lt;/p&gt;
&lt;h5 id="3-helper"&gt;③ Helperのインストール&lt;/h5&gt;
&lt;p&gt;ダウンロードしたファイルを展開して&lt;code&gt;CopyClip 2 Helper.app&lt;/code&gt;を実行します．&lt;br&gt;
実行して出てくるポップアップの&lt;code&gt;install&lt;/code&gt;ボタンをクリックでインストール完了です．&lt;/p&gt;
&lt;div class="admonition info-box"&gt;
&lt;p class="admonition-title"&gt;参考&lt;/p&gt;
&lt;p&gt;ダウンロードしたHelperツール等は捨ててもOKです．&lt;/p&gt;
&lt;/div&gt;
&lt;h5 id="4-helper"&gt;④ Helperに権限付与&lt;/h5&gt;
&lt;p&gt;Macの「システム環境設定 &amp;gt; セキュリティとプライバシー &amp;gt; プライバシー &amp;gt; アクセシビリティ」を開いて&lt;code&gt;CopyClip 2.app&lt;/code&gt;にチェックをつけましょう．&lt;br&gt;
これで設定完了です．
&lt;img alt="07" src="/images/copyclip-2-paste-directly/copyclip-2-paste-directly_07.png"&gt;&lt;/p&gt;
&lt;h3 id="_3"&gt;ペースト機能の使い方&lt;/h3&gt;
&lt;p&gt;上記で設定したペースト機能は以下の流れで使います．&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;ペーストしたい場所で設定したショートカットキー押下&lt;/li&gt;
&lt;li&gt;履歴のポップアップが出てくる&lt;/li&gt;
&lt;li&gt;ポップアップから貼り付けたい内容を選択して貼り付け&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;こんな感じです．&lt;br&gt;
&lt;img src="/images/copyclip-2-paste-directly/copyclip-2-paste-directly_01.gif" width="400" height="300" alt="GIFアニメーション" style="margin-bottom: 10px;"&gt;&lt;/p&gt;
&lt;div class="admonition warning-box"&gt;
&lt;p class="admonition-title"&gt;ポイント&lt;/p&gt;
&lt;p&gt;初回実行時に何らかの警告が出る場合がありますが，許可を付与すればOKです．&lt;/p&gt;
&lt;/div&gt;
&lt;h3 id="_4"&gt;もっと早くペーストしたい場合&lt;/h3&gt;
&lt;p&gt;マウスを使わずにペーストすることも可能です．&lt;br&gt;
こちらの方が圧倒的に早いのでおすすめです．&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;ペーストしたい場所で設定したショートカットキー押下&lt;/li&gt;
&lt;li&gt;履歴のポップアップが出てくる&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;&lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;N&lt;/kbd&gt;&lt;/kbd&gt;で下に移動&lt;kbd&gt;&lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;P&lt;/kbd&gt;&lt;/kbd&gt;で上に移動して&lt;kbd&gt;&lt;kbd&gt;return&lt;/kbd&gt;&lt;/kbd&gt;で貼り付け&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;こんな感じです．&lt;br&gt;
&lt;img src="/images/copyclip-2-paste-directly/copyclip-2-paste-directly_02.gif" width="400" height="300" alt="GIFアニメーション"&gt;&lt;/p&gt;
&lt;h2 id="_5"&gt;ひとこと&lt;/h2&gt;
&lt;p&gt;サクッとペーストできる設定について解説しました．&lt;br&gt;
すごく便利ですね・・・　もっと早く導入すればよかった．&lt;/p&gt;
&lt;p&gt;他にも履歴のピン留め機能や履歴数の保存設定，履歴有無の設定など色々とできるようです．&lt;/p&gt;
&lt;div style="margin-bottom: 100px;"&gt;&lt;/div&gt;

&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;&lt;code&gt;Paste Directly&lt;/code&gt;を設定するとクリップボードの履歴を選択するだけで自動的にペーストされるようになります．もし設定しないとクリップボード履歴の選択し，その後で&lt;kbd&gt;&lt;kbd&gt;Command&lt;/kbd&gt;+&lt;kbd&gt;V&lt;/kbd&gt;&lt;/kbd&gt;で貼り付けをする必要があるため効率が落ちてしまいます．&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;Helperツールは&lt;code&gt;Paste Directly&lt;/code&gt;の機能を使用するために必要です．&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Mac"></category><category term="App"></category></entry><entry><title>【M2 Mac】Pyenv/PoetryによるPython環境構築</title><link href="https://www.tecrab.com/articles/python-pyenv-poetry.html" rel="alternate"></link><published>2022-07-31T00:00:00+09:00</published><updated>2022-07-31T00:00:00+09:00</updated><author><name>kani</name></author><id>tag:www.tecrab.com,2022-07-31:/articles/python-pyenv-poetry.html</id><summary type="html">&lt;p&gt;M2 MacにPoetryでPythonの環境構築する手順です．&lt;/p&gt;</summary><content type="html">&lt;div class="admonition abstract"&gt;
&lt;p&gt;新しく購入したまっさらなM2 MacにPython環境を構築した際の手順です．&lt;br&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;PyenvとPoetryのインストール&lt;/li&gt;
&lt;li&gt;PoetryでのPython環境構築&lt;/li&gt;
&lt;li&gt;VSCode連携&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;仮想環境を使ってシンプルに環境を作ることができます．&lt;/p&gt;
&lt;/div&gt;
&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;目次&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#pyenv"&gt;Pyenvのインストール&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;前提条件&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#poetry"&gt;Poetryのインストール&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;仮想環境の作成&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#python"&gt;仮想環境内におけるPythonの使い方&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#python_1"&gt;一時的に仮想環境を使ってPythonを動かす&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;持続的に仮想環境を動かす&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#vscode"&gt;VSCodeとの連携&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#jupyter"&gt;Jupyterを使用する場合&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_5"&gt;ひとこと&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="pyenv"&gt;Pyenvのインストール&lt;/h2&gt;
&lt;p&gt;まずはPyenvのインストールを行います．&lt;/p&gt;
&lt;h4 id="_1"&gt;前提条件&lt;/h4&gt;
&lt;p&gt;Macのパッケージマネジャーである&lt;code&gt;Homebrew&lt;/code&gt;を使うため，インストールしていない場合は先に&lt;code&gt;Homebrew&lt;/code&gt;をインストールしましょう．&lt;/p&gt;
&lt;p&gt;以下のサイトが大変わかりやすいです．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://original-game.com/how-to-install-homebrew/" rel="noopener noreferrer" target="_blank"&gt;Homebrewのインストール方法を分かりやすく解説（M1 Macも対応）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h5 id="1-pyenv"&gt;① Pyenvのインストール&lt;/h5&gt;
&lt;p&gt;以下のコマンドをターミナルに入力してPyenvをインストールします．&lt;/p&gt;
&lt;pre class="command-line" data-prompt="%" style="margin-bottom: 90px;"&gt;
&lt;code class="language-bash"&gt;
brew install pyenv
&lt;/code&gt;
&lt;/pre&gt;

&lt;h5 id="2-path"&gt;② pathの設定&lt;/h5&gt;
&lt;p&gt;Pyenvにpathを通すため，以下のコマンドを実行します．&lt;br&gt;
なお，最近のMacであればシェルが&lt;code&gt;zsh&lt;/code&gt;なので&lt;code&gt;zsh&lt;/code&gt;用のコマンドを記載しています.&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;pre class="command-line" data-prompt="%" style="margin-bottom: 50px;"&gt;
&lt;code class="language-bash"&gt;
echo 'export PYENV_ROOT="$HOME/.pyenv"' &gt;&gt; ~/.zshrc
echo 'command -v pyenv &gt;/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"' &gt;&gt; ~/.zshrc
echo 'eval "$(pyenv init -)"' &gt;&gt; ~/.zshrc
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;上記で設定した内容を反映させるために以下のコマンドを実行します．&lt;/p&gt;
&lt;pre class="command-line" data-prompt="%" style="margin-bottom: 50px;"&gt;
&lt;code class="language-bash"&gt;
source ~/.zshrc
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;Pyenvのインストールを確認します．&lt;br&gt;
以下のようにPyenvのバージョンが表示されればOKです．&lt;/p&gt;
&lt;pre class="command-line" data-prompt="%"&gt;
&lt;code class="language-bash"&gt;
pyenv --version
&lt;/code&gt;
&lt;/pre&gt;
&lt;pre style="margin-bottom: 90px;"&gt;
pyenv 2.3.2
&lt;/pre&gt;

&lt;h5 id="3-python"&gt;③ Pythonを任意のバージョンでインストール&lt;/h5&gt;
&lt;p&gt;続いてPyenvを使用してPythonをインストールしていきます．&lt;br&gt;
今回は例としてPythonのバージョン&lt;code&gt;3.10.5&lt;/code&gt;をインストールします．&lt;br&gt;
インストールするコマンドは以下のとおりです．&lt;/p&gt;
&lt;pre class="command-line" data-prompt="%" style="margin-bottom: 50px;"&gt;
&lt;code class="language-bash"&gt;
pyenv install 3.10.5
&lt;/code&gt;
&lt;/pre&gt;

&lt;div class="admonition info-box"&gt;
&lt;p class="admonition-title"&gt;参考&lt;/p&gt;
&lt;p&gt;インストール可能なPythonのバージョンは以下のコマンドで確認できます．
&lt;pre class="command-line" data-prompt="%"&gt;&lt;code class="language-bash"&gt;
pyenv install -l
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;h5 id="4-python"&gt;④ 使用するPythonの指定&lt;/h5&gt;
&lt;p&gt;先ほどインストールしたPythonのバージョンをグローバルで使用するために以下のコマンドを実行します．&lt;/p&gt;
&lt;pre class="command-line" data-prompt="%" style="margin-bottom: 50px;"&gt;
&lt;code class="language-bash"&gt;
pyenv global 3.10.5
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;Pythonのpathを以下のコマンドで確認します．&lt;br&gt;
pathが&lt;code&gt;.pyenv&lt;/code&gt;以下のPythonになっていればOKです．&lt;/p&gt;
&lt;pre class="command-line" data-prompt="%"&gt;
&lt;code class="language-bash"&gt;
which python
&lt;/code&gt;
&lt;/pre&gt;
&lt;pre style="margin-bottom: 90px;"&gt;
/Users/xxx/.pyenv/shims/python
&lt;/pre&gt;

&lt;h2 id="poetry"&gt;Poetryのインストール&lt;/h2&gt;
&lt;p&gt;ここからは&lt;a href="https://python-poetry.org/" rel="noopener noreferrer" target="_blank"&gt;Poetry&lt;/a&gt;をインストールしていきましょう．
&lt;br&gt;&lt;/p&gt;
&lt;h5 id="1-poetry"&gt;① Poetryのインストール&lt;/h5&gt;
&lt;p&gt;Poetryを以下コマンドでインストール．&lt;/p&gt;
&lt;pre class="command-line" data-prompt="%" style="margin-bottom: 50px;"&gt;
&lt;code class="language-bash"&gt;
curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python -
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;Poetryのインストールを確認します．&lt;br&gt;
Poetryのバージョンが表示されればOKです．&lt;/p&gt;
&lt;pre class="command-line" data-prompt="%"&gt;
&lt;code class="language-bash"&gt;
poetry --version
&lt;/code&gt;
&lt;/pre&gt;
&lt;pre style="margin-bottom: 90px;"&gt;
Poetry version 1.1.14
&lt;/pre&gt;

&lt;h2 id="_2"&gt;仮想環境の作成&lt;/h2&gt;
&lt;p&gt;本記事ではMac全体で動かす&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2"&gt;2&lt;/a&gt;&lt;/sup&gt;ための仮想環境を作成していきます．&lt;/p&gt;
&lt;div class="admonition info-box"&gt;
&lt;p class="admonition-title"&gt;参考&lt;/p&gt;
&lt;p&gt;Poetryでは仮想環境のことをプロジェクトと呼んでいますが，本記事では仮想環境で統一しています．&lt;/p&gt;
&lt;/div&gt;
&lt;h5 id="1"&gt;① 仮想環境を作成する場所を決める&lt;/h5&gt;
&lt;p&gt;場所に決まりはないので，管理しやすい場所に作成します．&lt;br&gt;
本記事ではホームディレクトリに仮想環境用のディレクトリを作成します．
以下のコマンドでホームディレクトリに&lt;code&gt;global_env&lt;/code&gt;というディレクトリを作成し，そのディレクトリに移動できます.&lt;sup id="fnref:3"&gt;&lt;a class="footnote-ref" href="#fn:3"&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;pre class="command-line" data-prompt="%" style="margin-bottom: 30px;"&gt;
&lt;code class="language-bash"&gt;
cd &amp;&amp; mkdir global_env &amp;&amp; cd global_env
&lt;/code&gt;
&lt;/pre&gt;

&lt;details class="accordion-block"&gt;
&lt;summary&gt;コマンドの内容が知りたい方はこちらをクリック&lt;/summary&gt;
&lt;div class="accordion-summary"&gt;
&lt;p&gt;上記のコマンドは以下の一連の操作を行なっています．
 &lt;/p&gt;
&lt;ol style="margin-top: 20px;"&gt;
     &lt;li&gt;&lt;code&gt;cd&lt;/code&gt;コマンドでホームディレクトリに移動&lt;/li&gt;
     &lt;li&gt;&lt;code&gt;mkdir global_env&lt;/code&gt;で「global_env」という名前のディレクトリ作成&lt;/li&gt;
     &lt;li&gt;&lt;code&gt;cd global_env&lt;/code&gt;でglobal_envディレクトリ内に移動&lt;/li&gt;
 &lt;/ol&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;p&gt;上記で作成したディレクトリの下に仮想環境の実体となるディレクトリ&lt;sup id="fnref:4"&gt;&lt;a class="footnote-ref" href="#fn:4"&gt;4&lt;/a&gt;&lt;/sup&gt;を配置するため，以下のコマンドで設定を変更します．&lt;/p&gt;
&lt;pre class="command-line" data-prompt="%" style="margin-bottom: 50px;"&gt;
&lt;code class="language-bash"&gt;
poetry config virtualenvs.in-project true 
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;設定の反映を確認します．&lt;br&gt;
出力結果の下から２番目&lt;code&gt;virtualenvs.in-project&lt;/code&gt;が&lt;code&gt;true&lt;/code&gt;になっていればOKです．&lt;/p&gt;
&lt;pre class="command-line" data-prompt="%"&gt;
&lt;code class="language-bash"&gt;
poetry config --list
&lt;/code&gt;
&lt;/pre&gt;
&lt;pre style="margin-bottom: 40px;"&gt;
cache-dir = "/Users/xxx/Library/Caches/pypoetry"
experimental.new-installer = true
installer.parallel = true
virtualenvs.create = true
&lt;span style="color:red"&gt;virtualenvs.in-project = true&lt;/span&gt;
virtualenvs.path = "{cache-dir}/virtualenvs"  # /Users/xxx/Library/Caches/pypoetry/virtualenvs
&lt;/pre&gt;

&lt;div class="admonition info-box"&gt;
&lt;p class="admonition-title"&gt;参考&lt;/p&gt;
&lt;p&gt;この設定は一度すればOKです．&lt;/p&gt;
&lt;/div&gt;
&lt;h5 id="2"&gt;② 仮想環境の作成&lt;/h5&gt;
&lt;p&gt;Poetryを使って仮想環境を作成していきましょう．&lt;br&gt;
まずは以下のコマンドで&lt;code&gt;global_env_pj&lt;/code&gt;という名前の仮想環境を作る準備を行います．&lt;/p&gt;
&lt;pre class="command-line" data-prompt="%"&gt;
&lt;code class="language-bash"&gt;
poetry new global_env_pj
&lt;/code&gt;
&lt;/pre&gt;
&lt;pre style="margin-bottom: 50px;"&gt;
Created package global_env_pj in global_env_pj
&lt;/pre&gt;

&lt;p&gt;上記のコマンドで&lt;code&gt;global_env_pj&lt;/code&gt;というディレクトリが作成され，その配下にファイルなどが作成されます．&lt;/p&gt;
&lt;pre style="margin-bottom: 50px;"&gt;
.
└── global_env_pj
    ├── README.rst
    ├── global_env_pj
    ├── pyproject.toml
    └── tests
&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;cd&lt;/code&gt;コマンドで新しく作成された&lt;code&gt;global_env_pj&lt;/code&gt;ディレクトリに移動しておきます．&lt;br&gt;&lt;/p&gt;
&lt;pre class="command-line" data-prompt="%" style="margin-bottom: 50px;"&gt;
&lt;code class="language-bash"&gt;
cd global_env_pj
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;続いて，以下のコマンドを実行して仮想環境を使用できるようにします．&lt;/p&gt;
&lt;pre class="command-line" data-prompt="%" style="margin-bottom: 50px;"&gt;
&lt;code class="language-bash"&gt;
poetry install
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;上記のコマンドで&lt;code&gt;.venv&lt;/code&gt;と&lt;code&gt;poetry.lock&lt;/code&gt;が追加で作成されます．&lt;br&gt;
これで仮想環境を構築することができました．&lt;/p&gt;
&lt;pre style="margin-bottom: 90px;"&gt;
.
└── global_env_pj
    ├── .venv
    ├── README.rst
    ├── global_env_pj
    ├── poetry.lock
    ├── pyproject.toml
    └── tests
&lt;/pre&gt;

&lt;h5 id="3"&gt;③ 仮想環境内へのライブラリインストール&lt;/h5&gt;
&lt;p&gt;上記の手順で仮想環境を構築した後は仮想環境内に必要なPythonのライブラリをインストールしていきます．&lt;br&gt;
&lt;code&gt;poetry.lock&lt;/code&gt;や&lt;code&gt;pyproject.toml&lt;/code&gt;がある階層&lt;sup id="fnref:5"&gt;&lt;a class="footnote-ref" href="#fn:5"&gt;5&lt;/a&gt;&lt;/sup&gt;で以下のようなコマンドを実行します．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;poetry add [ライブラリの名称]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Pythonのライブラリであるpandasをインストールする場合は以下のコマンドです．
実行すると関連するライブラリなども合わせてインストールされます．&lt;/p&gt;
&lt;pre class="command-line" data-prompt="%" style="margin-bottom: 50px;"&gt;
&lt;code class="language-bash"&gt;
poetry add pandas
&lt;/code&gt;
&lt;/pre&gt;

&lt;div class="admonition info-box"&gt;
&lt;p class="admonition-title"&gt;参考&lt;/p&gt;
&lt;p&gt;インストールされたライブラリを確認したい場合は以下のコマンドです．
&lt;pre class="command-line" data-prompt="%"&gt;
&lt;code class="language-bash"&gt;
poetry show
&lt;/code&gt;
&lt;/pre&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id="python"&gt;仮想環境内におけるPythonの使い方&lt;/h2&gt;
&lt;p&gt;仮想環境内で構築したPythonを使うには，一時的か持続的かの２パターンがあります．&lt;br&gt;
それぞれ確認していきましょう．&lt;/p&gt;
&lt;h3 id="python_1"&gt;一時的に仮想環境を使ってPythonを動かす&lt;/h3&gt;
&lt;p&gt;一時的に仮想環境内のPythonを使ってPythonスクリプトを動かす際などに使用します．&lt;br&gt;
&lt;code&gt;poetry.lock&lt;/code&gt;や&lt;code&gt;pyproject.toml&lt;/code&gt;がある階層で以下のようなコマンドを実行します．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;poetry run python [pythonスクリプトのpath]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以下はカレントディレクトリにある&lt;code&gt;hoge.py&lt;/code&gt;を仮装環境内のPythonで動かすコマンドです．&lt;/p&gt;
&lt;pre class="command-line" data-prompt="%"&gt;
&lt;code class="language-bash"&gt;
poetry run python hoge.py
&lt;/code&gt;
&lt;/pre&gt;
&lt;pre style="margin-bottom: 50px;"&gt;
      単価   数量     総額
いか   100  300  30000
えび   300   50  15000
かに  1000   20  20000
&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;hoge.py&lt;/code&gt;の中身は以下のとおりです．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;
import pandas as pd

df = pd.DataFrame([[100, 300, 30000], [300, 50, 15000], [1000, 20, 20000]],
                  index = ['いか', 'えび', 'かに'], 
                  columns = ['単価', '数量', '総額'])
print(df)
&lt;/code&gt;&lt;/pre&gt;

&lt;div class="admonition danger-box"&gt;
&lt;p class="admonition-title"&gt;注意&lt;/p&gt;
&lt;p&gt;上記のコマンドを動かすには&lt;code&gt;poetry run python&lt;/code&gt;を実行する仮想環境にpandasがインストールされていることが必要です．&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;仮想環境内のPythonを使ってスクリプトを動かしたい場合は毎回&lt;code&gt;poetry run python&lt;/code&gt;コマンドを使う必要があります．&lt;br&gt;
仮想環境を持続的に動かしてPythonを実行したい場合は次項を参照してください．&lt;/p&gt;
&lt;h3 id="_3"&gt;持続的に仮想環境を動かす&lt;/h3&gt;
&lt;h5 id="on"&gt;仮想環境の持続化ON&lt;/h5&gt;
&lt;p&gt;仮想環境を持続的に使う&lt;sup id="fnref:6"&gt;&lt;a class="footnote-ref" href="#fn:6"&gt;6&lt;/a&gt;&lt;/sup&gt;には&lt;code&gt;poetry.lock&lt;/code&gt;や&lt;code&gt;pyproject.toml&lt;/code&gt;がある階層で以下のようなコマンドを実行します．&lt;/p&gt;
&lt;pre class="command-line" data-prompt="%" style="margin-bottom: 50px;"&gt;
&lt;code class="language-bash"&gt;
poetry shell
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;上記のコマンドを実行すると，プロンプトの行頭に&lt;code&gt;(.venv)&lt;/code&gt;という文字が追加されます．&lt;br&gt;
この状態は仮想環境を稼働させた状態であるため，常に仮想環境を使ってスクリプト等を実行できます．&lt;br&gt;
そのため，先ほどは&lt;code&gt;poetry run python&lt;/code&gt;で仮想環境内のPythonを実行をしましたが，&lt;code&gt;(.venv)&lt;/code&gt;となっていれば以下のコマンドで仮想環境内でのPython実行が可能です．&lt;/p&gt;
&lt;pre class="command-line" data-prompt="(.venv) %" style="margin-bottom: 50px;"&gt;
&lt;code class="language-bash"&gt;
python hoge.py
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;なお，ディレクトリを移動してもこの状態は持続し，Python以外のコマンドも通常どおり使うことができます．
&lt;br&gt;&lt;/p&gt;
&lt;h5 id="off"&gt;仮想環境の持続化OFF&lt;/h5&gt;
&lt;p&gt;仮想環境の持続化を終了する場合は以下のコマンドです．&lt;br&gt;
コマンドを実行すると行頭についていた&lt;code&gt;(.venv)&lt;/code&gt;がなくなります．&lt;/p&gt;
&lt;pre class="command-line" data-prompt="(.venv) %" style="margin-bottom: 50px;"&gt;
&lt;code class="language-bash"&gt;
exit
&lt;/code&gt;
&lt;/pre&gt;

&lt;div class="admonition info-box"&gt;
&lt;p class="admonition-title"&gt;再度仮想環境を持続化させるには&lt;/p&gt;
&lt;p&gt;使いたい仮想環境のディレクトリ（&lt;code&gt;poetry.lock&lt;/code&gt;や&lt;code&gt;pyproject.toml&lt;/code&gt;がある階層）に戻って&lt;code&gt;poetry shell&lt;/code&gt;を実行しましょう．&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id="vscode"&gt;VSCodeとの連携&lt;/h2&gt;
&lt;p&gt;仮想環境を使ってPythonを動かす設定をVSCodeに適用します．&lt;br&gt;
この設定を一度行えば，今後は仮想環境内のPythonをVSCodeで実行することができます．&lt;/p&gt;
&lt;h5 id="vscode_1"&gt;VSCodeのウィンドウの右下にあるインタープリタ枠をクリック&lt;/h5&gt;
&lt;p&gt;適当なPythonファイル&lt;sup id="fnref:7"&gt;&lt;a class="footnote-ref" href="#fn:7"&gt;7&lt;/a&gt;&lt;/sup&gt;をVSCodeで開き，VSCodeのウィンドウの右下にあるインタープリタ枠をクリックします．&lt;br&gt;
画像にある文字と実際の表記が多少異なっていてもOKです．&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="01" src="/images/mac-python-pyenv-poetry/mac-python-pyenv-poetry_01.png"&gt;&lt;/p&gt;
&lt;h5 id="pythonpath"&gt;Pythonを動かす際に使いたい環境のpathを選択&lt;/h5&gt;
&lt;p&gt;ウィンドウ上部にインタープリタを選択できるポップアップが出てくるので，使いたいPoetry環境をクリック．&lt;br&gt;
&lt;img alt="02" src="/images/mac-python-pyenv-poetry/mac-python-pyenv-poetry_02.png"&gt;&lt;/p&gt;
&lt;p&gt;選択後，ウィンドウ右下のインタープリタ枠の表示が&lt;code&gt;('.venv': poetry)&lt;/code&gt;のようになっていればOKです．&lt;br&gt;
&lt;img alt="03" src="/images/mac-python-pyenv-poetry/mac-python-pyenv-poetry_03.png"&gt;&lt;/p&gt;
&lt;h5 id="_4"&gt;動作確認&lt;/h5&gt;
&lt;p&gt;ウィンドウ右上の実行ボタンを押して確認しましょう．&lt;br&gt;
&lt;img alt="04" src="/images/mac-python-pyenv-poetry/mac-python-pyenv-poetry_04.png"&gt;&lt;/p&gt;
&lt;p&gt;自動でターミナルが起動して仮想環境内でPythonを実行してくれます．&lt;br&gt;
意図した実行結果であればOKです．&lt;/p&gt;
&lt;h3 id="jupyter"&gt;Jupyterを使用する場合&lt;/h3&gt;
&lt;p&gt;PythonをJupyterで動かしたい場合は以下の条件を満たせば可能です．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;VSCodeのJupyter拡張機能をインストール&lt;/li&gt;
&lt;li&gt;&lt;code&gt;poetry add jupyter&lt;/code&gt; で仮想環境にJupyterをインストール&lt;/li&gt;
&lt;li&gt;Jupyterがインストールされている仮想環境をVScode側で指定&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_5"&gt;ひとこと&lt;/h2&gt;
&lt;p&gt;Pythonの環境構築は色々ありますが，仮想環境を使うとクリーンかつシンプルなのでおすすめです．&lt;/p&gt;
&lt;p&gt;余談ですが，久しぶりにMacを新調しました．&lt;br&gt;
M2 Macは円安の影響もあって高値ですが，動作がすごく軽快で素晴らしいです．&lt;/p&gt;
&lt;div style="margin-bottom: 100px;"&gt;&lt;/div&gt;

&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;ターミナルで&lt;code&gt;echo $SHELL&lt;/code&gt;というコマンドを実行するとシェルが確認できます(&lt;code&gt;/bin/zsh&lt;/code&gt;が表示されたら&lt;code&gt;zsh&lt;/code&gt;です).&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;本来は開発/プロジェクト単位で仮想環境を作ったりしますが，今回は私用のMacで動作するようなPython環境を作ります．&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:3"&gt;
&lt;p&gt;ディレクトリの名前を変更するには&lt;code&gt;mkdir global_env&lt;/code&gt;と&lt;code&gt;cd global_env&lt;/code&gt;の「global_env」部分を好きな名称に変更してください．なお&lt;code&gt;mkdir&lt;/code&gt;や&lt;code&gt;cd&lt;/code&gt;の後には半角スペースがあるので，誤って消さないようにご注意ください．&amp;#160;&lt;a class="footnote-backref" href="#fnref:3" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:4"&gt;
&lt;p&gt;仮想環境の実体は&lt;code&gt;.venv&lt;/code&gt;というディレクトリです．デフォルトでは&lt;code&gt;~/Library/Caches/pypoetry/virtualenvs/&lt;/code&gt;に作成されますが，仮想環境のディレクトリ直下にある方が管理しやすいので設定を変更しています．&amp;#160;&lt;a class="footnote-backref" href="#fnref:4" title="Jump back to footnote 4 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:5"&gt;
&lt;p&gt;本ブログの手順に合わせて仮想環境を作成している場合，&lt;code&gt;pwd&lt;/code&gt;コマンドを実行して表示される階層が&lt;code&gt;/Users/xxx/global_env/global_env_pj&lt;/code&gt;となっている場所です．&amp;#160;&lt;a class="footnote-backref" href="#fnref:5" title="Jump back to footnote 5 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:6"&gt;
&lt;p&gt;持続的に使うとは，明示的に止めるまで仮想環境下のPythonを利用することを指しています．&amp;#160;&lt;a class="footnote-backref" href="#fnref:6" title="Jump back to footnote 6 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:7"&gt;
&lt;p&gt;拡張子が&lt;code&gt;.py&lt;/code&gt;のファイルです．なお，可能であればPoetryでインストールしたライブラリを使うようなコードを書いておきましょう（この後の動作確認でエラーなく動くことが確認できればPoetryを使ってPythonを動かしていることがわかるためです）&amp;#160;&lt;a class="footnote-backref" href="#fnref:7" title="Jump back to footnote 7 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Python"></category><category term="Python"></category><category term="環境構築"></category></entry><entry><title>【Mac/Linux】zsh dateコマンドで日付操作・フォーマットをする方法</title><link href="https://www.tecrab.com/articles/zsh-date.html" rel="alternate"></link><published>2022-07-18T00:00:00+09:00</published><updated>2022-08-07T00:00:00+09:00</updated><author><name>かに</name></author><id>tag:www.tecrab.com,2022-07-18:/articles/zsh-date.html</id><summary type="html">&lt;p&gt;zshにおけるdateコマンドの使い方です．&lt;/p&gt;</summary><content type="html">&lt;div class="admonition abstract"&gt;
&lt;p&gt;zshにおける&lt;code&gt;date&lt;/code&gt;コマンドについて，簡単にまとめています．&lt;/p&gt;
&lt;/div&gt;
&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;目次&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;日付の取得&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_2"&gt;現在時刻&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;出力されるフォーマットを変更&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_4"&gt;月・日・曜日・時刻の取得&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_10"&gt;任意の日時を指定してフォーマット&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_11"&gt;過去の日時を指定&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_12"&gt;指定できる期間の種類&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#xxx"&gt;X日・Xヶ月・X年前&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#xx"&gt;X年X日前の指定&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_13"&gt;未来の日時を指定&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_14"&gt;未来の任意の日時を指定&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_15"&gt;ひとこと&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="_1"&gt;日付の取得&lt;/h2&gt;
&lt;h3 id="_2"&gt;現在時刻&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;date&lt;/code&gt;コマンドをそのまま使うと現在時刻が出力されます．&lt;/p&gt;
&lt;pre class="command-line" data-prompt="%"&gt;
&lt;code class="language-bash"&gt;
date
&lt;/code&gt;
&lt;/pre&gt;
&lt;pre style="margin-bottom: 90px;"&gt;
2022年 7月19日 火曜日 19時25分11秒 JST
&lt;/pre&gt;

&lt;h3 id="_3"&gt;出力されるフォーマットを変更&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;date&lt;/code&gt;コマンドに以下のようなオプションをつけると出力フォーマットを変更できます．&lt;/p&gt;
&lt;pre class="command-line" data-prompt="%"&gt;
&lt;code class="language-bash"&gt;
date +%Y-%m-%d
&lt;/code&gt;
&lt;/pre&gt;
&lt;pre style="margin-bottom: 40px;"&gt;
2022-07-19
&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;+&lt;/code&gt;以降の部分を変更すれば様々なフォーマットで出力することができます．&lt;br&gt;
最後のコマンドは秒単位まで表示しています．&lt;/p&gt;
&lt;pre class="command-line" data-prompt="%"&gt;
&lt;code class="language-bash"&gt;
date +%Y/%m/%d
date +%y%m%d
date +%Y%m%d%H%M%S
&lt;/code&gt;
&lt;/pre&gt;
&lt;pre style="margin-bottom: 90px;"&gt;
2022/07/19
220719
20220719193756
&lt;/pre&gt;

&lt;h3 id="_4"&gt;月・日・曜日・時刻の取得&lt;/h3&gt;
&lt;h5 id="_5"&gt;月だけを取得&lt;/h5&gt;
&lt;p&gt;月だけを取得するには以下のようなコマンドです．&lt;/p&gt;
&lt;pre class="command-line" data-prompt="%"&gt;
&lt;code class="language-bash"&gt;
date +%b
date +%B
&lt;/code&gt;
&lt;/pre&gt;
&lt;pre style="margin-bottom: 90px;"&gt;
7
7月
&lt;/pre&gt;

&lt;h5 id="_6"&gt;日付だけを取得&lt;/h5&gt;
&lt;p&gt;日付だけを取得するには以下のようなコマンドです．&lt;br&gt;
なお，&lt;code&gt;+%d&lt;/code&gt;を&lt;code&gt;+%-d&lt;/code&gt;に変更すると，日付が一桁の場合に前に&lt;code&gt;0&lt;/code&gt;がつかなくなります.&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;pre class="command-line" data-prompt="%"&gt;
&lt;code class="language-bash"&gt;
date +%d
date +%d日
&lt;/code&gt;
&lt;/pre&gt;
&lt;pre style="margin-bottom: 50px;"&gt;
21
21日
&lt;/pre&gt;

&lt;div class="admonition info-box"&gt;
&lt;p class="admonition-title"&gt;参考&lt;/p&gt;
&lt;p&gt;&lt;code&gt;21日&lt;/code&gt;のように出力するには&lt;code&gt;+%d&lt;/code&gt;に「日」をくっつける方法しかなさそうです．&lt;br&gt;
もしコマンドで指定できる方法をご存知の方がいればお知らせください...&lt;/p&gt;
&lt;/div&gt;
&lt;h5 id="_7"&gt;曜日だけを取得&lt;/h5&gt;
&lt;p&gt;曜日名だけを取得するには以下のようなコマンドです．&lt;/p&gt;
&lt;pre class="command-line" data-prompt="%"&gt;
&lt;code class="language-bash"&gt;
date +%a
date +%A
&lt;/code&gt;
&lt;/pre&gt;
&lt;pre style="margin-bottom: 90px;"&gt;
水
水曜日
&lt;/pre&gt;
&lt;h5 id="_8"&gt;曜日を数値で取得&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;+%u&lt;/code&gt;: 曜日を１〜７で表し，１が月曜日です．&lt;/li&gt;
&lt;li&gt;&lt;code&gt;+%w&lt;/code&gt;: 曜日を０〜６で表し，０が日曜日です．&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以下の例はコマンドの実行日が水曜日なので両方３になっています．&lt;/p&gt;
&lt;pre class="command-line" data-prompt="%"&gt;
&lt;code class="language-bash"&gt;
date +%u
date +%w
&lt;/code&gt;
&lt;/pre&gt;
&lt;pre style="margin-bottom: 90px;"&gt;
3
3
&lt;/pre&gt;

&lt;h5 id="_9"&gt;時刻だけを取得&lt;/h5&gt;
&lt;p&gt;時刻だけを取得するには以下のようなコマンドです．&lt;/p&gt;
&lt;pre class="command-line" data-prompt="%"&gt;
&lt;code class="language-bash"&gt;
date +%H:%M:%S
&lt;/code&gt;
&lt;/pre&gt;
&lt;pre style="margin-bottom: 90px;"&gt;
14:42:54
&lt;/pre&gt;

&lt;h2 id="_10"&gt;任意の日時を指定してフォーマット&lt;/h2&gt;
&lt;p&gt;現在時刻ではなく任意の日時を指定するには以下のコマンドです．&lt;/p&gt;
&lt;pre class="command-line" data-prompt="%"&gt;
&lt;code class="language-bash"&gt;
date -j -f %Y-%m-%d 2022-01-01 +%Y%m%d
&lt;/code&gt;
&lt;/pre&gt;
&lt;pre style="margin-bottom: 40px;"&gt;
20220101
&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;-j&lt;/code&gt;オプションで任意の日時を受け取るようにし，&lt;code&gt;-f&lt;/code&gt;オプションで日時のフォーマットを指定しています．
&lt;code&gt;%Y-%m-%d&lt;/code&gt;は入力日時のフォーマット&lt;code&gt;2022-01-01&lt;/code&gt;は入力日時&lt;code&gt;+%Y%m%d&lt;/code&gt;は出力フォーマットです．&lt;/p&gt;
&lt;p&gt;シェルスクリプトで日時引数をフォーマット化，変数に代入する際などに使えます．&lt;/p&gt;
&lt;details class="accordion-block"&gt;
&lt;summary&gt;具体例はこちらをクリックしてください&lt;/summary&gt;
&lt;div class="accordion-summary"&gt;
&lt;p&gt;内容が以下のような&lt;code&gt;date_sample.sh&lt;/code&gt;を作成します．&lt;/p&gt;
&lt;pre style="margin: 20px 0px;"&gt;&lt;code class="language-bash"&gt;
#!/bin/zsh

f_date=`date -j -f %Y-%m-%d "$1" +%Y%m%d`
echo フォーマット前：$1
echo フォーマット後：$f_date
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上記のシェルスクリプトについて，日時引数をつけて実行すると以下のようになります．&lt;/p&gt;
&lt;pre class="command-line" data-prompt="%" style="margin-top: 20px;"&gt;
&lt;code class="language-bash"&gt;
./date_sample.sh 2022-01-01
&lt;/code&gt;&lt;/pre&gt;
&lt;pre style="margin-bottom: 20px;"&gt;
フォーマット前：2022-01-01
フォーマット後：20220101
&lt;/pre&gt;
&lt;p&gt;引数に取った日時をシェルスクリプト内の&lt;code&gt;date&lt;/code&gt;コマンドに渡してフォーマットを変換，変数に代入しています．&lt;/p&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;h2 id="_11"&gt;過去の日時を指定&lt;/h2&gt;
&lt;p&gt;日付の指定をする際は&lt;code&gt;-v&lt;/code&gt;オプションを使用して操作します．&lt;br&gt;
&lt;code&gt;bash&lt;/code&gt;のコマンドとはかなり異なるため，注意が必要です．&lt;/p&gt;
&lt;h3 id="_12"&gt;指定できる期間の種類&lt;/h3&gt;
&lt;p&gt;指定可能な種類は以下のとおりです．&lt;br&gt;
現在日時から「２週間前」「５時間前」などの指定ができます．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;y 年&lt;/li&gt;
&lt;li&gt;m 月&lt;/li&gt;
&lt;li&gt;w 週&lt;/li&gt;
&lt;li&gt;d 日&lt;/li&gt;
&lt;li&gt;H 時間&lt;/li&gt;
&lt;li&gt;M 分&lt;/li&gt;
&lt;li&gt;S 秒&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="xxx"&gt;X日・Xヶ月・X年前&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;-v&lt;/code&gt;オプションのあとに期間を指定します．&lt;br&gt;
以下のようにすれば（現在日時から）&lt;code&gt;-7days&lt;/code&gt;となります.&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2"&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;pre class="command-line" data-prompt="%"&gt;
&lt;code class="language-bash"&gt;
date -v -7d
date -v -7d +%Y-%m-%d
&lt;/code&gt;
&lt;/pre&gt;
&lt;pre style="margin-bottom: 40px;"&gt;
2022年 7月13日 水曜日 23時06分53秒 JST
2022-07-13
&lt;/pre&gt;

&lt;p&gt;「Xヶ月・X年前」を指定するには以下のとおりです．&lt;br&gt;
それぞれ上から「６ヶ月前・３年前」となっています．&lt;/p&gt;
&lt;pre class="command-line" data-prompt="%"&gt;
&lt;code class="language-bash"&gt;
date -v -6m
date -v -3y
&lt;/code&gt;
&lt;/pre&gt;
&lt;pre style="margin-bottom: 90px;"&gt;
2022年 1月20日 木曜日 23時11分47秒 JST
2019年 7月20日 土曜日 23時11分59秒 JST
&lt;/pre&gt;

&lt;h3 id="xx"&gt;X年X日前の指定&lt;/h3&gt;
&lt;p&gt;上記で確認した期間指定は組み合わせることも可能です．&lt;br&gt;
以下は「１年と３日前」という指定です．&lt;/p&gt;
&lt;pre class="command-line" data-prompt="%"&gt;
&lt;code class="language-bash"&gt;
date -v -1y -v -3d
&lt;/code&gt;
&lt;/pre&gt;
&lt;pre style="margin-bottom: 50px;"&gt;
2021年 7月19日 月曜日 23時16分28秒 JST
&lt;/pre&gt;

&lt;div class="admonition warning-box"&gt;
&lt;p class="admonition-title"&gt;注意&lt;/p&gt;
&lt;p&gt;複数の単位で期間を指定する場合はそれぞれに&lt;code&gt;-v&lt;/code&gt;オプションが必要です．&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id="_13"&gt;未来の日時を指定&lt;/h2&gt;
&lt;p&gt;過去の日時を指定する場合と同様に&lt;code&gt;-v&lt;/code&gt;オプションのあとに期間を指定します．&lt;br&gt;
以下のようにすれば（現在日時から）&lt;code&gt;+5days&lt;/code&gt;となります.&lt;/p&gt;
&lt;pre class="command-line" data-prompt="%"&gt;
&lt;code class="language-bash"&gt;
date -v +5d
&lt;/code&gt;
&lt;/pre&gt;
&lt;pre style="margin-bottom: 50px;"&gt;
2022年 7月25日 月曜日 23時24分18秒 JST
&lt;/pre&gt;

&lt;div class="admonition info-box"&gt;
&lt;p class="admonition-title"&gt;参考&lt;/p&gt;
&lt;p&gt;その他の日時操作も過去の日時指定で使用した&lt;code&gt;-&lt;/code&gt;を&lt;code&gt;+&lt;/code&gt;に変えれば未来の日時指定になります．&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id="_14"&gt;未来の任意の日時を指定&lt;/h2&gt;
&lt;p&gt;あまり使い道がわかりません&lt;sup id="fnref:3"&gt;&lt;a class="footnote-ref" href="#fn:3"&gt;3&lt;/a&gt;&lt;/sup&gt;が，以下のような指定もできます．&lt;/p&gt;
&lt;pre class="command-line" data-prompt="%"&gt;
&lt;code class="language-bash"&gt;
date -v 2045y -v 7m -v 20d
&lt;/code&gt;
&lt;/pre&gt;
&lt;pre style="margin-bottom: 40px;"&gt;
2045年 7月20日 木曜日 23時40分04秒 JST
&lt;/pre&gt;
&lt;p&gt;未来の日時を&lt;code&gt;-v&lt;/code&gt;オプションを使って指定しています．&lt;br&gt;
なお，&lt;code&gt;date -v 2045y -v julm -v 20d&lt;/code&gt;でも同様の結果が得られます.&lt;sup id="fnref:4"&gt;&lt;a class="footnote-ref" href="#fn:4"&gt;4&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;h2 id="_15"&gt;ひとこと&lt;/h2&gt;
&lt;p&gt;シェルスクリプトで日付の操作をすることが多いので，他にも気になった使い方などがあれば追記したいと思います．&lt;/p&gt;
&lt;div style="margin-bottom: 100px;"&gt;&lt;/div&gt;

&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;例えば現在日時が2022/07/01の場合，&lt;code&gt;date +%d&lt;/code&gt;を実行すると&lt;code&gt;01&lt;/code&gt;と出力されます．一方で&lt;code&gt;date +%-d&lt;/code&gt;を実行すると&lt;code&gt;1&lt;/code&gt;となります．&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;以下のコマンドを実行した日が2022/7/20なので，7日前の2022/7/13が出力されています．
なお，２つ目のコマンドは出力フォーマット指定を組み合わせたものです．&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:3"&gt;
&lt;p&gt;未来の日付の曜日を知りたい(&lt;code&gt;date -v 2045y -v 7m -v 20d +%a&lt;/code&gt;)，未来の基準日を指定するなど...？&amp;#160;&lt;a class="footnote-backref" href="#fnref:3" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:4"&gt;
&lt;p&gt;月の指定をJulyの略記に置き換えています(&lt;u&gt;Jul&lt;/u&gt;y + &lt;u&gt;m&lt;/u&gt;onth)．通常は数値で指定する方がわかりやすいと思いますが...&amp;#160;&lt;a class="footnote-backref" href="#fnref:4" title="Jump back to footnote 4 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Mac-Linux"></category><category term="zsh"></category><category term="shellscript"></category></entry><entry><title>【Mac/Linux】シェルスクリプトから別のシェルスクリプトを呼び出す方法</title><link href="https://www.tecrab.com/articles/shell-sh-call-sh.html" rel="alternate"></link><published>2022-06-08T00:00:00+09:00</published><updated>2022-10-07T00:00:00+09:00</updated><author><name>かに</name></author><id>tag:www.tecrab.com,2022-06-08:/articles/shell-sh-call-sh.html</id><summary type="html">&lt;p&gt;シェルスクリプト中で別のシェルスクリプトを呼び出す方法です．&lt;/p&gt;</summary><content type="html">&lt;div class="admonition abstract"&gt;
&lt;p&gt;本記事はシェルスクリプトから別のシェルスクリプトを呼び出す方法を解説しています．&lt;/p&gt;
&lt;/div&gt;
&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;目次&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;別のシェルスクリプトを呼び出す方法&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#source"&gt;sourceコマンドでの呼び出し&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;それぞれの方法の違い&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_3"&gt;実験&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_4"&gt;ひとこと&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="_1"&gt;別のシェルスクリプトを呼び出す方法&lt;/h2&gt;
&lt;p&gt;シェルスクリプトから別のシェルスクリプトを呼び出す方法は，以下の３種類があります．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;source&lt;/code&gt;コマンド&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.&lt;/code&gt; （ドット [ピリオド]）&lt;/li&gt;
&lt;li&gt;呼び出すシェルスクリプトのパスを記載&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="source"&gt;&lt;code&gt;source&lt;/code&gt;コマンドでの呼び出し&lt;/h3&gt;
&lt;p&gt;例として&lt;code&gt;source&lt;/code&gt;コマンドでの呼び出しを確認してみましょう．
以下のようなディレクトリ構造で&lt;code&gt;b.sh&lt;/code&gt;内から&lt;code&gt;a.sh&lt;/code&gt;を呼び出すようにします．&lt;/p&gt;
&lt;pre style="margin-bottom: 40px"&gt;
.
├── a.sh
└── b.sh
&lt;/pre&gt;

&lt;p&gt;&amp;lt;ファイルの中身＞&lt;/p&gt;
&lt;p&gt;&lt;code&gt;a.sh&lt;/code&gt;&lt;/p&gt;
&lt;pre style="margin: -15px 0px 10px 0px;"&gt;&lt;code class="language-bash"&gt;
#!/bin/zsh

a_var=100
echo 'echo from a.sh'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;b.sh&lt;/code&gt;&lt;/p&gt;
&lt;pre style="margin: -15px 0px 40px 0px;"&gt;&lt;code class="language-bash"&gt;
#!/bin/zsh

source ./a.sh
echo ${a_var}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;b.sh&lt;/code&gt;を実行すると以下のようになります．&lt;/p&gt;
&lt;pre class="command-line" data-prompt="%"&gt;
&lt;code class="language-bash"&gt;
./b.sh
&lt;/code&gt;
&lt;/pre&gt;
&lt;pre style="margin-bottom: 40px;"&gt;
echo from a.sh
100
&lt;/pre&gt;

&lt;p&gt;結果を見てみると&lt;code&gt;a.sh&lt;/code&gt;で記載した処理が実行されており，さらに&lt;code&gt;a.sh&lt;/code&gt;で定義した変数(&lt;code&gt;a_var&lt;/code&gt;)が&lt;code&gt;b.sh&lt;/code&gt;に引き継がれて出力されています．&lt;/p&gt;
&lt;div class="admonition info-box"&gt;
&lt;p class="admonition-title"&gt;参考&lt;/p&gt;
&lt;p&gt;上記のコードを試してみる場合&lt;code&gt;a.sh&lt;/code&gt;, &lt;code&gt;b.sh&lt;/code&gt;それぞれに権限付与が必要です．&lt;br&gt;
&lt;code&gt;a.sh&lt;/code&gt;, &lt;code&gt;b.sh&lt;/code&gt;がある階層で以下のコマンドを実行して権限を付与すればOKです.
&lt;pre class="command-line" data-prompt="%"&gt;
&lt;code class="language-bash"&gt;
chmod 755 a.sh b.sh
&lt;/code&gt;
&lt;/pre&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id="_2"&gt;それぞれの方法の違い&lt;/h2&gt;
&lt;p&gt;違いは以下のとおりです．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;source&lt;/code&gt;もしくは&lt;code&gt;.&lt;/code&gt;コマンド：実行したシェルスクリプトと同じプロセスで動作&lt;/li&gt;
&lt;li&gt;シェルスクリプトをそのまま呼び出す場合：別プロセスで動作&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_3"&gt;実験&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;test_a.sh&lt;/code&gt;と&lt;code&gt;test_b.sh&lt;/code&gt;を準備します.&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;ファイルの中身＞&lt;/p&gt;
&lt;p&gt;&lt;code&gt;test_a.sh&lt;/code&gt;&lt;/p&gt;
&lt;pre style="margin: -15px 0px 10px 0px;"&gt;&lt;code class="language-bash"&gt;
#!/bin/zsh

a_var=100
a_process=$$  # $$はカレントプロセスのプロセス番号を保持

echo "test_a current_process: ${a_process}"
echo 'echo from test_a.sh'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;test_b.sh&lt;/code&gt;&lt;/p&gt;
&lt;pre style="margin: -15px 0px 40px 0px;"&gt;&lt;code class="language-bash"&gt;
#!/bin/zsh

b_process=$$

echo "current_process:${b_process}"

echo -source-----
# sourceで呼び出す
a_var=0
source ./test_a.sh
echo ${a_var}

echo -ドット-----
# . (ドット[ピリオド])で呼び出す
a_var=0
. ./test_a.sh
echo ${a_var}

echo -そのまま-----
# そのまま呼び出す
a_var=0
./test_a.sh
echo ${a_var}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;test_b.sh&lt;/code&gt;を実行した結果は以下のとおりです．&lt;/p&gt;
&lt;pre class="command-line" data-prompt="%"&gt;
&lt;code class="language-bash"&gt;
./test_b.sh
&lt;/code&gt;
&lt;/pre&gt;
&lt;pre style="margin-bottom: 20px;"&gt;
current_process:8730
-source-----
test_a current_process: 8730
echo from test_a.sh
100
-ドット-----
test_a current_process: 8730
echo from test_a.sh
100
-そのまま-----
test_a current_process: 8731
echo from test_a.sh
0
&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;source&lt;/code&gt;や&lt;code&gt;.&lt;/code&gt;コマンドでは実行したシェルスクリプトと同じプロセスで動作していますが，シェルスクリプトをそのまま記載している部分はプロセス番号が異なっています．&lt;/p&gt;
&lt;p&gt;そのため，シェルスクリプトをそのまま実行している箇所では変数が上書きされることなく&lt;code&gt;0&lt;/code&gt;が出力されています．&lt;/p&gt;
&lt;h2 id="_4"&gt;ひとこと&lt;/h2&gt;
&lt;p&gt;（あまりないような気がしますが）関数や変数などをまとめて定義した&lt;code&gt;.sh&lt;/code&gt;ファイルを読み込むことにも使えそうです．&lt;/p&gt;
&lt;p&gt;&lt;code&gt;source&lt;/code&gt;と&lt;code&gt;.&lt;/code&gt;の違いはよくわからなかったので，もしご存知の方がいらっしゃれば是非ご連絡ください．&lt;/p&gt;
&lt;div style="margin-bottom: 100px;"&gt;&lt;/div&gt;

&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;それぞれのファイルは同じ階層に配置し&lt;code&gt;chmod&lt;/code&gt;で権限を付与しておきます（前項の「参考」を参照）&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Mac-Linux"></category><category term="zsh"></category><category term="shellscript"></category></entry><entry><title>【Python】文字列を「〜で始まる/終わる/〜が含まれる」で抽出する方法</title><link href="https://www.tecrab.com/articles/python-starts-ends-with-in.html" rel="alternate"></link><published>2022-05-20T00:00:00+09:00</published><updated>2022-10-08T00:00:00+09:00</updated><author><name>かに</name></author><id>tag:www.tecrab.com,2022-05-20:/articles/python-starts-ends-with-in.html</id><summary type="html">&lt;p&gt;文字列を条件別に抽出する方法です．&lt;/p&gt;</summary><content type="html">&lt;div class="admonition abstract"&gt;
&lt;p&gt;本記事では文字列の取得方法に関して以下の種類を見ていきます．
&lt;ul style="margin: -5px 0px 0px 15px;"&gt;
 &lt;li&gt;〜で始まる文字列&lt;/li&gt;
 &lt;li&gt;〜で終わる文字列&lt;/li&gt;
 &lt;li&gt;〜という文字が含まれる文字列&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;目次&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;〜で始まる文字列&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;〜で終わる文字列&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;〜という文字が含まれる文字列&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#in"&gt;in演算子の判定に関して&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_4"&gt;ひとこと&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="_1"&gt;〜で始まる文字列&lt;/h2&gt;
&lt;p&gt;特定のパターンから始まる文字列を取得したい場合，&lt;br&gt;
Pythonの組み込みメソッド&lt;code&gt;startswith()&lt;/code&gt;を使用します．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;
l = ['p_match_file', 'o_file', 'p_file2']

# 文字列の最初が「p_」の文字列を取得
for i in l:
    if i.startswith('p_'):
        print(i)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre style="margin-bottom: 30px;"&gt;
p_match_file
p_file2
&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;'任意の文字列'.startswith('始まりの文字列')&lt;/code&gt;とすることで，任意の文字列が「始まりの文字列」で始まっていれば真となります．&lt;br&gt;
上記のコード例ではリストに含まれる各文字列について&lt;code&gt;p_&lt;/code&gt;で始まっているかをチェックして&lt;code&gt;p_&lt;/code&gt;で始まっている文字列のみを出力しています．&lt;/p&gt;
&lt;h2 id="_2"&gt;〜で終わる文字列&lt;/h2&gt;
&lt;p&gt;特定のパターンで終わる文字列を取得したい場合，&lt;br&gt;
Pythonの組み込みメソッド&lt;code&gt;endswith()&lt;/code&gt;を使用します．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;
l = ['p_match_file', 'o_file', 'p_file2']

# 文字列の最後が「file」の文字列を取得
for i in l:
    if i.endswith('file'):
        print(i)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre style="margin-bottom: 30px;"&gt;
p_match_file
o_file
&lt;/pre&gt;

&lt;p&gt;指定の方法は&lt;code&gt;startswith()&lt;/code&gt;と同じです．&lt;/p&gt;
&lt;p&gt;リストに含まれる各文字列について&lt;code&gt;file&lt;/code&gt;で終わっているかをチェックしています．&lt;br&gt;
ちゃんと&lt;code&gt;p_file2&lt;/code&gt;が除外されていますね．&lt;/p&gt;
&lt;h2 id="_3"&gt;〜という文字が含まれる文字列&lt;/h2&gt;
&lt;p&gt;特定の文字が含まれる文字列を取得したい場合，Pythonの&lt;code&gt;in&lt;/code&gt;演算子を使用します．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;
l = ['p_match_file', 'o_file', 'p_file2']

# 文字列中に「match」が含まれる文字列を取得
for i in l:
    if 'match' in i:
        print(i)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre style="margin-bottom: 30px;"&gt;
p_match_file
&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;'任意の文字' in '対象文字列'&lt;/code&gt;とすることで，対象文字列の中に任意の文字列（＝リストの各文字列の中に&lt;code&gt;match&lt;/code&gt;という文字）が含まれているかを確認しています．&lt;br&gt;
その結果&lt;code&gt;match&lt;/code&gt;という文字が含まれる&lt;code&gt;p_match_file&lt;/code&gt;だけが出力されています．&lt;/p&gt;
&lt;h3 id="in"&gt;&lt;code&gt;in&lt;/code&gt;演算子の判定に関して&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;in&lt;/code&gt;演算子を使った判定では指定した文字列が含まれていれば真になるので，確認したい文字のパターンをよく確認しておくことが大切です．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;
# in演算子は一致すれば取れてしまう
for i in l:
    if 'file' in i:
        print(i)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre style="margin-bottom: 90px;"&gt;
p_match_file
o_file
p_file2
&lt;/pre&gt;

&lt;h2 id="_4"&gt;ひとこと&lt;/h2&gt;
&lt;p&gt;文字列のパターンがシンプルであれば正規表現を使わずにサクッと判定できますね．&lt;br&gt;
結局正規表現になることも多いですが・・・&lt;/p&gt;
&lt;div style="margin-bottom: 100px;"&gt;&lt;/div&gt;</content><category term="Python"></category><category term="Python"></category><category term="自然言語処理"></category></entry><entry><title>【Mac/Linux】zshで *（メタ文字/ワイルドカード）を展開する方法</title><link href="https://www.tecrab.com/articles/shell-zsh-meta.html" rel="alternate"></link><published>2022-04-12T00:00:00+09:00</published><updated>2022-10-07T00:00:00+09:00</updated><author><name>かに</name></author><id>tag:www.tecrab.com,2022-04-12:/articles/shell-zsh-meta.html</id><summary type="html">&lt;p&gt;zshでメタ文字（ワイルドカード）を展開する方法です．&lt;/p&gt;</summary><content type="html">&lt;div class="admonition abstract"&gt;
&lt;p&gt;本記事は zsh で&lt;code&gt;*&lt;/code&gt;を展開する方法について解説しています．&lt;/p&gt;
&lt;/div&gt;
&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;目次&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;背景&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#zsh"&gt;シェルが zsh ではうまくいかない&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;対応策&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_3"&gt;部分的に有効化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_4"&gt;シェルスクリプト単位で有効化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#zshenv"&gt;.zshenvファイル（設定ファイル）で全体に有効化&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_5"&gt;ひとこと&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="_1"&gt;背景&lt;/h2&gt;
&lt;p&gt;bash や sh などのシェルではファイルを一括で処理したいとき，以下のようなスクリプトで対応できます．&lt;/p&gt;
&lt;pre style="margin-bottom: 30px;"&gt;&lt;code class="language-bash"&gt;
#!/bin/bash

files="./*.txt"
for file in ${files}; do
    echo ${file}
done
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上記のスクリプトを&lt;code&gt;sample.sh&lt;/code&gt;として保存し，以下のようなディレクトリで実行した結果を見てみましょう．&lt;/p&gt;
&lt;div style="margin-bottom: 30px;"&gt;&lt;/div&gt;

&lt;p&gt;ディレクトリ構造&lt;/p&gt;
&lt;pre style="margin: -15px 0px 20px 0px;"&gt;
.
├── 001.txt
├── 002.txt
├── 003.txt
└── sample.sh
&lt;/pre&gt;

&lt;p&gt;結果&lt;/p&gt;
&lt;pre style="margin: -15px 0px 30px 0px;"&gt;
./001.txt
./002.txt
./003.txt
&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;for&lt;/code&gt;文で一つずつ処理される際に&lt;code&gt;*.txt&lt;/code&gt;が展開されるため，指定したディレクトリ内の&lt;code&gt;*.txt&lt;/code&gt;ファイルに対して任意の操作ができます．&lt;br&gt;
今回の例ではカレントディレクトリ内の&lt;code&gt;*.txt&lt;/code&gt;ファイルパスが&lt;code&gt;echo&lt;/code&gt;で表示されています．&lt;/p&gt;
&lt;h2 id="zsh"&gt;シェルが zsh ではうまくいかない&lt;/h2&gt;
&lt;p&gt;ここでシェルを&lt;code&gt;zsh&lt;/code&gt;にする&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;と&lt;code&gt;*.txt&lt;/code&gt;の展開がうまくいかず以下のような結果になります．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;
#!/bin/zsh

files="./*.txt"
for file in ${files}; do
    echo ${file}
done
&lt;/code&gt;&lt;/pre&gt;
&lt;pre style="margin-bottom: 30px;"&gt;
./*.txt
&lt;/pre&gt;

&lt;p&gt;結果を見ると&lt;code&gt;*.txt&lt;/code&gt;ファイルとして認識されており，意図する挙動ではないですね・・・&lt;/p&gt;
&lt;h2 id="_2"&gt;対応策&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;zsh&lt;/code&gt;では&lt;code&gt;GLOB_SUBST&lt;/code&gt;というオプションを有効にしないと&lt;code&gt;*&lt;/code&gt;などが展開されません．&lt;/p&gt;
&lt;p&gt;有効にする方法は以下の３つがあります．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;部分的に有効化&lt;/li&gt;
&lt;li&gt;シェルスクリプト単位で有効化&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.zshenv&lt;/code&gt;ファイル（設定ファイル）で全体に有効化&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;順に見ていきましょう．&lt;/p&gt;
&lt;h3 id="_3"&gt;部分的に有効化&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;~&lt;/code&gt;オプションを変数につけることで部分的に&lt;code&gt;GLOB_SUBST&lt;/code&gt;を有効化することができます．&lt;br&gt;
具体的には以下のように記載します．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;
#!/bin/zsh

files="./*.txt"
for file in ${~files}; do  # filesの前に ~オプションを付与
    echo ${file}
done
&lt;/code&gt;&lt;/pre&gt;
&lt;pre style="margin-bottom: 30px;"&gt;
./001.txt
./002.txt
./003.txt
&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;*.txt&lt;/code&gt;が展開され，意図した挙動となりました！&lt;/p&gt;
&lt;h3 id="_4"&gt;シェルスクリプト単位で有効化&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;GLOB_SUBST&lt;/code&gt;を有効にしたいシェルスクリプトに以下の内容を記載します．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;setopt GLOB_SUBST&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;
#!/bin/zsh

setopt GLOB_SUBST  # 追記

files="./*.txt"
for file in ${files}; do
    echo ${file}
done
&lt;/code&gt;&lt;/pre&gt;
&lt;pre style="margin-bottom: 30px;"&gt;
./001.txt
./002.txt
./003.txt
&lt;/pre&gt;

&lt;p&gt;シェルスクリプト全体で&lt;code&gt;GLOB_SUBST&lt;/code&gt;が有効になるため&lt;code&gt;~&lt;/code&gt;オプションを付けなくても bash や sh と同一の記載で展開されるようになります．&lt;/p&gt;
&lt;h3 id="zshenv"&gt;&lt;code&gt;.zshenv&lt;/code&gt;ファイル（設定ファイル）で全体に有効化&lt;/h3&gt;
&lt;p&gt;最後に&lt;code&gt;.zshenv&lt;/code&gt;&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2"&gt;2&lt;/a&gt;&lt;/sup&gt;に追記する方法です．&lt;br&gt;
&lt;code&gt;.zshenv&lt;/code&gt;に以下の内容を追記して有効化すれば，永続的な設定が全体に適用されます．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;setopt GLOB_SUBST&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有効化のコマンド&lt;sup id="fnref:3"&gt;&lt;a class="footnote-ref" href="#fn:3"&gt;3&lt;/a&gt;&lt;/sup&gt;は以下です．&lt;br&gt;
（成功しても何も表示されません）&lt;/p&gt;
&lt;pre class="command-line" data-prompt="%" style="margin-bottom: 30px;"&gt;
&lt;code class="language-bash"&gt;
echo setopt GLOB_SUBST &gt;&gt; ~/.zshenv &amp;&amp; source ~/.zshenv
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;上記のコマンドを実行後は bash や sh と同じように記載することができます．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;
#!/bin/zsh

files="./*.txt"
for file in ${files}; do
    echo ${file}
done
&lt;/code&gt;&lt;/pre&gt;
&lt;pre style="margin-bottom: 30px;"&gt;
./001.txt
./002.txt
./003.txt
&lt;/pre&gt;

&lt;h2 id="_5"&gt;ひとこと&lt;/h2&gt;
&lt;p&gt;bash と zsh の差は色々とありますね．&lt;br&gt;
どちらでもいい感じに書けるようになりたい・・・&lt;/p&gt;
&lt;div style="margin-bottom: 100px;"&gt;&lt;/div&gt;

&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;シバン（&lt;code&gt;#!/bin/zsh&lt;/code&gt;）で指定しています．&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;&lt;code&gt;.zshenv&lt;/code&gt;というファイルはログイン/インタラクティブ/シェルスクリプトで常に使用する設定を定義しています．&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:3"&gt;
&lt;p&gt;このコマンドではホームディレクトリの&lt;code&gt;.zshenv&lt;/code&gt;ファイルに&lt;code&gt;setopt GLOB_SUBST&lt;/code&gt;を追記し，それを有効化（&lt;code&gt;source&lt;/code&gt;）しています．なお，ホームディレクトリに&lt;code&gt;.zshenv&lt;/code&gt;ファイルが存在していない場合は，&lt;code&gt;.zshenv&lt;/code&gt;を作成してから追記してくれます．&amp;#160;&lt;a class="footnote-backref" href="#fnref:3" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Mac-Linux"></category><category term="zsh"></category><category term="shellscript"></category></entry><entry><title>シェルスクリプトのクォテーションまとめ</title><link href="https://www.tecrab.com/articles/shell-quotation.html" rel="alternate"></link><published>2022-04-02T00:00:00+09:00</published><updated>2022-10-07T00:00:00+09:00</updated><author><name>かに</name></author><id>tag:www.tecrab.com,2022-04-02:/articles/shell-quotation.html</id><summary type="html">&lt;p&gt;シェルスクリプトのクォテーションについて記法をまとめています．&lt;/p&gt;</summary><content type="html">&lt;div class="admonition abstract"&gt;
&lt;p&gt;本記事はシェルスクリプトで見られる&lt;br&gt;
クォテーション（&lt;code&gt;'&lt;/code&gt;や&lt;code&gt;"&lt;/code&gt;など）の記法についてまとめています．&lt;/p&gt;
&lt;/div&gt;
&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;目次&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;種類&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;前提知識&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;各クォテーションの違い&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_4"&gt;シングルクォート&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_5"&gt;ダブルクォート&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_6"&gt;バッククォート&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_7"&gt;バックスラッシュ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_8"&gt;ひとこと&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="_1"&gt;種類&lt;/h2&gt;
&lt;p&gt;クォテーションは以下の４種類です．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;シングルクォート：&lt;code&gt;'&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;ダブルクォート　：&lt;code&gt;"&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;バッククォート　：&lt;code&gt;`&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;バックスラッシュ：&lt;code&gt;\&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_2"&gt;前提知識&lt;/h2&gt;
&lt;p&gt;ここでは前提となる内容を記載しています．&lt;br&gt;
各クォテーションの意味をさっと知りたい方は読み飛ばしても大丈夫です．&lt;/p&gt;
&lt;details class="accordion-block"&gt;
&lt;summary&gt;確認する場合はこちらをクリック&lt;/summary&gt;
&lt;div class="accordion-summary"&gt;
&lt;p&gt;シェルは様々な文字や記号を読み解いて処理していきますが，一部の記号はシェルが特別の解釈をします．&lt;br&gt;
 この特別の解釈をする記号を総称して「特殊文字」や「メタキャラクタ」と呼びます．&lt;br&gt;
 （特殊文字には「&lt;code&gt;$&lt;/code&gt;や&lt;code&gt;*&lt;/code&gt;」など，多くの記号があります）&lt;/p&gt;
&lt;p&gt;シェルは特殊文字が存在すると，その特殊文字に応じた解釈をします．&lt;br&gt;
 そのため特殊文字を普通の文字として解釈して欲しい場合，そのための目印が必要であり，その目印として使用する記号がクォテーションです．&lt;/p&gt;
&lt;p&gt;すなわちクォテーションは&lt;strong&gt;シェルの解釈のうまく誘導してあげて，こちらが意図したとおりに挙動させるため&lt;/strong&gt;に使います．&lt;/p&gt;
&lt;p&gt;【具体例】&lt;br&gt;
 &lt;code&gt;$&lt;/code&gt;は&lt;code&gt;$&lt;/code&gt;の後に続く変数を展開して表示するための特殊文字です．&lt;br&gt;
 例えばある変数を定義して，変数の中身を表示したい場合は以下のように記述します．&lt;/p&gt;
&lt;pre class="command-line" data-prompt="%" style="margin-top: 20px;"&gt;
&lt;code class="language-bash"&gt;
KANI=100
echo $KANI
&lt;/code&gt;
&lt;/pre&gt;
&lt;pre style="margin-bottom: 20px;"&gt;
100
&lt;/pre&gt;
&lt;p&gt;では「$100」という「文字」を表示させたい場合を考えます．&lt;br&gt;
 以下のコードを見てみましょう．&lt;/p&gt;
&lt;pre class="command-line" data-prompt="%" style="margin-top: 20px;"&gt;
&lt;code class="language-bash"&gt;
echo $100
&lt;/code&gt;
&lt;/pre&gt;
&lt;pre style="margin-bottom: 20px;"&gt;

&lt;/pre&gt;
&lt;p&gt;上記のコマンドでは結果が何も表示されないのです・・・&lt;br&gt;
 これはシェルが&lt;code&gt;$&lt;/code&gt;を特別に解釈して&lt;code&gt;$&lt;/code&gt;の後の&lt;code&gt;100&lt;/code&gt;という変数を展開するためです．&lt;br&gt;
 しかし&lt;code&gt;100&lt;/code&gt;という変数は定義していないので中身はありません．そのため空白が表示されています．&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;ここでクォーテーションの出番です．&lt;br&gt;
 今回&lt;code&gt;$&lt;/code&gt;は普通の文字として扱って欲しいので，それをシェルに伝えるためにシングルクォートを使用したものが以下のコードです．&lt;/p&gt;
&lt;pre class="command-line" data-prompt="%" style="margin-top: 20px;"&gt;
&lt;code class="language-bash"&gt;
echo '$100'
&lt;/code&gt;
&lt;/pre&gt;
&lt;pre style="margin-bottom: 20px;"&gt;
$100
&lt;/pre&gt;
&lt;p&gt;シングルクォートで囲まれた部分はただの文字として解釈されるので，こちらの意図どおりの出力を得ることができました．&lt;/p&gt;
&lt;p&gt;以上のような感じでクォテーションを使用します．&lt;br&gt;
 クォテーションは複数あり，それぞれの意味があるので本記事ではそうした違いを見ています．&lt;/p&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;h2 id="_3"&gt;各クォテーションの違い&lt;/h2&gt;
&lt;h3 id="_4"&gt;シングルクォート&lt;/h3&gt;
&lt;p&gt;シングルクォート（&lt;code&gt;'&lt;/code&gt;）で囲まれた文字はすべて&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;「普通の文字」として解釈されます．&lt;br&gt;
そのため，シェルによる特殊文字の解釈を一切させない場合に用います．&lt;br&gt;
「書いたとおりに解釈してね」ということです．&lt;/p&gt;
&lt;pre class="command-line" data-prompt="%"&gt;
&lt;code class="language-bash"&gt;
echo '$KANI'
&lt;/code&gt;
&lt;/pre&gt;
&lt;pre style="margin-bottom: 20px;"&gt;
$KANI
&lt;/pre&gt;

&lt;p&gt;結果を見ると，シングルクォートで囲まれた文字がそのまま出力されていますね．&lt;/p&gt;
&lt;div style="margin-bottom: 70px;"&gt;&lt;/div&gt;

&lt;p&gt;唯一の例外は&lt;code&gt;'&lt;/code&gt;（シングルクォート自身）だけです．&lt;br&gt;
以下のコマンドを実行するとエラーこそ出ませんが，変な表示が出てきます．&lt;br&gt;
（&lt;code&gt;quote&amp;gt;&lt;/code&gt;を抜けるには&lt;kbd&gt;&lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;C&lt;/kbd&gt;&lt;/kbd&gt;）&lt;/p&gt;
&lt;pre class="command-line" data-prompt="%"&gt;
&lt;code class="language-bash"&gt;
echo 'KANI's book'
&lt;/code&gt;
&lt;/pre&gt;
&lt;pre style="margin-bottom: 50px;"&gt;
quote&amp;gt;
&lt;/pre&gt;

&lt;p&gt;シングルクォートを含む文字をそのまま表示させたい場合はダブルクォートで囲みます．&lt;/p&gt;
&lt;pre class="command-line" data-prompt="%"&gt;
&lt;code class="language-bash"&gt;
echo "KANI's book"
&lt;/code&gt;
&lt;/pre&gt;
&lt;pre style="margin-bottom: 20px;"&gt;
KANI's book
&lt;/pre&gt;

&lt;p&gt;こちらの意図どおり出力されましたね．&lt;/p&gt;
&lt;div style="margin-bottom: 50px;"&gt;&lt;/div&gt;

&lt;h3 id="_5"&gt;ダブルクォート&lt;/h3&gt;
&lt;p&gt;ダブルクォート（&lt;code&gt;"&lt;/code&gt;）で囲まれた文字列は原則「普通の文字」として解釈されます．&lt;br&gt;
しかし&lt;code&gt;$&lt;/code&gt;と&lt;code&gt;`&lt;/code&gt;, &lt;code&gt;\&lt;/code&gt;, &lt;code&gt;"&lt;/code&gt;（ダブルクォート自身）は例外です．&lt;/p&gt;
&lt;p&gt;シングルクォートと比較しながら見てみましょう．&lt;/p&gt;
&lt;p&gt;まずは変数への代入とシンプルな出力です．&lt;/p&gt;
&lt;pre class="command-line" data-prompt="%"&gt;
&lt;code class="language-bash"&gt;
KANI=100
echo $KANI
&lt;/code&gt;
&lt;/pre&gt;
&lt;pre style="margin-bottom: 20px;"&gt;
100
&lt;/pre&gt;
&lt;p&gt;結果には変数&lt;code&gt;KANI&lt;/code&gt;が展開されて表示されています．&lt;/p&gt;
&lt;div style="margin-bottom: 70px;"&gt;&lt;/div&gt;

&lt;p&gt;次にシングルクォートの場合を見てみます．&lt;br&gt;&lt;/p&gt;
&lt;pre class="command-line" data-prompt="%"&gt;
&lt;code class="language-bash"&gt;
echo '$KANI'
&lt;/code&gt;
&lt;/pre&gt;
&lt;pre style="margin-bottom: 20px;"&gt;
$KANI
&lt;/pre&gt;
&lt;p&gt;シングルクォートは強いので囲んだものを文字として解釈させます．&lt;br&gt;
そのため，&lt;code&gt;$KANI&lt;/code&gt;がそのまま出力されています．&lt;/p&gt;
&lt;div style="margin-bottom: 70px;"&gt;&lt;/div&gt;

&lt;p&gt;最後にダブルクォートです．&lt;br&gt;&lt;/p&gt;
&lt;pre class="command-line" data-prompt="%"&gt;
&lt;code class="language-bash"&gt;
echo "$KANI"
&lt;/code&gt;
&lt;/pre&gt;
&lt;pre style="margin-bottom: 20px;"&gt;
100
&lt;/pre&gt;
&lt;p&gt;ダブルクォートは&lt;code&gt;$&lt;/code&gt;を特殊文字としてシェルに解釈させるため，変数の展開が実行された結果が出力されます．&lt;/p&gt;
&lt;details class="accordion-block"&gt;
&lt;summary&gt;参考：&lt;code&gt;echo $KANI&lt;/code&gt;と&lt;code&gt;echo "$KANI"&lt;/code&gt;の違い（クリックで展開されます）&lt;/summary&gt;
&lt;div class="accordion-summary"&gt;
&lt;p&gt;先ほど確認した&lt;code&gt;echo $KANI&lt;/code&gt;と&lt;code&gt;echo "$KANI"&lt;/code&gt;はいずれも出力結果が同じです．&lt;/p&gt;
&lt;p&gt;「どっちでも同じならいちいち&lt;code&gt;"&lt;/code&gt;で囲まなくてもいいのでは？」となりそうですが，囲まない場合は展開する変数にスペースが含まれないことが前提です.&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2"&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;"&lt;/code&gt;で囲まないとスクリプトが動かない例を見てみましょう．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash" style="margin: 20px 0px;"&gt;
#!/bin/bash

category='dog cat'

if [ $category = "dog cat" ]; then
    echo 犬猫！
fi
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;このシェルスクリプトは変数&lt;code&gt;category&lt;/code&gt;が&lt;code&gt;dog cat&lt;/code&gt;なら「犬猫！」と表示するだけのものです．
 これを&lt;code&gt;txt.sh&lt;/code&gt;として保存・権限付与をして実行すると以下のようなエラーが発生します．&lt;/p&gt;
&lt;div style="margin-top: 10px;"&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;./tst.sh: line 5: [: too many arguments&lt;/code&gt;&lt;/p&gt;
&lt;div style="margin-bottom: 20px;"&gt;&lt;/div&gt;
&lt;p&gt;これは&lt;code&gt;if&lt;/code&gt;文の判定式&lt;code&gt;[ $category = "dog cat" ]&lt;/code&gt;の&lt;code&gt;$category&lt;/code&gt;が原因です．&lt;br&gt;
 原因を探るために変数展開後の判定式を以下で見てみましょう．&lt;/p&gt;
&lt;div style="margin-top: 10px;"&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;[ dog cat = "dog cat" ]&lt;/code&gt;&lt;br&gt;&lt;/p&gt;
&lt;div style="margin-bottom: 20px;"&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;dog cat&lt;/code&gt;に半角スペースが含まれているため，シェルがそれを解釈し余計な引数あるということでエラーになっていました．&lt;br&gt;
 これを解消するにはスクリプトを以下のように修正します．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash" style="margin: 20px 0px;"&gt;
#!/bin/bash

category='dog cat'

# $categoryを"で囲む
if [ "$category" = "dog cat" ]; then
    echo 犬猫！
fi
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;これで変数展開された後の判定式は次のようになるため，エラーなく処理を実行できます．
 （文字列同士の比較になっているためエラーが発生しません）&lt;/p&gt;
&lt;div style="margin-top: 10px;"&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;[ "dog cat" = "dog cat" ]&lt;/code&gt;&lt;br&gt;&lt;/p&gt;
&lt;div style="margin-bottom: 20px;"&gt;&lt;/div&gt;
&lt;p&gt;以上を踏まえると，変数展開を行う際は基本的に&lt;code&gt;"&lt;/code&gt;で囲っておくと安心です．&lt;br&gt;
なお，先述したとおり&lt;code&gt;echo $KANI&lt;/code&gt;と&lt;code&gt;echo "$KANI"&lt;/code&gt;に関してはスペースの有無でエラーになることはありません．&lt;br&gt;
これは&lt;code&gt;echo&lt;/code&gt;コマンドが引数の文字をそのまま出力するため，半角スペースがあっても引数が複数あると解釈してそのまま出力してくれるためです．&lt;/p&gt;
&lt;div class="admonition warning-box"&gt;
&lt;p class="admonition-title"&gt;シェルの種類に注意&lt;/p&gt;
&lt;p&gt;上記で確認した内容はシェルが&lt;code&gt;bash&lt;/code&gt;, &lt;code&gt;sh&lt;/code&gt;の場合です．&lt;br&gt;
Macのデフォルトシェル&lt;code&gt;zsh&lt;/code&gt;は最初のスクリプトでもエラーなく実行されます．&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div style="margin: -70px 0px 0px 0px"&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;div style="margin-bottom: 50px;"&gt;&lt;/div&gt;

&lt;p&gt;ダブルクォートは囲んだ文字列について変数やコマンドの置き換えを行う場合に使用するケースが多いです．&lt;/p&gt;
&lt;div style="margin-bottom: 50px;"&gt;&lt;/div&gt;

&lt;pre class="command-line" data-prompt="%"&gt;
&lt;code class="language-bash"&gt;
date
&lt;/code&gt;
&lt;/pre&gt;
&lt;pre style="margin-bottom: 20px;"&gt;
2022年 4月 2日 土曜日 12時12分17秒 JST
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;date&lt;/code&gt;は現在日時を表示してくれるコマンドなので，結果を見ると日時が表示されています．&lt;/p&gt;
&lt;div style="margin-bottom: 70px;"&gt;&lt;/div&gt;

&lt;pre class="command-line" data-prompt="%"&gt;
&lt;code class="language-bash"&gt;
echo 'ただいまの日時は`date`'
&lt;/code&gt;
&lt;/pre&gt;
&lt;pre style="margin-bottom: 20px;"&gt;
ただいまの日時は`date`
&lt;/pre&gt;

&lt;p&gt;シングルクォートで囲まれた部分は文字&lt;sup id="fnref:3"&gt;&lt;a class="footnote-ref" href="#fn:3"&gt;3&lt;/a&gt;&lt;/sup&gt;として解釈されるのでそのまま表示されています．&lt;/p&gt;
&lt;div style="margin-bottom: 70px;"&gt;&lt;/div&gt;

&lt;pre class="command-line" data-prompt="%"&gt;
&lt;code class="language-bash"&gt;
echo "ただいまの日時は`date`"
&lt;/code&gt;
&lt;/pre&gt;
&lt;pre style="margin-bottom: 20px;"&gt;
ただいまの日時は2022年 4月 2日 土曜日 12時12分17秒 JST
&lt;/pre&gt;

&lt;p&gt;ダブルクォートの場合は&lt;code&gt;`&lt;/code&gt;を解釈するためコマンドが実行されます．&lt;/p&gt;
&lt;p&gt;上記の例はコマンドの置き換えを行なったものです．&lt;br&gt;
ダブルクォートを使うことでコマンドの実行結果と文字列を組み合わせて表示できています．&lt;br&gt;
ここで使用している&lt;code&gt;`&lt;/code&gt;（バッククォート）については次項で解説しています．&lt;/p&gt;
&lt;p&gt;なお&lt;code&gt;"&lt;/code&gt;を普通の文字として扱いたい場合は&lt;code&gt;"&lt;/code&gt;で囲まず，シングルクォートで囲みます．&lt;br&gt;
次の２つのコマンドで確認しましょう．&lt;/p&gt;
&lt;pre class="command-line" data-prompt="%"&gt;
&lt;code class="language-bash"&gt;
echo "KANI said "hoge"" 
&lt;/code&gt;
&lt;/pre&gt;
&lt;pre style="margin-bottom: 20px;"&gt;
KANI said hoge
&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;"&lt;/code&gt;を含む文字を&lt;code&gt;"&lt;/code&gt;で囲むと&lt;code&gt;KANI said "hoge"&lt;/code&gt;とはなりませんでした．&lt;/p&gt;
&lt;div style="margin-bottom: 70px;"&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;"&lt;/code&gt;を含む文字を&lt;code&gt;'&lt;/code&gt;で囲むと・・・&lt;/p&gt;
&lt;pre class="command-line" data-prompt="%"&gt;
&lt;code class="language-bash"&gt;
echo 'KANI said "hoge"'
&lt;/code&gt;
&lt;/pre&gt;
&lt;pre style="margin-bottom: 20px;"&gt;
KANI said "hoge" 
&lt;/pre&gt;

&lt;p&gt;シングルクォートで囲むと意図どおりに表示されました．&lt;/p&gt;
&lt;div style="margin-bottom: 70px;"&gt;&lt;/div&gt;

&lt;h3 id="_6"&gt;バッククォート&lt;/h3&gt;
&lt;p&gt;バッククォート（&lt;code&gt;`&lt;/code&gt;）は先の例のとおり，コマンドを囲むことでそのコマンドを実行して置き換えます．&lt;/p&gt;
&lt;pre class="command-line" data-prompt="%"&gt;
&lt;code class="language-bash"&gt;
echo "こんにちは`echo KANI`さん"
&lt;/code&gt;
&lt;/pre&gt;
&lt;pre style="margin-bottom: 20px;"&gt;
こんにちはKANIさん
&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;`&lt;/code&gt;で囲まれた部分のコマンドが実行されて&lt;code&gt;KANI&lt;/code&gt;に置き換わり表示されています．&lt;br&gt;
バッククォートは色々と応用の幅があるので記法を知っておくと便利です．&lt;/p&gt;
&lt;div style="margin-bottom: 70px;"&gt;&lt;/div&gt;

&lt;h3 id="_7"&gt;バックスラッシュ&lt;/h3&gt;
&lt;p&gt;バックスラッシュ（&lt;code&gt;\&lt;/code&gt;）は特殊文字を解釈させないために使用します．&lt;br&gt;
具体的にはバックスラッシュ直後の特殊文字の意味を剥奪します．&lt;/p&gt;
&lt;pre class="command-line" data-prompt="%"&gt;
&lt;code class="language-bash"&gt;
KANI=100
echo $KANI
&lt;/code&gt;
&lt;/pre&gt;
&lt;pre style="margin-bottom: 50px;"&gt;
100
&lt;/pre&gt;

&lt;p&gt;上記のコードでは&lt;code&gt;$&lt;/code&gt;をつけて変数展開を行っています．&lt;br&gt;
この&lt;code&gt;$&lt;/code&gt;の意味を取り除いてただの&lt;code&gt;$&lt;/code&gt;とするには以下のようにします．&lt;/p&gt;
&lt;pre class="command-line" data-prompt="%"&gt;
&lt;code class="language-bash"&gt;
echo \$KANI
&lt;/code&gt;
&lt;/pre&gt;
&lt;pre style="margin-bottom: 50px;"&gt;
$KANI
&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;\&lt;/code&gt;を&lt;code&gt;$&lt;/code&gt;の前につけることで&lt;code&gt;$&lt;/code&gt;の意味を剥奪しています．
結果として&lt;code&gt;$&lt;/code&gt;が特殊文字として解釈されないためそのまま表示されます．&lt;/p&gt;
&lt;p&gt;ところで，バックスラッシュは直後の文字にしか効果がありません．&lt;br&gt;
そのため，以下のように記載すると最初の&lt;code&gt;$&lt;/code&gt;は意味を剥奪されますが，次の&lt;code&gt;$&lt;/code&gt;は特殊文字として機能するため変数が展開されます．&lt;/p&gt;
&lt;pre class="command-line" data-prompt="%"&gt;
&lt;code class="language-bash"&gt;
echo \$$KANI
&lt;/code&gt;
&lt;/pre&gt;
&lt;pre style="margin-bottom: 50px;"&gt;
$100
&lt;/pre&gt;

&lt;p&gt;ちなみに&lt;code&gt;\&lt;/code&gt;を２つ使って以下のように書けば両方の&lt;code&gt;$&lt;/code&gt;の意味が剥奪されます．&lt;/p&gt;
&lt;pre class="command-line" data-prompt="%"&gt;
&lt;code class="language-bash"&gt;
echo \$\$KANI
&lt;/code&gt;
&lt;/pre&gt;
&lt;pre style="margin-bottom: 50px;"&gt;
$$KANI
&lt;/pre&gt;

&lt;p&gt;ただし，上記のような結果（&lt;code&gt;$$KANI&lt;/code&gt;）を得たいのであれば&lt;code&gt;echo '$$KANI'&lt;/code&gt;で事足ります．&lt;br&gt;
複数のバッククォートを使う場合は正規表現などでよく見られるので，気になる方は調べてみましょう．&lt;/p&gt;
&lt;h2 id="_8"&gt;ひとこと&lt;/h2&gt;
&lt;p&gt;本記事ではクォテーションに関する基本的な部分を解説しました．&lt;br&gt;
クォテーションの使い方は様々なものがあるため，色々とパターンを学んでいきたいですね．&lt;/p&gt;
&lt;div style="margin-bottom: 100px;"&gt;&lt;/div&gt;

&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;例外については後述&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;&lt;code&gt;echo $KANI&lt;/code&gt;と&lt;code&gt;echo "$KANI"&lt;/code&gt;はどちらも同じですが・・・理由は後述&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:3"&gt;
&lt;p&gt;&lt;code&gt;date&lt;/code&gt;を囲んでいるのはバッククォートです．&amp;#160;&lt;a class="footnote-backref" href="#fnref:3" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Mac-Linux"></category><category term="zsh"></category><category term="shellscript"></category></entry><entry><title>【Python】入れ子になったタプルの型ヒントの書き方</title><link href="https://www.tecrab.com/articles/python-type-hint-tuple.html" rel="alternate"></link><published>2022-03-05T00:00:00+09:00</published><updated>2022-10-05T00:00:00+09:00</updated><author><name>かに</name></author><id>tag:www.tecrab.com,2022-03-05:/articles/python-type-hint-tuple.html</id><summary type="html">&lt;p&gt;Pythonの型ヒントに関して，入れ子の構造になっているタプルの型ヒントの書き方を紹介します．&lt;/p&gt;</summary><content type="html">&lt;div class="admonition abstract"&gt;
&lt;p&gt;本記事はPythonの型ヒントの書き方に関する記事です．&lt;br&gt;
入れ子の構造になっているタプルの型ヒントの書き方についてまとめています．&lt;/p&gt;
&lt;/div&gt;
&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;目次&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;タプルの型ヒント&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_2"&gt;省略形&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;ひとこと&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="_1"&gt;タプルの型ヒント&lt;/h2&gt;
&lt;p&gt;タプルを定義し，定義したタプルを引数に取る関数を作成しています．&lt;br&gt;
（関数の機能としては&lt;code&gt;for&lt;/code&gt;文でタプルから値を取得して出力するだけです）&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;
from typing import Tuple

t1 = ('えび', 'かに', 'ほたて')

def t1_func(t1: Tuple[str, str, str]) -&gt; None:
    for t in t1:
        print(t)

t1_func(t1)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre style="margin-bottom: 30px;"&gt;
えび
かに
ほたて
&lt;/pre&gt;

&lt;p&gt;型ヒントは&lt;code&gt;Tuple[str, str, str]&lt;/code&gt;です．&lt;br&gt;
引数として与えられるタプル（今回は変数&lt;code&gt;t1&lt;/code&gt;）の構造を書いています．&lt;/p&gt;
&lt;div class="admonition info-box"&gt;
&lt;p class="admonition-title"&gt;参考&lt;/p&gt;
&lt;p&gt;この関数に戻り値はないので，戻り値の表記は&lt;code&gt;None&lt;/code&gt;（戻り値なし）を指定しています．&lt;/p&gt;
&lt;/div&gt;
&lt;h3 id="_2"&gt;省略形&lt;/h3&gt;
&lt;p&gt;タプルの値が同じデータ型の場合は省略した表記をすることも可能です．&lt;br&gt;
省略した型ヒントの例は以下の関数です．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;
t2 = (('哺乳類', ('馬', '牛')), ('魚類', ('マグロ', 'イトウ')))

def t2_func(t2: Tuple[Tuple[str, Tuple[str, str]], ...]) -&gt; None:
    for category, animals in t2:
        for animal in animals:
            print(category, animal)
t2_func(t2)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre style="margin-bottom: 30px;"&gt;
哺乳類 馬
哺乳類 牛
魚類 マグロ
魚類 イトウ
&lt;/pre&gt;

&lt;p&gt;いきなり複雑になりましたが，タプルの入れ子構造を表現しているだけです，&lt;br&gt;
&lt;code&gt;()&lt;/code&gt;の範囲を確認するとよくわかります．&lt;/p&gt;
&lt;p&gt;なお&lt;code&gt;Tuple[Tuple[str, Tuple[str, str]], ...]&lt;/code&gt;の&lt;code&gt;, ...&lt;/code&gt;部分は同じ構造が複数並ぶためその略記です．&lt;/p&gt;
&lt;p&gt;型ヒントは慣れるとわかりやすいのですが，上記のように複雑な場合であれば微妙ですよね．&lt;/p&gt;
&lt;h2 id="_3"&gt;ひとこと&lt;/h2&gt;
&lt;p&gt;複雑な関数には型ヒントをつけておくと読みやすいです．&lt;br&gt;
&lt;code&gt;mypy&lt;/code&gt;&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;を使いながら適宜チェックすると尚良ですね．&lt;/p&gt;
&lt;div class="admonition explanation"&gt;
&lt;p class="admonition-title"&gt;関連記事&lt;/p&gt;
&lt;p&gt;&lt;code&gt;mypy&lt;/code&gt;や型ヒントに関連する記事はこちらです．
&lt;ul style="margin: -5px 0px 0px 15px;"&gt;
    &lt;li&gt;
    &lt;a href="https://www.revalab.net/python-type-hint-multi-return/" rel="noopener noreferrer" target="_blank"&gt;【Python】関数の戻り値が複数ある場合の型ヒントの書き方&lt;/a&gt;
    &lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div style="margin-bottom: 100px;"&gt;&lt;/div&gt;

&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;型ヒントの記法をチェックする外部ライブラリ&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Python"></category><category term="Python"></category><category term="型ヒント"></category></entry><entry><title>【Python】関数の戻り値が複数ある場合の型ヒントの書き方</title><link href="https://www.tecrab.com/articles/python-type-hint-multi-return.html" rel="alternate"></link><published>2022-02-26T00:00:00+09:00</published><updated>2022-10-05T00:00:00+09:00</updated><author><name>かに</name></author><id>tag:www.tecrab.com,2022-02-26:/articles/python-type-hint-multi-return.html</id><summary type="html">&lt;p&gt;Pythonの型ヒントに関して，関数の戻り値が複数ある場合の書き方を解説しています．&lt;/p&gt;</summary><content type="html">&lt;div class="admonition abstract"&gt;
&lt;p&gt;本記事はPythonの型ヒントの書き方に関する記事です．&lt;br&gt;
以下の２パターンについて確認します．
&lt;ul style="margin: -5px 0px 0px 15px;"&gt;
    &lt;li&gt;関数の戻り値が複数ある場合&lt;/li&gt;
    &lt;li&gt;引数によって戻り値が変わる場合&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;目次&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;関数の戻り値が複数ある場合&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_2"&gt;型ヒントのチェック&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;引数によって戻り値が変わる場合&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_4"&gt;参考&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_5"&gt;ひとこと&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="_1"&gt;関数の戻り値が複数ある場合&lt;/h2&gt;
&lt;p&gt;戻り値が２つある場合の関数を見てみましょう．&lt;br&gt;
何らかの文字列を引数として与えると，引数の文字と引数の文字数が返ってくる関数です．&lt;/p&gt;
&lt;pre style="margin-bottom: 50px"&gt;&lt;code class="language-python"&gt;
# 型ヒントがない関数
def return_2values(moji):
    return moji, len(moji)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この関数を実行して戻ってくる値を見てみます．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;
result = return_2values('管理人')
print(result) # 戻り値
print(type(result)) # 戻り値のデータ型
print([type(i) for i in result]) # tuple内のデータ型
&lt;/code&gt;&lt;/pre&gt;
&lt;pre style="margin-bottom: 30px;"&gt;
('管理人', 3)
&amp;lt;class 'tuple'&amp;gt;
[&amp;lt;class 'str'&amp;gt;, &amp;lt;class 'int'&amp;gt;]
&lt;/pre&gt;

&lt;p&gt;それぞれの結果は以下のとおりです．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;戻り値：&lt;code&gt;return moji, len(moji)&lt;/code&gt;の結果です．&lt;/li&gt;
&lt;li&gt;戻り値のデータ型：&lt;code&gt;tuple&lt;/code&gt;となっています．&lt;/li&gt;
&lt;li&gt;tuple内のデータ型：それぞれ&lt;code&gt;str&lt;/code&gt;型, &lt;code&gt;int&lt;/code&gt;型（=&lt;code&gt;'管理人', 3&lt;/code&gt;）です．&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上記を踏まえて，型ヒントをつけてみましょう．&lt;br&gt;
型ヒントをつけるにはPython組み込みの&lt;code&gt;typing&lt;/code&gt;モジュールを使用します．&lt;/p&gt;
&lt;pre style="margin-bottom: 30px;"&gt;&lt;code class="language-python"&gt;
from typing import Tuple

# 型ヒントをつけた関数
def return_2values(moji: str) -&gt; Tuple[str, int]:
    return moji, len(moji)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;型ヒントをつけることで以下のような内容を表現しています．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;引数に取るデータは&lt;code&gt;str&lt;/code&gt;型&lt;/li&gt;
&lt;li&gt;この関数を実行した結果の戻り値は&lt;code&gt;tuple&lt;/code&gt;で要素は&lt;code&gt;str&lt;/code&gt;型と&lt;code&gt;int&lt;/code&gt;型&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;この程度の関数であれば型ヒントがなくてもわかりますが，複雑な関数などは型ヒントがあると理解の助けになります．&lt;/p&gt;
&lt;h3 id="_2"&gt;型ヒントのチェック&lt;/h3&gt;
&lt;p&gt;型ヒントの記法を判定する外部ライブラリ&lt;code&gt;mypy&lt;/code&gt;を使って関数をチェックしてみましょう．&lt;/p&gt;
&lt;div class="admonition info-box"&gt;
&lt;p class="admonition-title"&gt;参考&lt;/p&gt;
&lt;p&gt;&lt;code&gt;mypy&lt;/code&gt;をインストールしていない場合は以下のコマンドでインストール可能です．
&lt;pre class="command-line" data-prompt="%"&gt;
&lt;code class="language-bash"&gt;
pip install mypy
&lt;/code&gt;
&lt;/pre&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div style="margin-bottom: 30px;"&gt;&lt;/div&gt;

&lt;p&gt;確認したい関数を&lt;code&gt;.py&lt;/code&gt;ファイルに保存して以下の&lt;code&gt;mypy&lt;/code&gt;コマンドでチェックを行います．&lt;br&gt;
（以下の例では&lt;code&gt;hoge.py&lt;/code&gt;に型ヒント付きの関数が記載されている想定です&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;）&lt;/p&gt;
&lt;pre class="command-line" data-prompt="%"&gt;
&lt;code class="language-bash"&gt;
mypy hoge.py
&lt;/code&gt;
&lt;/pre&gt;
&lt;pre style="margin-bottom: 50px;"&gt;
Success: no issues found in 1 source file
&lt;/pre&gt;

&lt;p&gt;記法上，問題ないことが確認できました！&lt;br&gt;
（もし何らかの誤りがあると&lt;code&gt;error&lt;/code&gt;が発生します）&lt;/p&gt;
&lt;h2 id="_3"&gt;引数によって戻り値が変わる場合&lt;/h2&gt;
&lt;p&gt;条件分岐などで関数の戻り値が変わるパターンです．&lt;br&gt;
以下の関数は引数の文字数に応じて文字列（&lt;code&gt;str&lt;/code&gt;型）か文字数（&lt;code&gt;int&lt;/code&gt;型）を返す関数です．&lt;/p&gt;
&lt;pre style="margin-bottom: 30px;"&gt;&lt;code class="language-python"&gt;
from typing import Tuple, Union

def return_diff_values(moji: str) -&gt; Union[str, int]:
    if len(moji) &gt; 5:
        return moji
    else:
        return len(moji)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このように条件に応じて戻り値のデータ型が変わる場合，戻り値の型ヒントは以下のようにします．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Union[戻り値のパターン①, パターン②, ...]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上記の関数の場合は&lt;code&gt;str&lt;/code&gt;型か&lt;code&gt;int&lt;/code&gt;型を返すので&lt;code&gt;Union[str, int]&lt;/code&gt;としています．&lt;br&gt;
（関数の実行によって戻ってくる値は&lt;code&gt;str&lt;/code&gt;か&lt;code&gt;int&lt;/code&gt;という表現です）&lt;/p&gt;
&lt;h3 id="_4"&gt;参考&lt;/h3&gt;
&lt;p&gt;以下は上記の関数の実行例です．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;
# 「管理人」は3文字なので文字数が返ってくる
print(return_diff_values('管理人'))
print(type(return_diff_values('管理人')))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre style="margin-bottom: 40px;"&gt;
3
&amp;lt;class 'int'&amp;gt;
&lt;/pre&gt;

&lt;pre&gt;&lt;code class="language-python"&gt;
# 「管理人のかに」は6文字なので文字が返ってくる
print(return_diff_values('管理人のかに'))
print(type(return_diff_values('管理人のかに')))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre style="margin-bottom: 90px;"&gt;
管理人のかに
&amp;lt;class 'str'&amp;gt;
&lt;/pre&gt;

&lt;h2 id="_5"&gt;ひとこと&lt;/h2&gt;
&lt;p&gt;複雑な関数には型ヒントをつけよう・・・&lt;br&gt;
でも記法に従っていると逆にごちゃごちゃすることもあるので，どこまでやるかは考えものですね・・・&lt;/p&gt;
&lt;div style="margin-bottom: 100px;"&gt;&lt;/div&gt;

&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;以下のコマンドは&lt;code&gt;mypy&lt;/code&gt;コマンドを実行する場所が&lt;code&gt;hoge.py&lt;/code&gt;と同じ階層であることが前提です．&lt;code&gt;hoge.py&lt;/code&gt;が別の場所にある場合はそのpathを指定してください（例：&lt;code&gt;mypy ./xxx/hoge.py&lt;/code&gt;）&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Python"></category><category term="Python"></category><category term="型ヒント"></category></entry><entry><title>DELLモニターで画面がピンクになる原因と対策（Mac×DELL S2722QC）</title><link href="https://www.tecrab.com/articles/dell-monitor-pink.html" rel="alternate"></link><published>2022-02-11T00:00:00+09:00</published><updated>2022-09-03T00:00:00+09:00</updated><author><name>かに</name></author><id>tag:www.tecrab.com,2022-02-11:/articles/dell-monitor-pink.html</id><summary type="html">&lt;p&gt;DELLモニターで画面がピンクになる原因と対策について解説しています．&lt;/p&gt;</summary><content type="html">&lt;div class="admonition abstract"&gt;
&lt;p&gt;DELLのモニター(S2722QC)で画面の一部がピンクになる現象が起きました．&lt;br&gt;
この現象の原因と対策についてまとめています．&lt;/p&gt;
&lt;/div&gt;
&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;目次&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;イメージ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pc"&gt;モニター・PCの詳細&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;概要&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;現象&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_4"&gt;原因&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_5"&gt;ひとこと&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="_1"&gt;イメージ&lt;/h2&gt;
&lt;p&gt;なぜかピンクになってしまった画面出力を元のグレーに戻したい・・・&lt;br&gt;
&lt;img src="/images/dell-monitor-pink/dell-monitor-pink_00.png" width="600" height="197"&gt;&lt;/p&gt;
&lt;h2 id="pc"&gt;モニター・PCの詳細&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;モニター名：Dell 27インチ4K UHD USB-Cモニター S2722QC&lt;/li&gt;
&lt;li&gt;MacBook (Retina, 12-inch, Early 2016)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="admonition info-box"&gt;
&lt;p class="admonition-title"&gt;参考&lt;/p&gt;
&lt;p&gt;モニターの詳細情報：&lt;a href="https://www.dell.com/ja-jp/shop/dell-27%E3%82%A4%E3%83%B3%E3%83%814k-uhd-usb-c%E3%83%A2%E3%83%8B%E3%82%BF%E3%83%BC-s2722qc/apd/210-bcdd/%E3%83%A2%E3%83%8B%E3%82%BF%E3%83%BC-%E3%83%A2%E3%83%8B%E3%82%BF%E3%83%BC%E3%82%A2%E3%82%AF%E3%82%BB%E3%82%B5%E3%83%AA%E3%83%BC" rel="noopener noreferrer" target="_blank"&gt;Dell 27インチ4K UHD USB-Cモニター S2722QC&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id="_2"&gt;概要&lt;/h2&gt;
&lt;p&gt;モニターを購入してしばらくは問題なく使えていたのですが，ある日いつもグレーの部分が何故かピンクに・・・&lt;/p&gt;
&lt;p&gt;色々とモニター側で設定をいじって，ようやく原因がわかったので書き留めます．&lt;/p&gt;
&lt;h2 id="_3"&gt;現象&lt;/h2&gt;
&lt;p&gt;もともとは左のように見えていたのですが，右のようにピンクになっていました．&lt;br&gt;
&lt;img src="/images/dell-monitor-pink/dell-monitor-pink_01.png" width="600" height="242"&gt;&lt;/p&gt;
&lt;h2 id="_4"&gt;原因&lt;/h2&gt;
&lt;p&gt;色などの設定ではなく「&lt;strong&gt;輝度/コントラスト&lt;/strong&gt;」が原因でした．&lt;br&gt;
輝度/コントラストをデフォルトから少し変更して「輝度 90%・コントラスト 80%」としていたのですが，これだとグレー部分がピンクになります．&lt;br&gt;
&lt;img src="/images/dell-monitor-pink/dell-monitor-pink_02.png" width="400" height="242"&gt;&lt;/p&gt;
&lt;p&gt;これを「輝度 90%・コントラスト &lt;strong&gt;75&lt;/strong&gt;%」に変更するとピンクではなくグレーになりました！&lt;br&gt;
&lt;img src="/images/dell-monitor-pink/dell-monitor-pink_03.png" width="400" height="240"&gt;&lt;/p&gt;
&lt;p&gt;色が変なら「コントラスト」を適当に調整するといいかもしれません．&lt;/p&gt;
&lt;div class="admonition info-box"&gt;
&lt;p class="admonition-title"&gt;参考&lt;/p&gt;
&lt;p&gt;管理人の色設定は以下のとおりです.（たぶんデフォルト）&lt;br&gt;
（輝度/コントラストはそのままで）ここを色々といじってもグレーがピンクになる現象はそのままでした．&lt;br&gt;
&lt;img src="/images/dell-monitor-pink/dell-monitor-pink_04.png" width="400" height="161" style="margin: 20px 10px;"&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id="_5"&gt;ひとこと&lt;/h2&gt;
&lt;p&gt;コントラストが原因で色が変わるとは考えず，しばらく悩んでしまいました．&lt;br&gt;
知っている人からしたら当たり前のことで悩んでいたのかも・・・&lt;/p&gt;
&lt;p&gt;同様の現象で悩んでいる方の参考になれば幸いです！&lt;/p&gt;
&lt;div style="margin-bottom: 100px;"&gt;&lt;/div&gt;</content><category term="Mac"></category><category term="雑記"></category></entry><entry><title>【Python】辞書のキー有無で条件分岐：get メソッド</title><link href="https://www.tecrab.com/articles/python-dict-get.html" rel="alternate"></link><published>2022-02-06T00:00:00+09:00</published><updated>2022-09-04T00:00:00+09:00</updated><author><name>かに</name></author><id>tag:www.tecrab.com,2022-02-06:/articles/python-dict-get.html</id><summary type="html">&lt;p&gt;辞書のキーを使って条件分岐をする方法です．&lt;/p&gt;</summary><content type="html">&lt;div class="admonition abstract"&gt;
&lt;p&gt;本記事では辞書のキーを使って条件分岐をする方法をご紹介します．&lt;/p&gt;
&lt;/div&gt;
&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;目次&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;事前準備&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#2"&gt;辞書のキーで値を取得する方法（２つ）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#2_1"&gt;２つの方法の違い&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;辞書のキー有無で条件分岐&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;ひとこと&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="_1"&gt;事前準備&lt;/h2&gt;
&lt;p&gt;まずはサンプルとなる辞書を作成します．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;
d = {'ほたて': 1000, 'えび': 200, 'かに': 30}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="2"&gt;辞書のキーで値を取得する方法（２つ）&lt;/h3&gt;
&lt;p&gt;辞書のキーを指定してその値を取得する方法は以下の２種類があります．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;辞書['キー名']&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;辞書.get('キー名')&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;それぞれの方法を使って「ほたて」キーの値を取得してみます．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;
# []を使用してキーの値を取得
print(d['ほたて'])

# getメソッドでキーの値を取得
print(d.get('ほたて'))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre style="margin-bottom: 30px;"&gt;
1000
1000
&lt;/pre&gt;

&lt;p&gt;それぞれ「ほたて」キーの値である&lt;code&gt;1000&lt;/code&gt;が取得できていますね．&lt;br&gt;
なお&lt;code&gt;get&lt;/code&gt;メソッドはPython組み込みのメソッドです．&lt;/p&gt;
&lt;h3 id="2_1"&gt;２つの方法の違い&lt;/h3&gt;
&lt;p&gt;両者の違いは指定したキーが存在しなかった際の挙動です．&lt;br&gt;
&lt;code&gt;辞書['キー名']&lt;/code&gt;では指定したキーが存在しなかった場合&lt;code&gt;KeyError&lt;/code&gt;となってしまいます．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;
# []を使用する場合，存在しないキーを指定するとKeyError
print(d['まぐろ'])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre style="margin-bottom: 90px;"&gt;
KeyError: 'まぐろ'
&lt;/pre&gt;

&lt;p&gt;一方で&lt;code&gt;get&lt;/code&gt;メソッドを使用した方法では指定したキーが存在しない場合&lt;code&gt;None&lt;/code&gt;を返します．&lt;br&gt;
（&lt;code&gt;KeyError&lt;/code&gt;は発生しません）&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;
# getメソッドの場合はKeyErrorとはならず，Noneを返す
print(d.get('まぐろ'))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre style="margin-bottom: 90px;"&gt;
None
&lt;/pre&gt;

&lt;p&gt;また&lt;code&gt;get&lt;/code&gt;メソッドでは指定したキーが存在しない場合に返す値を指定することができます.&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;pre style="margin-bottom: 20px;"&gt;&lt;code class="language-python"&gt;
# getメソッドの第二引数にはキーが存在しない際の返り値を指定できる
print(d.get('まぐろ', '「まぐろ」キーがありません...'))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre style="margin-bottom: 90px;"&gt;
「まぐろ」キーがありません...
&lt;/pre&gt;

&lt;h3 id="_2"&gt;辞書のキー有無で条件分岐&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;get&lt;/code&gt;メソッドを使用し，キーが存在しない場合は&lt;code&gt;False&lt;/code&gt;を返すようなコードを作成します．&lt;br&gt;
そのコードを&lt;code&gt;if&lt;/code&gt;文の条件式に入れて「キーが存在すれば・・・」という処理が可能です．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;
# 辞書の定義
d = {'まぐろ': 1000, 'えび': 200, 'かに': 30}

# if文と組み合わせてキーの有無に応じた条件分岐
if d.get('まぐろ', False):
    d['まぐろ'] = 1200

print(d)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre style="margin-bottom: 60px;"&gt;
{'まぐろ': 1200, 'えび': 200, 'かに': 30}
&lt;/pre&gt;

&lt;div class="admonition explanation"&gt;
&lt;p class="admonition-title"&gt;解説&lt;/p&gt;
&lt;p&gt;&lt;code&gt;if&lt;/code&gt;文の条件式で「まぐろキーが存在すれば」としています．&lt;br&gt;
もしまぐろキーがない場合は&lt;code&gt;get&lt;/code&gt;メソッドによって&lt;code&gt;False&lt;/code&gt;が返されるので&lt;code&gt;if&lt;/code&gt;文内の処理は実行されません．&lt;/p&gt;
&lt;p&gt;今回の辞書には「まぐろキー」が存在するため&lt;code&gt;if&lt;/code&gt;文内の処理が実行されています.&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2"&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id="_3"&gt;ひとこと&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;get&lt;/code&gt;メソッドは便利ですね．&lt;br&gt;
色々な情報を辞書に詰め込んで処理することが多く，条件によってはキーがあったりなかったりするのでこの方法を使っています．&lt;/p&gt;
&lt;div style="margin-bottom: 100px;"&gt;&lt;/div&gt;

&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;デフォルトでは&lt;code&gt;None&lt;/code&gt;を返します．上記のコードではキーが存在しない場合に返す値を指定していないので&lt;code&gt;None&lt;/code&gt;が返ってきています．&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;「まぐろキー」の値が&lt;code&gt;1000&lt;/code&gt;→&lt;code&gt;1200&lt;/code&gt;になりました．&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Python"></category><category term="Python"></category></entry><entry><title>PostgreSQLで文字列を結合（CONCAT, CONCAT_WS）</title><link href="https://www.tecrab.com/articles/sql-concat-ws-functions.html" rel="alternate"></link><published>2022-01-26T00:00:00+09:00</published><updated>2022-09-12T00:00:00+09:00</updated><author><name>かに</name></author><id>tag:www.tecrab.com,2022-01-26:/articles/sql-concat-ws-functions.html</id><summary type="html">&lt;p&gt;PostgreSQLで文字列を結合する方法です．&lt;/p&gt;</summary><content type="html">&lt;div class="admonition abstract"&gt;
&lt;p&gt;本記事では以下の内容を見ていきます．&lt;br&gt;
&lt;ul style="margin: -5px 0px 0px 15px;"&gt;
  &lt;li&gt;&lt;code&gt;||&lt;/code&gt;演算子，&lt;code&gt;CONCAT()&lt;/code&gt;を使用した文字列の結合&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;||&lt;/code&gt;演算子，&lt;code&gt;CONCAT()&lt;/code&gt;の違い&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;CONCAT_WS()&lt;/code&gt;を使用した文字列の結合&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;
&lt;p&gt;例示を見ながら確認していきましょう．&lt;/p&gt;
&lt;/div&gt;
&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;目次&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#postgresql"&gt;PostgreSQLのバージョン&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_1"&gt;事前準備&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_2"&gt;||演算子による文字列結合&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#concat"&gt;CONCAT()による文字列結合&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#concat_ws"&gt;CONCAT_WS()による文字列結合&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#concat_1"&gt;||演算子とCONCAT()の違い&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_5"&gt;ひとこと&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="postgresql"&gt;PostgreSQLのバージョン&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;psql (PostgreSQL) 14.5&lt;/code&gt;&lt;/p&gt;
&lt;h2 id="_1"&gt;事前準備&lt;/h2&gt;
&lt;p&gt;まずはサンプルのテーブルを作成します．&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-sql"&gt;
CREATE TABLE str_table (
    id serial PRIMARY KEY, -- 番号
    str_1 VARCHAR(5), 
    str_2 VARCHAR(5)
);

INSERT INTO str_table (str_1, str_2)
VALUES
    ('あ', 'い'),
    ('App', 'le'),
    ('GH', NULL)
;

SELECT * FROM str_table;
&lt;/code&gt;&lt;/pre&gt;

&lt;div class="nb-html-output"&gt;&lt;table style="margin-bottom: 90px;"&gt;
    &lt;tbody&gt;&lt;tr&gt;
        &lt;th&gt;id&lt;/th&gt;
        &lt;th&gt;str_1&lt;/th&gt;
        &lt;th&gt;str_2&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;1&lt;/td&gt;
        &lt;td&gt;あ&lt;/td&gt;
        &lt;td&gt;い&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;2&lt;/td&gt;
        &lt;td&gt;App&lt;/td&gt;
        &lt;td&gt;le&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;3&lt;/td&gt;
        &lt;td&gt;GH&lt;/td&gt;
        &lt;td&gt;[null]&lt;/td&gt;
    &lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;

&lt;h3 id="_2"&gt;&lt;code&gt;||&lt;/code&gt;演算子による文字列結合&lt;/h3&gt;
&lt;p&gt;まずは&lt;code&gt;||&lt;/code&gt;演算子を見てみましょう．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-sql"&gt;
SELECT
    str_1,
    str_2,
    str_1 || ' ' || str_2 AS str_1_and_str_2
FROM
    str_table;
&lt;/code&gt;&lt;/pre&gt;

&lt;div class="nb-html-output"&gt;&lt;table style="margin-bottom: 30px;"&gt;
    &lt;tbody&gt;&lt;tr&gt;
        &lt;th&gt;str_1&lt;/th&gt;
        &lt;th&gt;str_2&lt;/th&gt;
        &lt;th&gt;str_1_and_str_2&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;あ&lt;/td&gt;
        &lt;td&gt;い&lt;/td&gt;
        &lt;td&gt;あ い&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;App&lt;/td&gt;
        &lt;td&gt;le&lt;/td&gt;
        &lt;td&gt;App le&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;GH&lt;/td&gt;
        &lt;td&gt;[null]&lt;/td&gt;
        &lt;td&gt;[null]&lt;/td&gt;
    &lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;結合したい文字列（を含む列）を&lt;code&gt;||&lt;/code&gt;演算子で繋げて結合しています．&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;str_1 || 任意の文字列(半角スペース) || str_2&lt;/code&gt;としているので，結果としては&lt;code&gt;str_1&lt;/code&gt;,&lt;code&gt;str_2&lt;/code&gt;の文字列が半角スペースで結合されています．&lt;br&gt;
なお，&lt;code&gt;||&lt;/code&gt;演算子を追加すれば好きなだけ文字列を結合することができます．&lt;/p&gt;
&lt;h3 id="concat"&gt;&lt;code&gt;CONCAT()&lt;/code&gt;による文字列結合&lt;/h3&gt;
&lt;p&gt;次に&lt;code&gt;CONCAT()&lt;/code&gt;を使用した文字列結合を見てみましょう．&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-sql"&gt;
SELECT
    str_1,
    str_2,
    CONCAT(str_1, ' ', str_2) AS str_1_and_str_2
FROM
    str_table;
&lt;/code&gt;&lt;/pre&gt;

&lt;div class="nb-html-output"&gt;&lt;table style="margin-bottom: 30px;"&gt;
    &lt;tbody&gt;&lt;tr&gt;
        &lt;th&gt;str_1&lt;/th&gt;
        &lt;th&gt;str_2&lt;/th&gt;
        &lt;th&gt;str_1_and_str_2&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;あ&lt;/td&gt;
        &lt;td&gt;い&lt;/td&gt;
        &lt;td&gt;あ い&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;App&lt;/td&gt;
        &lt;td&gt;le&lt;/td&gt;
        &lt;td&gt;App le&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;GH&lt;/td&gt;
        &lt;td&gt;[null]&lt;/td&gt;
        &lt;td&gt;GH &lt;/td&gt;
    &lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;CONCAT()&lt;/code&gt;は引数に指定した文字列が順に結合されます．&lt;br&gt;
なお&lt;code&gt;||&lt;/code&gt;演算子と同様に引数は好きなだけ指定できます．&lt;/p&gt;
&lt;h3 id="concat_ws"&gt;&lt;code&gt;CONCAT_WS()&lt;/code&gt;による文字列結合&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;CONCAT_WS()&lt;/code&gt;は基本的に&lt;code&gt;CONCAT()&lt;/code&gt;と同じです．&lt;br&gt;
両者の違いはセパレーター（区切り文字）の指定可否とNULL存在時の挙動&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;です.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-sql"&gt;
SELECT
    str_1,
    str_2,
    CONCAT_WS(' ', str_1, str_2)
FROM
    str_table;
&lt;/code&gt;&lt;/pre&gt;

&lt;div class="nb-html-output"&gt;&lt;table style="margin-bottom: 30px;"&gt;
    &lt;tbody&gt;&lt;tr&gt;
        &lt;th&gt;str_1&lt;/th&gt;
        &lt;th&gt;str_2&lt;/th&gt;
        &lt;th&gt;concat_ws&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;あ&lt;/td&gt;
        &lt;td&gt;い&lt;/td&gt;
        &lt;td&gt;あ い&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;App&lt;/td&gt;
        &lt;td&gt;le&lt;/td&gt;
        &lt;td&gt;App le&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;GH&lt;/td&gt;
        &lt;td&gt;[null]&lt;/td&gt;
        &lt;td&gt;GH&lt;/td&gt;
    &lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;CONCAT_WS()&lt;/code&gt;は第一引数にセパレーターを指定し，第二引数以降はセパレーターで区切りたい文字列を指定します.&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2"&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;例示では&lt;code&gt;' '&lt;/code&gt;（＝半角スペース）をセパレーターとしているため，その後の２つの引数が半角スペースで区切られて結合しています．&lt;/p&gt;
&lt;div class="admonition info-box"&gt;
&lt;p class="admonition-title"&gt;参考&lt;/p&gt;
&lt;p&gt;&lt;code&gt;CONCAT_WS()&lt;/code&gt;の&lt;code&gt;WS&lt;/code&gt;は &lt;span style="text-decoration:underline";&gt;w&lt;/span&gt;ith &lt;span style="text-decoration:underline";&gt;s&lt;/span&gt;eparator に由来します．&lt;/p&gt;
&lt;/div&gt;
&lt;h3 id="concat_1"&gt;&lt;code&gt;||&lt;/code&gt;演算子と&lt;code&gt;CONCAT()&lt;/code&gt;の違い&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;||&lt;/code&gt;演算子と&lt;code&gt;CONCAT()&lt;/code&gt;（&lt;code&gt;CONCAT_WS()&lt;/code&gt;）は文字列を結合するものですが，違いは以下のとおりです．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;NULLの処理&lt;/li&gt;
&lt;li&gt;処理速度&lt;/li&gt;
&lt;li&gt;結果のカラム名&lt;/li&gt;
&lt;/ul&gt;
&lt;div style="margin-bottom: 50px;"&gt;&lt;/div&gt;

&lt;h5 id="null"&gt;NULLの処理&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;||&lt;/code&gt;演算子は結合文字列にNULLが含まれている場合，他の文字に関わらずNULLを返します．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-sql"&gt;
SELECT 'A' || ',' || NULL || ',' || 'C'
&lt;/code&gt;&lt;/pre&gt;

&lt;div class="nb-html-output"&gt;&lt;table style="margin-bottom: 90px;"&gt;
    &lt;tbody&gt;&lt;tr&gt;
        &lt;th&gt;?column?&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;[null]&lt;/td&gt;
    &lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;一方&lt;code&gt;CONCAT()&lt;/code&gt;はNULLを無視して結合するため，NULL以外の指定された文字列を結合して返します．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-sql"&gt;
SELECT CONCAT('A', ',', NULL, ',', 'C')
&lt;/code&gt;&lt;/pre&gt;

&lt;div class="nb-html-output"&gt;&lt;table style="margin-bottom: 90px;"&gt;
    &lt;tbody&gt;&lt;tr&gt;
        &lt;th&gt;concat&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;A,,C&lt;/td&gt;
    &lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;CONCAT()&lt;/code&gt;は文字列を単純に結合するので，結果は上記のように「&lt;strong&gt;A , , C&lt;/strong&gt;」となります．&lt;br&gt;
一方で&lt;code&gt;CONCAT_WS()&lt;/code&gt;の場合は文字同士をセパレーターで区切るという指定をしているため，NULLがあっても余分なコンマ（区切り）は付与されません．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-sql"&gt;
SELECT CONCAT_WS(',', 'A', NULL, 'C')
&lt;/code&gt;&lt;/pre&gt;

&lt;div class="nb-html-output"&gt;&lt;table style="margin-bottom: 90px;"&gt;
    &lt;tbody&gt;&lt;tr&gt;
        &lt;th&gt;concat_ws&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;A,C&lt;/td&gt;
    &lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;

&lt;div style="margin-bottom: 50px;"&gt;&lt;/div&gt;

&lt;h5 id="_3"&gt;処理速度&lt;/h5&gt;
&lt;p&gt;処理速度は&lt;code&gt;||&lt;/code&gt;演算子が最も高速です．&lt;br&gt;
&lt;code&gt;CONCAT()&lt;/code&gt;, &lt;code&gt;CONCAT_WS()&lt;/code&gt;は関数呼び出しがあるため&lt;code&gt;||&lt;/code&gt;演算子よりは低速です．&lt;/p&gt;
&lt;div style="margin-bottom: 50px;"&gt;&lt;/div&gt;

&lt;h5 id="_4"&gt;結果のカラム名&lt;/h5&gt;
&lt;p&gt;最後の違いは微妙ですが&lt;code&gt;||&lt;/code&gt;演算子と&lt;code&gt;CONCAT()&lt;/code&gt;（&lt;code&gt;CONCAT_WS()&lt;/code&gt;）では結果のカラム名が異なります．&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/sql-concat-ws-functions/sql-concat-ws-functions_01.png" width="300" height="164"&gt;&lt;/p&gt;
&lt;div class="s-bubbles"&gt;
&lt;p&gt;&lt;div class="kani-icon" markdown="1"&gt;
  &lt;img src="/images/about/kani_chatting.png" width="50" height="50" style="margin: 7px 0px 0px 5px;"&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="chatting"&gt;
&lt;p&gt;&lt;div class="says" markdown="1"&gt;
  &lt;code&gt;AS&lt;/code&gt;でカラム名を指定すれば特に困ることはないです！&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/p&gt;
&lt;h2 id="_5"&gt;ひとこと&lt;/h2&gt;
&lt;p&gt;文字列をSQLで整形しておくと後続の処理が楽ですね．&lt;br&gt;
住所や姓名の結合などに使用できそうです．&lt;/p&gt;
&lt;div class="admonition explanation"&gt;
&lt;p class="admonition-title"&gt;関連記事&lt;/p&gt;
&lt;p&gt;文字列結合に関する記事はこちらです．&lt;br&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.revalab.net/sql-string-agg-functions" rel="noopener noreferrer" target="_blank"&gt;PostgreSQLで文字列を結合，STRING_AGGによるコンマ区切り&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div style="margin-bottom: 100px;"&gt;&lt;/div&gt;

&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;詳細は「&lt;code&gt;||&lt;/code&gt;演算子と&lt;code&gt;CONCAT()&lt;/code&gt;の違い」の項を参照．ここではセパレーターの指定を見ています．&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;&lt;code&gt;CONCAT_WS()&lt;/code&gt;も&lt;code&gt;CONCAT()&lt;/code&gt;と同様に引数の数に限りはありません．&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="SQL"></category><category term="PostgreSQL"></category></entry><entry><title>【Python】リスト内の文字数でソートする方法</title><link href="https://www.tecrab.com/articles/python-sorted-str-len.html" rel="alternate"></link><published>2022-01-24T00:00:00+09:00</published><updated>2022-09-04T00:00:00+09:00</updated><author><name>かに</name></author><id>tag:www.tecrab.com,2022-01-24:/articles/python-sorted-str-len.html</id><summary type="html">&lt;p&gt;リストの文字数に応じてソートする方法です．&lt;/p&gt;</summary><content type="html">&lt;div class="admonition abstract"&gt;
&lt;p&gt;本記事ではリストの文字数に応じてソートする方法を解説します．&lt;br&gt;
&lt;ul style="margin: -5px 0px 0px 15px;"&gt;
    &lt;li&gt;ソート前：&lt;code&gt;['ほたて', 'くるまえび', 'かに']&lt;/code&gt;&lt;/li&gt;
    &lt;li&gt;ソート後：&lt;code&gt;['かに', 'ほたて', 'くるまえび']&lt;/code&gt;&lt;/li&gt;&lt;/p&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;目次&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;事前準備&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_2"&gt;文字数でソート（文字数が少ない順）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;文字数でソート（文字数が多い順）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_4"&gt;ひとこと&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="_1"&gt;事前準備&lt;/h2&gt;
&lt;p&gt;まずはサンプルとなるリストを作成します．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;
sample = ['ほたて', 'くるまえび', 'かに']
print(sample)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre style="margin-bottom: 90px;"&gt;
['ほたて', 'くるまえび', 'かに']
&lt;/pre&gt;

&lt;h3 id="_2"&gt;文字数でソート（文字数が少ない順）&lt;/h3&gt;
&lt;p&gt;リストの中の要素を文字数でソートするにはPythonの組み込み関数&lt;code&gt;sorted()&lt;/code&gt;を使用します．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;
sample_s = sorted(sample, key=len)
print(sample_s)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre style="margin-bottom: 30px;"&gt;
['かに', 'ほたて', 'くるまえび']
&lt;/pre&gt;

&lt;div class="admonition explanation"&gt;
&lt;p class="admonition-title"&gt;解説&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sorted()&lt;/code&gt;の引数は以下のとおりです．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一引数：ソートしたいリストを指定します．&lt;/li&gt;
&lt;li&gt;第二引数：&lt;code&gt;key&lt;/code&gt;にはソートで使用する関数を指定することができます．&lt;br&gt;
&lt;code&gt;key=len&lt;/code&gt;&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;を指定することでリスト要素の文字数を基準にソートすることができます．&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h3 id="_3"&gt;文字数でソート（文字数が多い順）&lt;/h3&gt;
&lt;p&gt;文字数が多い順にソートするには&lt;code&gt;sorted()&lt;/code&gt;の引数に&lt;code&gt;reverse=True&lt;/code&gt;を指定します．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;
sample_s2 = sorted(sample, key=len, reverse=True)
print(sample_s2)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre style="margin-bottom: 30px;"&gt;
['くるまえび', 'ほたて', 'かに']
&lt;/pre&gt;

&lt;p&gt;文字数が多い順にソートされましたね．&lt;br&gt;
なお，引数&lt;code&gt;reverse&lt;/code&gt;のデフォルトは&lt;code&gt;False&lt;/code&gt;なので，指定しない場合は文字数が少ない順になります．&lt;/p&gt;
&lt;h2 id="_4"&gt;ひとこと&lt;/h2&gt;
&lt;p&gt;組み込み関数の&lt;code&gt;sorted()&lt;/code&gt;は引数の&lt;code&gt;key&lt;/code&gt;に関数を指定することができるので，他にも色々と応用ができそうです．&lt;/p&gt;
&lt;div style="margin-bottom: 100px;"&gt;&lt;/div&gt;

&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;&lt;code&gt;len&lt;/code&gt;とはPythonの組み込み関数&lt;code&gt;len()&lt;/code&gt;のことです．&lt;code&gt;len()&lt;/code&gt;はリストの要素数や文字数などをカウントできる関数です．なお &lt;code&gt;key&lt;/code&gt;を使って指定する際はカッコなしで&lt;code&gt;key=len&lt;/code&gt;とします．&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Python"></category><category term="Python"></category><category term="自然言語処理"></category></entry><entry><title>PostgreSQLで文字列を結合，STRING_AGGによるコンマ区切り</title><link href="https://www.tecrab.com/articles/sql-string-agg-functions.html" rel="alternate"></link><published>2022-01-22T00:00:00+09:00</published><updated>2022-09-12T00:00:00+09:00</updated><author><name>かに</name></author><id>tag:www.tecrab.com,2022-01-22:/articles/sql-string-agg-functions.html</id><summary type="html">&lt;p&gt;PostgreSQLで文字列を結合/コンマ区切りで取得する方法です．&lt;/p&gt;</summary><content type="html">&lt;div class="admonition abstract"&gt;
&lt;p&gt;本記事では以下の内容を見ていきます．&lt;br&gt;
&lt;ul style="margin: -5px 0px 0px 15px;"&gt;
  &lt;li&gt;列に含まれる文字列の結合&lt;/li&gt;
  &lt;li&gt;結合した文字列をコンマ区切りで取得&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;
&lt;p&gt;例示を見ながら確認していきましょう．&lt;/p&gt;
&lt;/div&gt;
&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;目次&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#postgresql"&gt;PostgreSQLのバージョン&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_1"&gt;事前準備&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_2"&gt;列に含まれる文字列の結合&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#concat"&gt;concatを使用する方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;結合した文字列をコンマ区切りで取得&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_4"&gt;結合した文字列を並び替える&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_7"&gt;ひとこと&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="postgresql"&gt;PostgreSQLのバージョン&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;psql (PostgreSQL) 14.5&lt;/code&gt;&lt;/p&gt;
&lt;h2 id="_1"&gt;事前準備&lt;/h2&gt;
&lt;p&gt;まずはサンプルのテーブルを作成します．&lt;br&gt;
姓・名がそれぞれ列に格納されたデータです．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-sql"&gt;
CREATE TABLE name_list (
    id serial PRIMARY KEY, -- 番号
    group_ VARCHAR(5), -- グループ
    first_name VARCHAR(30), -- 名
    last_name VARCHAR(30) -- 姓
);

INSERT INTO name_list (group_, first_name, last_name)
VALUES
    ('A', 'ABC', 'EFG'),
    ('A', 'ZYX', 'DEF'),
    ('B', 'Taro', 'Suzuki'),
    ('C', '青井', '大輔'),
    ('C', '渡邊', '輝')
;

SELECT * FROM name_list;
&lt;/code&gt;&lt;/pre&gt;

&lt;div class="nb-html-output"&gt;&lt;table style="margin-bottom: 90px;"&gt;
    &lt;tbody&gt;&lt;tr&gt;
        &lt;th&gt;id&lt;/th&gt;
        &lt;th&gt;group_&lt;/th&gt;
        &lt;th&gt;first_name&lt;/th&gt;
        &lt;th&gt;last_name&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;1&lt;/td&gt;
        &lt;td&gt;A&lt;/td&gt;
        &lt;td&gt;ABC&lt;/td&gt;
        &lt;td&gt;EFG&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;2&lt;/td&gt;
        &lt;td&gt;A&lt;/td&gt;
        &lt;td&gt;ZYX&lt;/td&gt;
        &lt;td&gt;DEF&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;3&lt;/td&gt;
        &lt;td&gt;B&lt;/td&gt;
        &lt;td&gt;Taro&lt;/td&gt;
        &lt;td&gt;Suzuki&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;4&lt;/td&gt;
        &lt;td&gt;C&lt;/td&gt;
        &lt;td&gt;青井&lt;/td&gt;
        &lt;td&gt;大輔&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;5&lt;/td&gt;
        &lt;td&gt;C&lt;/td&gt;
        &lt;td&gt;渡邊&lt;/td&gt;
        &lt;td&gt;輝&lt;/td&gt;
    &lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;

&lt;h3 id="_2"&gt;列に含まれる文字列の結合&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;first_name&lt;/code&gt;列と&lt;code&gt;last_name&lt;/code&gt;列の文字列を結合し，フルネームが入った列を作成します．&lt;br&gt;
文字列を結合するには&lt;code&gt;||&lt;/code&gt;演算子を使用します．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-sql"&gt;
SELECT
    first_name, 
    last_name,
    first_name || ' ' || last_name AS full_name
FROM
    name_list;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="nb-html-output"&gt;&lt;table style="margin-bottom: 50px;"&gt;
    &lt;tbody&gt;&lt;tr&gt;
        &lt;th&gt;first_name&lt;/th&gt;
        &lt;th&gt;last_name&lt;/th&gt;
        &lt;th&gt;full_name&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;ABC&lt;/td&gt;
        &lt;td&gt;EFG&lt;/td&gt;
        &lt;td&gt;ABC EFG&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;ZYX&lt;/td&gt;
        &lt;td&gt;DEF&lt;/td&gt;
        &lt;td&gt;ZYX DEF&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;Taro&lt;/td&gt;
        &lt;td&gt;Suzuki&lt;/td&gt;
        &lt;td&gt;Taro Suzuki&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;青井&lt;/td&gt;
        &lt;td&gt;大輔&lt;/td&gt;
        &lt;td&gt;青井 大輔&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;渡邊&lt;/td&gt;
        &lt;td&gt;輝&lt;/td&gt;
        &lt;td&gt;渡邊 輝&lt;/td&gt;
    &lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;first_name || ' ' || last_name&lt;/code&gt;で２列の文字列を半角スペースで結合させています．&lt;br&gt;
結果として姓・名が半角スペースで区切られた列が取得できます.&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;h3 id="concat"&gt;&lt;code&gt;concat&lt;/code&gt;を使用する方法&lt;/h3&gt;
&lt;p&gt;文字列の結合は&lt;code&gt;||&lt;/code&gt;演算子だけでなく&lt;code&gt;CONCAT()&lt;/code&gt;関数でも可能です．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-sql"&gt;
SELECT
    first_name, 
    last_name,
    CONCAT(first_name, ' ', last_name) AS full_name
FROM
    name_list;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="nb-html-output"&gt;&lt;table style="margin-bottom: 90px;"&gt;
    &lt;tbody&gt;&lt;tr&gt;
        &lt;th&gt;first_name&lt;/th&gt;
        &lt;th&gt;last_name&lt;/th&gt;
        &lt;th&gt;full_name&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;ABC&lt;/td&gt;
        &lt;td&gt;EFG&lt;/td&gt;
        &lt;td&gt;ABC EFG&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;ZYX&lt;/td&gt;
        &lt;td&gt;DEF&lt;/td&gt;
        &lt;td&gt;ZYX DEF&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;Taro&lt;/td&gt;
        &lt;td&gt;Suzuki&lt;/td&gt;
        &lt;td&gt;Taro Suzuki&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;青井&lt;/td&gt;
        &lt;td&gt;大輔&lt;/td&gt;
        &lt;td&gt;青井 大輔&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;渡邊&lt;/td&gt;
        &lt;td&gt;輝&lt;/td&gt;
        &lt;td&gt;渡邊 輝&lt;/td&gt;
    &lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;

&lt;div class="admonition explanation"&gt;
&lt;p class="admonition-title"&gt;関連記事&lt;/p&gt;
&lt;p&gt;&lt;code&gt;||&lt;/code&gt;演算子と&lt;code&gt;CONCAT()&lt;/code&gt;関数に関する関連記事はこちらです．&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;ul style="margin: -5px 0px 0px 15px;"&gt;
    &lt;li&gt;
    &lt;a href="https://www.revalab.net/sql-concat-ws-functions/" rel="noopener noreferrer" target="_blank"&gt;PostgreSQLで文字列を結合 (CONCAT, CONCAT_WS)&lt;/a&gt;
    &lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;h3 id="_3"&gt;結合した文字列をコンマ区切りで取得&lt;/h3&gt;
&lt;p&gt;先ほどは行ごとに姓・名の結合結果を取得しました．&lt;br&gt;
ここでは姓・名の結合結果をまとめて取得＋コンマ区切りとする方法を見てみましょう．&lt;/p&gt;
&lt;p&gt;&lt;code&gt;STRING_AGG()&lt;/code&gt;関数を使用して以下のように記載します．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-sql"&gt;
SELECT
    STRING_AGG(
        first_name || ' ' || last_name, ','
    ) AS full_names
FROM
    name_list
;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="nb-html-output"&gt;&lt;table style="margin-bottom: 50px;"&gt;
    &lt;tbody&gt;&lt;tr&gt;
        &lt;th&gt;full_names&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;ABC EFG,ZYX DEF,Taro Suzuki,青井 大輔,渡邊 輝&lt;/td&gt;
    &lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;

&lt;div class="admonition explanation"&gt;
&lt;p class="admonition-title"&gt;解説&lt;/p&gt;
&lt;p&gt;&lt;code&gt;STRING_AGG()&lt;/code&gt;関数の引数は以下のとおりです．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一引数：文字列を指定します．今回は姓名を結合したいのでその処理を指定．&lt;/li&gt;
&lt;li&gt;第二引数：取得する文字列の区切り方を指定します．今回はコンマを指定．&lt;/li&gt;
&lt;li&gt;第三引数：取得した結果の並び替えを指定.&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2"&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div style="margin-bottom: -40px;"&gt;&lt;/div&gt;

&lt;div class="admonition info-box"&gt;
&lt;p class="admonition-title"&gt;参考&lt;/p&gt;
&lt;p&gt;&lt;code&gt;STRING_AGG()&lt;/code&gt;は集約関数の仲間ですので，取得できる結果は１つです．&lt;/p&gt;
&lt;/div&gt;
&lt;h3 id="_4"&gt;結合した文字列を並び替える&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;STRING_AGG()&lt;/code&gt;の第三引数には&lt;code&gt;ORDER BY&lt;/code&gt;句を指定することが可能です．&lt;br&gt;
そのため，以下のようにすれば取得する文字列の並びを変更することができます．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-sql"&gt;
SELECT
    STRING_AGG(
        first_name || ' ' || last_name, ','
        ORDER BY first_name
    ) AS full_names
FROM
    name_list
;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="nb-html-output"&gt;&lt;table style="margin-bottom: 50px;"&gt;
    &lt;tbody&gt;&lt;tr&gt;
        &lt;th&gt;full_names&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;ABC EFG,Taro Suzuki,ZYX DEF,渡邊 輝,青井 大輔&lt;/td&gt;
    &lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;ORDER BY&lt;/code&gt;句で指定した&lt;code&gt;first_name&lt;/code&gt;列に従って並び替えられるので「ABC EFG, Taro Suzuki, ZYX DEF」の順になりました．&lt;/p&gt;
&lt;div class="admonition warning-box"&gt;
&lt;p class="admonition-title"&gt;注意&lt;/p&gt;
&lt;p&gt;日本語の並び替えはふりがなカラムの追加，データ型を調整などが必要です・・・&lt;/p&gt;
&lt;/div&gt;
&lt;h5 id="_5"&gt;グループごとに結果を取得&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;STRING_AGG()&lt;/code&gt;関数と&lt;code&gt;GROUP BY&lt;/code&gt;句を組み合わせて使うこともできます．&lt;br&gt;
&lt;code&gt;group_&lt;/code&gt;列の値で集約した結果を取得するには以下のクエリです．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-sql"&gt;
SELECT
    group_,
    STRING_AGG(
        first_name || ' ' || last_name, ','
        ORDER BY first_name
    ) AS full_names
FROM
    name_list
GROUP BY
    group_
;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="nb-html-output"&gt;&lt;table style="margin-bottom: 50px;"&gt;
    &lt;tbody&gt;&lt;tr&gt;
        &lt;th&gt;group_&lt;/th&gt;
        &lt;th&gt;full_names&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;A&lt;/td&gt;
        &lt;td&gt;ABC EFG,ZYX DEF&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;B&lt;/td&gt;
        &lt;td&gt;Taro Suzuki&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;C&lt;/td&gt;
        &lt;td&gt;渡邊 輝,青井 大輔&lt;/td&gt;
    &lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;グループごとに姓・名の結合結果が得られましたね．&lt;/p&gt;
&lt;div style="margin-bottom: 90px;"&gt;&lt;/div&gt;

&lt;h5 id="_6"&gt;参考&lt;/h5&gt;
&lt;p&gt;行すべてで&lt;code&gt;STRING_AGG()&lt;/code&gt;関数の結果が欲しい場合は&lt;code&gt;OVER()&lt;/code&gt;を使用すればOKです．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-sql"&gt;
SELECT
    first_name,
    last_name,
    STRING_AGG(
        first_name || ' ' || last_name, ','
    ) OVER() AS full_names
FROM
    name_list
;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="nb-html-output"&gt;&lt;table style="margin-bottom: 90px;"&gt;
    &lt;tbody&gt;&lt;tr&gt;
        &lt;th&gt;first_name&lt;/th&gt;
        &lt;th&gt;last_name&lt;/th&gt;
        &lt;th&gt;full_names&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;ABC&lt;/td&gt;
        &lt;td&gt;EFG&lt;/td&gt;
        &lt;td&gt;ABC EFG,ZYX DEF,Taro Suzuki,青井 大輔,渡邊 輝&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;ZYX&lt;/td&gt;
        &lt;td&gt;DEF&lt;/td&gt;
        &lt;td&gt;ABC EFG,ZYX DEF,Taro Suzuki,青井 大輔,渡邊 輝&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;Taro&lt;/td&gt;
        &lt;td&gt;Suzuki&lt;/td&gt;
        &lt;td&gt;ABC EFG,ZYX DEF,Taro Suzuki,青井 大輔,渡邊 輝&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;青井&lt;/td&gt;
        &lt;td&gt;大輔&lt;/td&gt;
        &lt;td&gt;ABC EFG,ZYX DEF,Taro Suzuki,青井 大輔,渡邊 輝&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;渡邊&lt;/td&gt;
        &lt;td&gt;輝&lt;/td&gt;
        &lt;td&gt;ABC EFG,ZYX DEF,Taro Suzuki,青井 大輔,渡邊 輝&lt;/td&gt;
    &lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;

&lt;h2 id="_7"&gt;ひとこと&lt;/h2&gt;
&lt;p&gt;SQL側で文字列を色々と操作することができると便利ですね．&lt;/p&gt;
&lt;div style="margin-bottom: 100px;"&gt;&lt;/div&gt;

&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;&lt;code&gt;AS full_name&lt;/code&gt;の部分は取得するカラムに名前をつけています．&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;上記のクエリでは指定していません．詳細は次項を参照．&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="SQL"></category><category term="PostgreSQL"></category></entry><entry><title>【pandas】DataFrameの要素を正規表現で置換する方法</title><link href="https://www.tecrab.com/articles/pandas-df-regex-substitution.html" rel="alternate"></link><published>2022-01-18T00:00:00+09:00</published><updated>2022-09-09T00:00:00+09:00</updated><author><name>かに</name></author><id>tag:www.tecrab.com,2022-01-18:/articles/pandas-df-regex-substitution.html</id><summary type="html">&lt;p&gt;DataFrameの要素を正規表現を使って置換する方法です．&lt;/p&gt;</summary><content type="html">&lt;div class="admonition abstract"&gt;
&lt;p&gt;本記事では以下の内容を解説しています．
&lt;br&gt;
&lt;ul style="margin: -5px 0px 0px 15px;"&gt;
  &lt;li&gt;DataFrameの要素をチェックし，正規表現を使って置換&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;[]&lt;/code&gt;で囲まれた部分を&lt;code&gt;[]&lt;/code&gt;ごと除去（正規表現）&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;
&lt;p&gt;公式 Reference: &lt;a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.replace.html" rel="noopener noreferrer" target="_blank"&gt;pandas.DataFrame.replace&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;目次&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;事前準備&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#dataframe"&gt;DataFrameの要素を置換&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_2"&gt;正規表現で「[]で囲まれた」を指定&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#dataframe_1"&gt;DataFrameの要素全体を置換&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#dataframe_2"&gt;DataFrameの特定の列だけを置換&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;ひとこと&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="_1"&gt;事前準備&lt;/h2&gt;
&lt;p&gt;まずはサンプルのDataFrameを作成します．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;
l = [['[注]かに', 'タラバガニ'], ['くるまえび', '[!]えび']]

df = pd.DataFrame(l, columns=['col_1', 'col_2'])
df
&lt;/code&gt;&lt;/pre&gt;
&lt;table class="dataframe" border="1" style="margin-bottom: 90px;"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;col_1&lt;/th&gt;
      &lt;th&gt;col_2&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;[注]かに&lt;/td&gt;
      &lt;td&gt;タラバガニ&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;くるまえび&lt;/td&gt;
      &lt;td&gt;[!]えび&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id="dataframe"&gt;DataFrameの要素を置換&lt;/h2&gt;
&lt;h3 id="_2"&gt;正規表現で「&lt;code&gt;[]&lt;/code&gt;で囲まれた」を指定&lt;/h3&gt;
&lt;p&gt;今回は正規表現を用いて置換を行うため，正規表現の準備をします．&lt;/p&gt;
&lt;p&gt;正規表現を扱うPython標準ライブラリの&lt;code&gt;re&lt;/code&gt;を使用し「&lt;code&gt;[]&lt;/code&gt;で囲まれた」という正規表現をコンパイルします．これによりコンパイルしたパターンでマッチの有無（&lt;code&gt;[]&lt;/code&gt;で囲まれた部分の有無）を確認できます．&lt;/p&gt;
&lt;pre style="margin-bottom: 90px;"&gt;&lt;code class="language-python"&gt;
# 正規表現を扱うPython標準ライブラリ
import re

# 「[]で囲まれた」を表す正規表現をcompile
pattern = r'\[.+?\]'
compiled_pattern = re.compile(pattern)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="dataframe_1"&gt;DataFrameの要素全体を置換&lt;/h3&gt;
&lt;p&gt;pandasの&lt;code&gt;replace&lt;/code&gt;メソッドでDataFrameの要素を置換します．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;
# 元のdfをコピー
df_all = df.copy()

df_all.replace(compiled_pattern, '', regex=True, inplace=True)
df_all
&lt;/code&gt;&lt;/pre&gt;
&lt;table class="dataframe" border="1"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;col_1&lt;/th&gt;
      &lt;th&gt;col_2&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;かに&lt;/td&gt;
      &lt;td&gt;タラバガニ&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;くるまえび&lt;/td&gt;
      &lt;td&gt;えび&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;div class="admonition explanation"&gt;
&lt;p class="admonition-title"&gt;解説&lt;/p&gt;
&lt;p&gt;&lt;code&gt;replace&lt;/code&gt;メソッドはDataFrame（Series）の要素を置換できるメソッドです．&lt;br&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一引数：正規表現パターンを指定&lt;/li&gt;
&lt;li&gt;第二引数：置換する文字列&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;を指定&lt;/li&gt;
&lt;li&gt;正規表現を使用して置換するため&lt;code&gt;regex=True&lt;/code&gt;を指定&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上記の処理が実行されることで「&lt;code&gt;[]&lt;/code&gt; で囲まれた部分」があれば取り除かれます．&lt;br&gt;
なお，引数&lt;code&gt;inplace=True&lt;/code&gt;で元の&lt;code&gt;df_all&lt;/code&gt;が更新されるようになります.&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2"&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;h3 id="dataframe_2"&gt;DataFrameの特定の列だけを置換&lt;/h3&gt;
&lt;p&gt;特定の列だけを置換するには以下のようにします．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;
# 元のdfをコピー
df_p = df.copy()

df_p['col_1'].replace(compiled_pattern, '', regex=True, inplace=True)
df_p
&lt;/code&gt;&lt;/pre&gt;
&lt;table class="dataframe" border="1" style="margin-bottom: 30px;"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;col_1&lt;/th&gt;
      &lt;th&gt;col_2&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;かに&lt;/td&gt;
      &lt;td&gt;タラバガニ&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;くるまえび&lt;/td&gt;
      &lt;td&gt;[!]えび&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;指定した&lt;code&gt;col_1&lt;/code&gt;列だけで&lt;code&gt;[]&lt;/code&gt;が除去されていますね．&lt;/p&gt;
&lt;h2 id="_3"&gt;ひとこと&lt;/h2&gt;
&lt;p&gt;DataFrameでさっと文字を綺麗にする際に使えますね．&lt;br&gt;&lt;/p&gt;
&lt;div style="margin-bottom: 100px;"&gt;&lt;/div&gt;

&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;今回の例では&lt;code&gt;''&lt;/code&gt;（空白）を指定しています．&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;&lt;code&gt;df&lt;/code&gt;をコピーしているのはこれが理由です．&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Python"></category><category term="Python"></category><category term="pandas"></category></entry><entry><title>【Python】辞書の値（values）の合計を確認する方法</title><link href="https://www.tecrab.com/articles/python-dict-values-sum.html" rel="alternate"></link><published>2022-01-12T00:00:00+09:00</published><updated>2022-09-04T00:00:00+09:00</updated><author><name>かに</name></author><id>tag:www.tecrab.com,2022-01-12:/articles/python-dict-values-sum.html</id><summary type="html">&lt;p&gt;Pythonの辞書の値を合計する方法を解説しています．&lt;/p&gt;</summary><content type="html">&lt;div class="admonition abstract"&gt;
&lt;p&gt;本記事では以下の内容を解説しています．
&lt;ul style="margin: -5px 0px 0px 15px;"&gt;
  &lt;li&gt;辞書の値を単純に合計する&lt;/li&gt;
  &lt;li&gt;特定のキーの値だけを合計する&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;目次&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;辞書の値を単純に合計する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;特定のキーの値だけを合計する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;ひとこと&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="_1"&gt;辞書の値を単純に合計する&lt;/h2&gt;
&lt;p&gt;まずはサンプルの辞書を作成します．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;
d = {'ズワイガニ': 10, 'タラバガニ': 23, 'ホタテ': 17, 'えび': 50}
d
&lt;/code&gt;&lt;/pre&gt;
&lt;pre style="margin-bottom: 90px;"&gt;
{'ズワイガニ': 10, 'タラバガニ': 23, 'ホタテ': 17, 'えび': 50}
&lt;/pre&gt;

&lt;p&gt;辞書のvalues&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;を合計したい場合は以下のようにします．&lt;br&gt;
辞書のvaluesを&lt;code&gt;values()&lt;/code&gt;メソッドで取得し，それを&lt;code&gt;sum()&lt;/code&gt;で合計しています．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;
sum(d.values())
&lt;/code&gt;&lt;/pre&gt;
&lt;pre style="margin-bottom: 90px;"&gt;
100
&lt;/pre&gt;

&lt;h2 id="_2"&gt;特定のキーの値だけを合計する&lt;/h2&gt;
&lt;p&gt;前項の例では全てのvaluesを合計しました．&lt;br&gt;
ここではサンプル辞書のうち「ガニ」を含むキーのvaluesのみを合計します．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;
sum([d[k] for k in d if 'ガニ' in k])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre style="margin-bottom: 30px;"&gt;
33
&lt;/pre&gt;

&lt;div class="admonition explanation"&gt;
&lt;p class="admonition-title"&gt;解説&lt;/p&gt;
&lt;p&gt;以下のような流れで処理しています．&lt;br&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;for&lt;/code&gt;文で辞書からキーを順に取り出す.&lt;/li&gt;
&lt;li&gt;取り出したキーに「ガニ」が含まれるか確認.&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2"&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;キーに「ガニ」が含まれていたらそのvaluesを&lt;code&gt;d[k]&lt;/code&gt;で取り出す.&lt;sup id="fnref:3"&gt;&lt;a class="footnote-ref" href="#fn:3"&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;最終的に「ガニ」が含まれるキーのvaluesのみのリストができるため，それを&lt;code&gt;sum()&lt;/code&gt;で合計しています．&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id="_3"&gt;ひとこと&lt;/h2&gt;
&lt;p&gt;データを辞書で集計し，その全体の個数を知りたいときなどに使えそうです．&lt;/p&gt;
&lt;div style="margin-bottom: 100px;"&gt;&lt;/div&gt;

&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;辞書は&lt;code&gt;{key: values}&lt;/code&gt;という構成になっています．&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;&lt;code&gt;if 'ガニ' in k&lt;/code&gt;部分です．&lt;code&gt;in&lt;/code&gt;演算子を使って「ガニ」という文字列がキー（&lt;code&gt;k&lt;/code&gt;）に含まれるかを確認することができます．&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:3"&gt;
&lt;p&gt;&lt;code&gt;dict[key]&lt;/code&gt;という記法で&lt;code&gt;dict&lt;/code&gt;という辞書のkeyを指定し，そのvaluesを取り出すことができます．&lt;br&gt;例えば&lt;code&gt;d['ホタテ']&lt;/code&gt;とするとホタテ（key）のvaluesである&lt;code&gt;17&lt;/code&gt;が取り出せます．&amp;#160;&lt;a class="footnote-backref" href="#fnref:3" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Python"></category><category term="Python"></category></entry><entry><title>【Google スライド】表の幅（余白）を文字に合わせてを調整する方法</title><link href="https://www.tecrab.com/articles/google-slides-cellsize.html" rel="alternate"></link><published>2022-01-06T00:00:00+09:00</published><updated>2022-01-12T00:00:00+09:00</updated><author><name>かに</name></author><id>tag:www.tecrab.com,2022-01-06:/articles/google-slides-cellsize.html</id><summary type="html">&lt;p&gt;Googleスライドで文字に合わせて表の幅（余白）を調整する方法です．&lt;/p&gt;</summary><content type="html">&lt;div class="admonition abstract"&gt;
&lt;p&gt;Googleスライドで文字に合わせて表の幅（余白）を調整したい時の方法を解説します．&lt;/p&gt;
&lt;/div&gt;
&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;目次&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;イメージ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;手順&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;ひとこと&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="_1"&gt;イメージ&lt;/h2&gt;
&lt;p&gt;以下のような感じです．&lt;br&gt;
&lt;img src="/images/google-slides-cellsize/google-slides-cellsize_00.png" width="600" height="118"&gt;&lt;/p&gt;
&lt;h2 id="_2"&gt;手順&lt;/h2&gt;
&lt;h5 id="1"&gt;① 幅を調整したい行（列）をすべて選択する&lt;/h5&gt;
&lt;p&gt;まずは幅を調節する行（または列）をすべて選択します．&lt;br&gt;
&lt;img src="/images/google-slides-cellsize/google-slides-cellsize_01.png" width="500" height="109"&gt;&lt;/p&gt;
&lt;h5 id="2"&gt;② 選択したセル部分で右クリックしてメニューを表示&lt;/h5&gt;
&lt;p&gt;選択したセル部分で右クリックをすると以下のようなメニューが出てきます．&lt;br&gt;
出てきたメニュー内にある「&lt;strong&gt;ファイル形式オプション&lt;/strong&gt;」をクリック．&lt;br&gt;
&lt;img src="/images/google-slides-cellsize/google-slides-cellsize_02.png" width="500" height="293"&gt;&lt;/p&gt;
&lt;h5 id="3"&gt;③ 書式設定オプションの枠内でスクロール&lt;/h5&gt;
&lt;p&gt;ファイル形式オプションをクリックすると画面右に「&lt;strong&gt;書式設定オプション&lt;/strong&gt;」が出てきます．&lt;br&gt;
このオプションの枠内で下にスクロールをします．&lt;br&gt;
&lt;img src="/images/google-slides-cellsize/google-slides-cellsize_03.png" width="400" height="341"&gt;&lt;/p&gt;
&lt;h5 id="4"&gt;④ 書式設定オプションのパディングを調整&lt;/h5&gt;
&lt;p&gt;一番下までスクロールした先にある「&lt;strong&gt;パディング&lt;/strong&gt;」で上下のサイズを調整します．&lt;br&gt;
このサイズを小さくすれば表の幅を小さくすることができるようになります．&lt;br&gt;
&lt;img src="/images/google-slides-cellsize/google-slides-cellsize_04.png" width="300" height="548"&gt;&lt;/p&gt;
&lt;p&gt;以下の例は上下のパディングを0.15cm に設定したものです．&lt;br&gt;
パディングを調整した行だけ幅を狭くできていますね！&lt;br&gt;
&lt;img src="/images/google-slides-cellsize/google-slides-cellsize_05.png" width="400" height="137"&gt;&lt;/p&gt;
&lt;div class="admonition info-box"&gt;
&lt;p class="admonition-title"&gt;参考&lt;/p&gt;
&lt;p&gt;列の場合は左右を調整すればOKです．&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id="_3"&gt;ひとこと&lt;/h2&gt;
&lt;p&gt;Google スライドは全体的に余白が広いので，こうした微調整でいい感じのスライドを作れるといいですね．&lt;/p&gt;
&lt;div style="margin-bottom: 100px;"&gt;&lt;/div&gt;</content><category term="Google Workspace"></category><category term="Googleスライド"></category></entry><entry><title>【pandas】DataFrameから一部/任意の列を抽出する方法</title><link href="https://www.tecrab.com/articles/dataframe-columns-extraction.html" rel="alternate"></link><published>2021-12-08T00:00:00+09:00</published><updated>2022-09-04T00:00:00+09:00</updated><author><name>かに</name></author><id>tag:www.tecrab.com,2021-12-08:/articles/dataframe-columns-extraction.html</id><summary type="html">&lt;p&gt;DataFrameから特定の列を抽出する方法について解説しています．&lt;/p&gt;</summary><content type="html">&lt;div class="admonition abstract"&gt;
&lt;p&gt;本記事では以下の内容を解説しています．&lt;/p&gt;
&lt;p&gt;DateFrameから
&lt;ul style="margin: -10px 0px 0px 15px;"&gt;
  &lt;li&gt;一部の列を抽出（特定の列だけ or 特定の列以外）&lt;/li&gt;
  &lt;li&gt;列名に任意の文字列が含まれている列&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;目次&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;事前準備&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#or"&gt;一部の列を抽出（特定の列だけ or 特定の列以外）&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_2"&gt;特定の列だけ抽出&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;特定の列以外を抽出&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_4"&gt;指定した複数の列以外を抽出&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_5"&gt;列名に任意の文字列が含まれている列&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#flag"&gt;列名に「flag」が含まれる列を抽出&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_6"&gt;ひとこと&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="_1"&gt;事前準備&lt;/h2&gt;
&lt;p&gt;まずはサンプルのDataFrameを作成します．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;
import pandas as pd

df = pd.DataFrame({
    'col1': [1, 2, 3],
    'col2': [10, 20, 30],
    'col3': [10, 40, 90],
    'col4_flag': [1, 0, 0]
})
df
&lt;/code&gt;&lt;/pre&gt;
&lt;table class="dataframe" border="1" style="margin-bottom: 90px;"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;col1&lt;/th&gt;
      &lt;th&gt;col2&lt;/th&gt;
      &lt;th&gt;col3&lt;/th&gt;
      &lt;th&gt;col4_flag&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;10&lt;/td&gt;
      &lt;td&gt;10&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;20&lt;/td&gt;
      &lt;td&gt;40&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;30&lt;/td&gt;
      &lt;td&gt;90&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id="or"&gt;一部の列を抽出（特定の列だけ or 特定の列以外）&lt;/h2&gt;
&lt;h3 id="_2"&gt;特定の列だけ抽出&lt;/h3&gt;
&lt;p&gt;サンプルのDaraFrameのうち，&lt;code&gt;col3&lt;/code&gt;列のみを抽出します．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;
df[[col for col in df.columns if col == 'col3']]
&lt;/code&gt;&lt;/pre&gt;

&lt;table class="dataframe" border="1" style="margin-bottom: 30px;"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;col3&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;10&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;40&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;90&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;DataFrame から列をひとつずつ取り出してリストに加えています．&lt;br&gt;
ただし&lt;code&gt;if&lt;/code&gt;文で「&lt;code&gt;for&lt;/code&gt;文で取り出した&lt;code&gt;col&lt;/code&gt;が&lt;code&gt;col3&lt;/code&gt;であれば」という条件をつけているので，結果としてリストに加えられるのは&lt;code&gt;col3&lt;/code&gt;列だけになります.&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;div class="admonition info-box"&gt;
&lt;p class="admonition-title"&gt;参考&lt;/p&gt;
&lt;p&gt;なお，１つの列だけを取得したい場合&lt;code&gt;df[['col3']]&lt;/code&gt;で同じことができます．&lt;br&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;
df[['col3']]
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;&lt;table class="dataframe" border="1" style="margin: 10px 0px 20px 20px;"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;col3&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;10&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;40&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;90&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;&lt;/p&gt;
&lt;p&gt;単独の列を抽出するだけなら&lt;code&gt;df[['col3']]&lt;/code&gt;を使うことが普通ですし，好ましいですが，今回は次項の「特定の列以外を抽出」と比較するためにあえて使っています．&lt;/p&gt;
&lt;/div&gt;
&lt;h3 id="_3"&gt;特定の列以外を抽出&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;col3&lt;/code&gt;列以外を抽出したい場合は以下のようにします．&lt;br&gt;
（前項のコードにおける&lt;code&gt;if&lt;/code&gt;文の条件式を&lt;code&gt;==&lt;/code&gt; → &lt;code&gt;!=&lt;/code&gt;としただけです）&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;
# DataFrameの列のうち，col3列以外を取り出す
df[[col for col in df.columns if col != 'col3']]
&lt;/code&gt;&lt;/pre&gt;
&lt;table class="dataframe" border="1" style="margin-bottom: 90px;"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;col1&lt;/th&gt;
      &lt;th&gt;col2&lt;/th&gt;
      &lt;th&gt;col4_flag&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;10&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;20&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;30&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id="_4"&gt;指定した複数の列以外を抽出&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;col1&lt;/code&gt;, &lt;code&gt;col3&lt;/code&gt;以外の列を抽出したい場合はリストを使って以下のようにします．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;
# DataFrameの列のうち，リストで定義された列以外を取り出す．
selected_col = ['col1', 'col3']
df[[col for col in df.columns if col not in selected_col]]
&lt;/code&gt;&lt;/pre&gt;

&lt;table class="dataframe" border="1" style="margin-bottom: 30px;"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;col2&lt;/th&gt;
      &lt;th&gt;col4_flag&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;10&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;20&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;30&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;code&gt;if col not in selected_col&lt;/code&gt;部分で&lt;code&gt;selected_col&lt;/code&gt;にある列はリストに含めないようにしています．&lt;/p&gt;
&lt;h2 id="_5"&gt;列名に任意の文字列が含まれている列&lt;/h2&gt;
&lt;h3 id="flag"&gt;列名に「flag」が含まれる列を抽出&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;for&lt;/code&gt;文で取り出したDataFrameの列名について&lt;code&gt;in&lt;/code&gt;演算子で文字列の有無を確認します．&lt;br&gt;
今回は&lt;code&gt;flag&lt;/code&gt;という文字列を含む列を抽出しています．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;
# 列名にflagが含まれている列だけを抽出
df[[col for col in df.columns if 'flag' in col]]
&lt;/code&gt;&lt;/pre&gt;

&lt;table class="dataframe" border="1" style="margin-bottom: 90px;"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;col4_flag&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id="_6"&gt;ひとこと&lt;/h2&gt;
&lt;p&gt;DataFrameから目的変数と説明変数を分ける場合や，列のデータ型を揃える場合などによく使いますね．&lt;/p&gt;
&lt;div style="margin-bottom: 100px;"&gt;&lt;/div&gt;

&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;DataFrameにおける特定の列は&lt;code&gt;df[['列名']]&lt;/code&gt;という記法で抽出できます．今回の例では&lt;code&gt;['列名']&lt;/code&gt;部分にリスト内包表記を入れ込んでいます．&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Python"></category><category term="Python"></category><category term="pandas"></category></entry><entry><title>PostgreSQLで四捨五入・切り捨て/上げ，小数点以下の桁数を確認する方法</title><link href="https://www.tecrab.com/articles/sql-round-trunc-functions.html" rel="alternate"></link><published>2021-12-02T00:00:00+09:00</published><updated>2022-01-22T00:00:00+09:00</updated><author><name>かに</name></author><id>tag:www.tecrab.com,2021-12-02:/articles/sql-round-trunc-functions.html</id><summary type="html">&lt;p&gt;PostgreSQLで四捨五入や切り捨てなどの方法をまとめています．&lt;/p&gt;</summary><content type="html">&lt;div class="admonition abstract"&gt;
&lt;p&gt;本記事では以下の関数を見ていきます．&lt;br&gt;
&lt;ul style="margin: -5px 0px 0px 15px;"&gt;
  &lt;li&gt;四捨五入：&lt;code&gt;ROUND()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;切り捨て：&lt;code&gt;TRUNC()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;大きい側の整数を取得（切り上げ）：&lt;code&gt;CEIL()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;小さい側の整数を取得：&lt;code&gt;FLOOR()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;小数点以下の桁数を数える：&lt;code&gt;SCALE()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;
&lt;p&gt;例示を見ながら確認していきましょう．&lt;/p&gt;
&lt;/div&gt;
&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;目次&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#postgresql"&gt;PostgreSQLのバージョン&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_1"&gt;事前準備&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#round"&gt;四捨五入 ROUND()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#trunc"&gt;切り捨て TRUNC()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#ceil"&gt;大きい側の整数を取得（切り上げ）CEIL()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#floor"&gt;小さい側の整数を取得（切り捨て）FLOOR()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#scale"&gt;小数点以下の桁数を数える SCALE()&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;ひとこと&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="postgresql"&gt;PostgreSQLのバージョン&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;psql (PostgreSQL) 14.5&lt;/code&gt;&lt;/p&gt;
&lt;h2 id="_1"&gt;事前準備&lt;/h2&gt;
&lt;p&gt;本記事ではテーブルを作成せずに&lt;code&gt;SELECT&lt;/code&gt;文だけを使用します．&lt;/p&gt;
&lt;h3 id="round"&gt;四捨五入 &lt;code&gt;ROUND()&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;四捨五入をするには&lt;code&gt;ROUND()&lt;/code&gt;関数を使用します．&lt;br&gt;
四捨五入したい数値を引数として渡すと小数点以下を四捨五入して返してくれます．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-sql"&gt;
SELECT ROUND(10.4)
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="nb-html-output"&gt;&lt;table style="margin-bottom: 40px;"&gt;
    &lt;tbody&gt;&lt;tr&gt;
        &lt;th&gt;round&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;10&lt;/td&gt;
    &lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;

&lt;pre&gt;&lt;code class="language-sql"&gt;
SELECT ROUND(10.5)
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="nb-html-output" style="margin-bottom: 90px;"&gt;&lt;table&gt;
    &lt;tbody&gt;&lt;tr&gt;
        &lt;th&gt;round&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;11&lt;/td&gt;
    &lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;

&lt;h5 id="_2"&gt;表示する小数点以下の位を指定&lt;/h5&gt;
&lt;p&gt;表示したい小数点以下の位を第二引数で指定することもできます．&lt;br&gt;
以下の例では小数点第一位まで表示するので，小数点第二位が四捨五入されています．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-sql"&gt;
SELECT ROUND(10.554, 1)
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="nb-html-output"&gt;&lt;table style="margin-bottom: 50px;"&gt;
    &lt;tbody&gt;&lt;tr&gt;
        &lt;th&gt;round&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;10.6&lt;/td&gt;
    &lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;

&lt;div class="admonition info-box"&gt;
&lt;p class="admonition-title"&gt;参考&lt;/p&gt;
&lt;p&gt;第二引数のデフォルトは&lt;code&gt;0&lt;/code&gt;（小数点以下で四捨五入）です．&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;引数を負にすると整数部分での四捨五入もできます．&lt;br&gt;
小数点を起点に２番目なので，十の位で四捨五入されています．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-sql"&gt;
SELECT ROUND(150.554, -2)
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="nb-html-output"&gt;&lt;table  style="margin-bottom: 50px;"&gt;
    &lt;tbody&gt;&lt;tr&gt;
        &lt;th&gt;round&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;200&lt;/td&gt;
    &lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;

&lt;div class="admonition warning-box"&gt;
&lt;p class="admonition-title"&gt;注意&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ROUND()&lt;/code&gt;は引数として渡すデータ型に依存して返り値が決まります．&lt;br&gt;
渡すデータ型によっては挙動が異なる例もあるようなので，データ型に注意が必要です．&lt;/p&gt;
&lt;/div&gt;
&lt;h3 id="trunc"&gt;切り捨て &lt;code&gt;TRUNC()&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;数値の切り捨てには&lt;code&gt;TRUNC()&lt;/code&gt;を使用します.（使い方は&lt;code&gt;ROUND()&lt;/code&gt;と同様です）&lt;br&gt;
第一引数に数値を渡すと小数点以下を切り捨てて返してくれます．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-sql"&gt;
SELECT TRUNC(198.9)
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="nb-html-output"&gt;&lt;table style="margin-bottom: 30px;"&gt;
    &lt;tbody&gt;&lt;tr&gt;
        &lt;th&gt;trunc&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;198&lt;/td&gt;
    &lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;ROUND()&lt;/code&gt;と同様に&lt;code&gt;TRUNC()&lt;/code&gt;も表示したい小数点以下の位を第二引数で指定できます.&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;br&gt;
以下の例では小数点第二位まで表示するので，小数点第三位以下を切り捨てています．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-sql"&gt;
SELECT TRUNC(198.992, 2)
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="nb-html-output"&gt;&lt;table style="margin-bottom: 30px;"&gt;
    &lt;tbody&gt;&lt;tr&gt;
        &lt;th&gt;trunc&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;198.99&lt;/td&gt;
    &lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;ROUND()&lt;/code&gt;と同様に第二引数を負の数にすると整数部分での切り捨てもできます．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-sql"&gt;
SELECT TRUNC(198.992, -1)
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="nb-html-output" style="margin-bottom: 90px;"&gt;&lt;table&gt;
    &lt;tbody&gt;&lt;tr&gt;
        &lt;th&gt;trunc&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;190&lt;/td&gt;
    &lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;

&lt;h3 id="ceil"&gt;大きい側の整数を取得（切り上げ）&lt;code&gt;CEIL()&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;ややトリッキーな関数ですが，まずはコードを見てみましょう．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-sql"&gt;
SELECT CEIL(10.1)
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="nb-html-output"&gt;&lt;table style="margin-bottom: 30px;"&gt;
    &lt;tbody&gt;&lt;tr&gt;
        &lt;th&gt;ceil&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;11&lt;/td&gt;
    &lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;結果は&lt;code&gt;11&lt;/code&gt;となりました．&lt;br&gt;
これは引数の数値について，大きい側の整数を取っているためです．&lt;br&gt;
&lt;code&gt;CEIL()&lt;/code&gt;は&lt;strong&gt;引数が正の値&lt;/strong&gt;であれば切り上げと同じ挙動です．&lt;/p&gt;
&lt;pre style="margin-bottom: 90px;"&gt;
10 ・・ 10.1 ・・・・・ &lt;span style="text-decoration: underline;"&gt;11&lt;/span&gt;
　　 　   ↑ 引数
&lt;/pre&gt;

&lt;p&gt;引数が負の値であっても大きい側の値を取ります．&lt;br&gt;
ただし，正の値とは異なり切り上げとは違う挙動です．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-sql"&gt;
SELECT CEIL(-10.1)
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="nb-html-output"&gt;&lt;table style="margin-bottom: 30px;"&gt;
    &lt;tbody&gt;&lt;tr&gt;
        &lt;th&gt;ceil&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;-10&lt;/td&gt;
    &lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;切り上げにはなっておらず，&lt;u&gt;大きい方の値&lt;/u&gt;を取っています．&lt;/p&gt;
&lt;pre style="margin-bottom: 40px;"&gt;
-11 ・・・・・ -10.1 ・・ &lt;span style="text-decoration: underline;"&gt;-10&lt;/span&gt;
　　　　　　　   ↑ 引数
&lt;/pre&gt;

&lt;div class="admonition info-box"&gt;
&lt;p class="admonition-title"&gt;参考&lt;/p&gt;
&lt;p&gt;&lt;code&gt;CEIL()&lt;/code&gt;は&lt;code&gt;CEILING()&lt;/code&gt;と同一の関数です．&lt;br&gt;
なお&lt;code&gt;CEIL()&lt;/code&gt;に整数を渡すとそのまま帰ってきます（&lt;code&gt;SELECT CEIL(10) -&amp;gt; 10&lt;/code&gt;）&lt;/p&gt;
&lt;/div&gt;
&lt;h3 id="floor"&gt;小さい側の整数を取得（切り捨て）&lt;code&gt;FLOOR()&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;FLOOR()&lt;/code&gt;は&lt;code&gt;CEIL()&lt;/code&gt;の逆の挙動をする関数です．&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-sql"&gt;
SELECT FLOOR(10.1)
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="nb-html-output"&gt;&lt;table style="margin-bottom: 30px;"&gt;
    &lt;tbody&gt;&lt;tr&gt;
        &lt;th&gt;floor&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;10&lt;/td&gt;
    &lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;結果が&lt;code&gt;10&lt;/code&gt;となったのは，以下のように引数の数値の小さい側の整数を取っているためです．&lt;br&gt;
&lt;code&gt;FLOOR()&lt;/code&gt;は&lt;strong&gt;引数が正の値&lt;/strong&gt;であれば切り捨てと同じ挙動です．&lt;/p&gt;
&lt;pre style="margin-bottom: 90px;"&gt;
&lt;span style="text-decoration: underline;"&gt;10&lt;/span&gt; ・・ 10.1 ・・・・・ 11
　　　　 ↑ 引数
&lt;/pre&gt;

&lt;p&gt;引数が負の値であっても小さい側の値を取ります．&lt;br&gt;
ただし，正の値とは異なり切り捨てとは違う挙動です．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-sql"&gt;
SELECT FLOOR(-10.1)
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="nb-html-output"&gt;&lt;table style="margin-bottom: 30px;"&gt;
    &lt;tbody&gt;&lt;tr&gt;
        &lt;th&gt;floor&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;-11&lt;/td&gt;
    &lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;切り捨てにはなっておらず，&lt;u&gt;小さい方の値&lt;/u&gt;を取っています．&lt;/p&gt;
&lt;pre style="margin-bottom: 90px;"&gt;
&lt;span style="text-decoration: underline;"&gt;-11&lt;/span&gt; ・・・・・ -10.1 ・・ -10
　　　　　　　　↑ 引数
&lt;/pre&gt;

&lt;h3 id="scale"&gt;小数点以下の桁数を数える &lt;code&gt;SCALE()&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;小数点以下の桁数を数える関数もあります．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-sql"&gt;
SELECT SCALE(1.23456789)
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="nb-html-output" style="margin-bottom: 90px;"&gt;&lt;table&gt;
    &lt;tbody&gt;&lt;tr&gt;
        &lt;th&gt;scale&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;8&lt;/td&gt;
    &lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;

&lt;h2 id="_3"&gt;ひとこと&lt;/h2&gt;
&lt;p&gt;小数点まわりの操作をさらっと見てみました．&lt;br&gt;
SQLでデータを取得する際に必要に応じて使えそうな内容ですね．&lt;/p&gt;
&lt;div style="margin-bottom: 100px;"&gt;&lt;/div&gt;

&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;第二引数のデフォルトも&lt;code&gt;ROUND()&lt;/code&gt;と同様に&lt;code&gt;0&lt;/code&gt;（小数点以下で切り捨て）です．&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="SQL"></category><category term="PostgreSQL"></category></entry><entry><title>【Python】テキストファイル（.txt）をリストで読み込む/書き込む方法</title><link href="https://www.tecrab.com/articles/python-with-txt-to-list.html" rel="alternate"></link><published>2021-11-30T00:00:00+09:00</published><updated>2022-01-04T00:00:00+09:00</updated><author><name>かに</name></author><id>tag:www.tecrab.com,2021-11-30:/articles/python-with-txt-to-list.html</id><summary type="html">&lt;p&gt;Pythonでテキストファイルを読み込み，リストとして利用する方法について解説しています．&lt;/p&gt;</summary><content type="html">&lt;div class="admonition abstract"&gt;
&lt;p&gt;本記事では以下の内容を解説しています．
&lt;ul style="margin: -5px 0px 0px 15px;"&gt;
    &lt;li&gt;テキストファイルをPythonで読み込みリスト化する&lt;/li&gt;
    &lt;li&gt;余分なスペースや改行，重複を削除して読み込む&lt;/li&gt;
    &lt;li&gt;リスト型のデータをテキストファイルに追記する&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;目次&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#python"&gt;テキストファイルをPythonで読み込みリスト化する&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;文字列をリストで取得&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;重複を削除したリストを取得&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;重複削除＋順序を保持したリストを取得&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_4"&gt;リスト型のデータをテキストファイルに追記する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_5"&gt;ひとこと&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="python"&gt;テキストファイルをPythonで読み込みリスト化する&lt;/h2&gt;
&lt;p&gt;使用するテキストファイルは&lt;code&gt;sample.txt&lt;/code&gt;です．&lt;br&gt;
このファイルを読み込んでリスト化していきます．&lt;br&gt;
（説明のために本来は不要な改行やスペース，重複を入れています）&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sample.txt&lt;/code&gt;の内容&lt;/p&gt;
&lt;pre style="margin: -15px 0px 90px 0px;"&gt;
えび
かに
　うに
文鳥　

かに
&lt;/pre&gt;

&lt;h3 id="_1"&gt;文字列をリストで取得&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;with&lt;/code&gt;文とリスト内包表記を使用して以下のように書くと，リストで文字列を取得できます．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;
with open('./sample.txt', mode='r', encoding='utf-8') as f:
    txt = [word.strip() for word in f if word != '\n']
txt
&lt;/code&gt;&lt;/pre&gt;
&lt;pre style="margin-bottom: 30px;"&gt;
['えび', 'かに', 'うに', '文鳥', 'かに']
&lt;/pre&gt;

&lt;div class="admonition explanation"&gt;
&lt;p class="admonition-title"&gt;解説&lt;/p&gt;
&lt;p&gt;&lt;code&gt;open()&lt;/code&gt;の第一引数でテキストファイルのパス&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;，第二引数で読み込み専用モード&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2"&gt;2&lt;/a&gt;&lt;/sup&gt;, 第三引数でencodingを指定しています．&lt;/p&gt;
&lt;p&gt;２行目：&lt;code&gt;for&lt;/code&gt;文でテキストファイルの内容を順に取得します．&lt;br&gt;
この際に&lt;code&gt;if word != '\n'&lt;/code&gt;で改行だけの行を除くようにしています．&lt;/p&gt;
&lt;p&gt;取り出した&lt;code&gt;word&lt;/code&gt;をリストに追加する際に&lt;code&gt;strip()&lt;/code&gt;メソッドで文字列の前後の余計な空白・改行コードを除去しています．&lt;/p&gt;
&lt;/div&gt;
&lt;div class="admonition info-box"&gt;
&lt;p class="admonition-title"&gt;参考&lt;/p&gt;
&lt;p&gt;&lt;code&gt;strip()&lt;/code&gt;メソッドを使用しないと以下のような結果になります．&lt;br&gt;
全角スペースコードの&lt;code&gt;\u3000&lt;/code&gt;や改行コード&lt;code&gt;\n&lt;/code&gt;が入り込んでいます．
&lt;pre style="margin: 0.8em 1em 0.8em 1em;"&gt;
['えび\n', 'かに\n', '\u3000うに\n', '文鳥\u3000\n', 'かに']
&lt;/pre&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;h3 id="_2"&gt;重複を削除したリストを取得&lt;/h3&gt;
&lt;p&gt;上記で取得したテキストは「かに」が重複しています．&lt;br&gt;
重複を落としたい場合は&lt;code&gt;set()&lt;/code&gt;を使用して以下のようにします．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;
with open('./sample.txt', encoding='utf-8') as f:
    txt = set([word.strip() for word in f if word != '\n'])
txt = list(txt)
txt
&lt;/code&gt;&lt;/pre&gt;
&lt;pre style="margin-bottom: 50px;"&gt;
['えび', '文鳥', 'かに', 'うに']
&lt;/pre&gt;

&lt;div class="admonition warning-box"&gt;
&lt;p class="admonition-title"&gt;注意&lt;/p&gt;
&lt;p&gt;set型は順序が保証されないので，リストの順番は一定ではありません．&lt;br&gt;
リストの順番を保持したい場合は次項を参照．&lt;/p&gt;
&lt;/div&gt;
&lt;h3 id="_3"&gt;重複削除＋順序を保持したリストを取得&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;sorted()&lt;/code&gt;メソッドでリストのindexをキーとして並び替えると順番が保持されます．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;
# 順序を保持したい場合
with open('./sample.txt', encoding='utf-8') as f:
    txt_key = [word.strip() for word in f if word != '\n']
txt = sorted(set(txt_key), key=txt_key.index)
txt
&lt;/code&gt;&lt;/pre&gt;
&lt;pre style="margin-bottom: 90px;"&gt;
['えび', 'かに', 'うに', '文鳥']
&lt;/pre&gt;

&lt;h2 id="_4"&gt;リスト型のデータをテキストファイルに追記する&lt;/h2&gt;
&lt;p&gt;ここではすでにリスト型で存在するデータを&lt;code&gt;sample.txt&lt;/code&gt;に追記する方法を見てみましょう．&lt;br&gt;
変数&lt;code&gt;add_list&lt;/code&gt;のデータが今回追加するデータです．&lt;/p&gt;
&lt;pre style="margin-bottom: 40px;"&gt;&lt;code class="language-python"&gt;
add_list = ['カラス', 'スズメ']
first_loop = True

# mode='a'は既存ファイルへの追記を指定
with open('./sample.txt', mode='a', encoding='utf-8') as f:
    for i in add_list:
        if first_loop:
            f.write('\n' + i + '\n')  # １回目だけ改行を前に入れる
            first_loop = False
        else:
            f.write(i + '\n')  # ２回目以降
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;sample.txt&lt;/code&gt;の内容&lt;/p&gt;
&lt;pre style="margin: -15px 0px 40px 0px;"&gt;
えび
かに
　うに
文鳥　

かに
カラス
スズメ
&lt;/pre&gt;

&lt;div class="admonition explanation"&gt;
&lt;p class="admonition-title"&gt;解説&lt;/p&gt;
&lt;p&gt;&lt;code&gt;with&lt;/code&gt;文を使用し&lt;code&gt;mode = 'a'&lt;/code&gt;としてファイルを開きます．&lt;br&gt;
これによって既存ファイルへの追記ができます．&lt;/p&gt;
&lt;p&gt;追加したいリストの文字列を&lt;code&gt;for&lt;/code&gt;文で取り出し，１回目のループ時だけ前後に改行を入れた状態でファイルへ書き込みます（&lt;code&gt;f.write('\n' + i + '\n')&lt;/code&gt;部分） ２回目以降は文字列の後ろ側に改行を入れます．&lt;/p&gt;
&lt;p&gt;上記の処理によって「かに」の下に「カラス，スズメ」が追加されます．&lt;/p&gt;
&lt;/div&gt;
&lt;div class="admonition info-box"&gt;
&lt;p class="admonition-title"&gt;参考&lt;/p&gt;
&lt;p&gt;単純に書き込むとテキストの一番後ろから追記されるので以下のような結果となります．&lt;/p&gt;
&lt;pre style="margin: 10px 15px 15px 15px;"&gt;
えび
かに
　うに
文鳥　

かにカラススズメ
&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id="_5"&gt;ひとこと&lt;/h2&gt;
&lt;p&gt;テキストを様々な形で利用できると幅が広がりますね．&lt;br&gt;
リストや&lt;code&gt;set&lt;/code&gt;はよく使うのでしっかりと押さえておきたいです．&lt;/p&gt;
&lt;div style="margin-bottom: 100px;"&gt;&lt;/div&gt;

&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;今回は&lt;code&gt;sample.txt&lt;/code&gt;のパスをカレントディレクトリからの相対パスで指定しています．&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;&lt;code&gt;'r'&lt;/code&gt;で読み込み専用モードを指定できます．なお，デフォルトも&lt;code&gt;mode='r'&lt;/code&gt;なので，省略しても結果は同じです．&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Python"></category><category term="Python"></category><category term="自然言語処理"></category></entry><entry><title>PostgreSQL集約関数：SQLで計算や最大・最小値を算出する方法</title><link href="https://www.tecrab.com/articles/sql-aggregate-functions.html" rel="alternate"></link><published>2021-11-23T00:00:00+09:00</published><updated>2022-01-22T00:00:00+09:00</updated><author><name>かに</name></author><id>tag:www.tecrab.com,2021-11-23:/articles/sql-aggregate-functions.html</id><summary type="html">&lt;p&gt;PostgreSQLでの集約関数を確認している記事です．&lt;/p&gt;</summary><content type="html">&lt;div class="admonition abstract"&gt;
&lt;p&gt;本記事では以下の集約関数を見ていきます．
&lt;br&gt;
＜使用イメージ＞
&lt;ul style="margin: -5px 0px 0px 15px;"&gt;
  &lt;li&gt;足し算：&lt;code&gt;SUM()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;データの個数確認：&lt;code&gt;COUNT()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;平均：&lt;code&gt;AVG()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;最大値：&lt;code&gt;MAX()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;最小値：&lt;code&gt;MIN()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;
&lt;p&gt;上記の関数は結果をひとつのデータとして返してきます．&lt;br&gt;
例示を見ながら確認していきましょう．&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;目次&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#postgresql"&gt;PostgreSQLのバージョン&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_1"&gt;事前準備&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#sum"&gt;足し算 SUM()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#count"&gt;データの個数確認 COUNT()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#avg"&gt;平均 AVG()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#max-min"&gt;最大値・最小値 MAX() MIN()&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;条件をつけて集約関数を使用する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_6"&gt;ひとこと&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="postgresql"&gt;PostgreSQLのバージョン&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;psql (PostgreSQL) 14.5&lt;/code&gt;&lt;/p&gt;
&lt;h2 id="_1"&gt;事前準備&lt;/h2&gt;
&lt;p&gt;まずはサンプルのテーブルを作成します．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-sql"&gt;
CREATE TABLE buncho (
    id serial PRIMARY KEY, -- 番号
    name VARCHAR (30) NOT NULL, -- お名前
    age INTEGER NOT NULL, -- 年齢(歳)
    weight DECIMAL(5, 2) NOT NULL, -- 体重(g)
    birdseed DECIMAL(5, 2) NOT NULL -- １日の餌の量(g)
);

INSERT INTO buncho (name, age, weight, birdseed)
VALUES
    ('ぶんぶん', 2, 21.3, 4),
    ('ピースケ', 1, 22.6, 4),
    ('シロ', 3, 23.7, 4),
    ('うずら', 1, 25.9, 6),
    ('らむね', 5, 24.0, 5),
    ('シルバー', 2, 23.5, 5)
;

SELECT * FROM buncho;
&lt;/code&gt;&lt;/pre&gt;

&lt;div class="nb-html-output"&gt;&lt;table&gt;
    &lt;tbody&gt;&lt;tr&gt;
        &lt;th&gt;id&lt;/th&gt;
        &lt;th&gt;name&lt;/th&gt;
        &lt;th&gt;age&lt;/th&gt;
        &lt;th&gt;weight&lt;/th&gt;
        &lt;th&gt;birdseed&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;1&lt;/td&gt;
        &lt;td&gt;ぶんぶん&lt;/td&gt;
        &lt;td&gt;2&lt;/td&gt;
        &lt;td&gt;21.30&lt;/td&gt;
        &lt;td&gt;4.00&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;2&lt;/td&gt;
        &lt;td&gt;ピースケ&lt;/td&gt;
        &lt;td&gt;1&lt;/td&gt;
        &lt;td&gt;22.60&lt;/td&gt;
        &lt;td&gt;4.00&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;3&lt;/td&gt;
        &lt;td&gt;シロ&lt;/td&gt;
        &lt;td&gt;3&lt;/td&gt;
        &lt;td&gt;23.70&lt;/td&gt;
        &lt;td&gt;4.00&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;4&lt;/td&gt;
        &lt;td&gt;うずら&lt;/td&gt;
        &lt;td&gt;1&lt;/td&gt;
        &lt;td&gt;25.90&lt;/td&gt;
        &lt;td&gt;6.00&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;5&lt;/td&gt;
        &lt;td&gt;らむね&lt;/td&gt;
        &lt;td&gt;5&lt;/td&gt;
        &lt;td&gt;24.00&lt;/td&gt;
        &lt;td&gt;5.00&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;6&lt;/td&gt;
        &lt;td&gt;シルバー&lt;/td&gt;
        &lt;td&gt;2&lt;/td&gt;
        &lt;td&gt;23.50&lt;/td&gt;
        &lt;td&gt;5.00&lt;/td&gt;
    &lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;

&lt;h3 id="sum"&gt;足し算 &lt;code&gt;SUM()&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;birdseed 列をすべて足します．&lt;br&gt;
結果を見ると，足し算された結果が１つの値として返ってきていますね．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-sql"&gt;
SELECT
    SUM(birdseed)
FROM
    buncho;
&lt;/code&gt;&lt;/pre&gt;

&lt;div class="nb-html-output"&gt;&lt;table&gt;
    &lt;tbody&gt;&lt;tr&gt;
        &lt;th&gt;sum&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;28.00&lt;/td&gt;
    &lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;

&lt;h3 id="count"&gt;データの個数確認 &lt;code&gt;COUNT()&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;データの個数をカウントします．&lt;br&gt;
６つのデータ（行）がカウントされて返ってきました．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-sql"&gt;
SELECT
    COUNT(*) AS buncho_count
FROM
    buncho;
&lt;/code&gt;&lt;/pre&gt;

&lt;div class="nb-html-output"&gt;&lt;table&gt;
    &lt;tbody&gt;&lt;tr&gt;
        &lt;th&gt;buncho_count&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;6&lt;/td&gt;
    &lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;

&lt;div class="admonition warning-box"&gt;
&lt;p class="admonition-title"&gt;注意&lt;/p&gt;
&lt;p&gt;&lt;code&gt;COUNT(*)&lt;/code&gt;とすると要素がNULLであってもカウントして返してくれます．&lt;br&gt;
特定の列を指定する場合はNULLをカウントせずに返してくれます．&lt;/p&gt;
&lt;/div&gt;
&lt;h3 id="avg"&gt;平均 &lt;code&gt;AVG()&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;データの平均値を算出します.&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-sql"&gt;
SELECT
    ROUND(AVG(weight), 2) AS weight
FROM
    buncho;
&lt;/code&gt;&lt;/pre&gt;

&lt;div class="nb-html-output"&gt;&lt;table&gt;
    &lt;tbody&gt;&lt;tr&gt;
        &lt;th&gt;weight&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;23.50&lt;/td&gt;
    &lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;

&lt;h3 id="max-min"&gt;最大値・最小値 &lt;code&gt;MAX()&lt;/code&gt; &lt;code&gt;MIN()&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;データの最大値・最小値を表示してくれます．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-sql"&gt;
SELECT
    MAX(weight)
FROM
    buncho;
&lt;/code&gt;&lt;/pre&gt;

&lt;div class="nb-html-output" style="margin-bottom: 50px;"&gt;&lt;table&gt;
    &lt;tbody&gt;&lt;tr&gt;
        &lt;th&gt;max&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;25.90&lt;/td&gt;
    &lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;

&lt;pre&gt;&lt;code class="language-sql"&gt;
SELECT
    MIN(weight)
FROM
    buncho;
&lt;/code&gt;&lt;/pre&gt;

&lt;div class="nb-html-output"&gt;&lt;table&gt;
    &lt;tbody&gt;&lt;tr&gt;
        &lt;th&gt;min&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;21.30&lt;/td&gt;
    &lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;

&lt;h2 id="_2"&gt;条件をつけて集約関数を使用する&lt;/h2&gt;
&lt;p&gt;ここでは&lt;code&gt;WHERE&lt;/code&gt;句や&lt;code&gt;GROUP BY&lt;/code&gt;句,&lt;code&gt;HAVING&lt;/code&gt;句で条件を絞って集計する例を見てみます．&lt;/p&gt;
&lt;h5 id="_3"&gt;特定の条件のデータだけを足し算&lt;/h5&gt;
&lt;p&gt;age（年齢）が１歳の文鳥だけに絞って集計してみます．&lt;br&gt;
年齢が１歳の２羽におけるbirdseedを足した結果が返ってきていますね．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-sql"&gt;
SELECT
    SUM(birdseed)
FROM
    buncho
WHERE
    age = 1;
&lt;/code&gt;&lt;/pre&gt;

&lt;div class="nb-html-output"&gt;&lt;table&gt;
    &lt;tbody&gt;&lt;tr&gt;
        &lt;th&gt;sum&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;10.00&lt;/td&gt;
    &lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;

&lt;h5 id="_4"&gt;グループでまとめて足し算&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;GROUP BY&lt;/code&gt;句でage（年齢）ごとにまとめて足し算してみましょう．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-sql"&gt;
SELECT age,
    SUM(birdseed)
FROM
    buncho
GROUP BY
    age
ORDER BY
    age;
&lt;/code&gt;&lt;/pre&gt;

&lt;div class="nb-html-output"&gt;&lt;table style="margin-bottom: 30px;"&gt;
    &lt;tbody&gt;&lt;tr&gt;
        &lt;th&gt;age&lt;/th&gt;
        &lt;th&gt;sum&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;1&lt;/td&gt;
        &lt;td&gt;10.00&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;2&lt;/td&gt;
        &lt;td&gt;9.00&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;3&lt;/td&gt;
        &lt;td&gt;4.00&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;5&lt;/td&gt;
        &lt;td&gt;5.00&lt;/td&gt;
    &lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;今回はデータが少ないのであまりまとまっていませんが，それぞれの年齢ごとにbirdseedが集計されていることがわかりますね．&lt;/p&gt;
&lt;div class="admonition info-box"&gt;
&lt;p class="admonition-title"&gt;参考&lt;/p&gt;
&lt;p&gt;クエリの最後にある&lt;code&gt;ORDER BY&lt;/code&gt;句はage列を基準に並び替えるために入れています．&lt;/p&gt;
&lt;/div&gt;
&lt;h5 id="_5"&gt;一旦集計した結果をさらに絞る&lt;/h5&gt;
&lt;p&gt;上記のグループごとにまとめて足し算した結果のうち，birdseedが７以上のデータを抽出します．&lt;br&gt;
このような場合には&lt;code&gt;HAVING&lt;/code&gt;句に集約関数を記載します．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-sql"&gt;
SELECT age,
    SUM(birdseed) AS birdseed
FROM
    buncho
GROUP BY
    age
HAVING
    SUM(birdseed) &gt;= 7
ORDER BY
    age;
&lt;/code&gt;&lt;/pre&gt;

&lt;div class="nb-html-output"&gt;&lt;table style="margin-bottom: 30px;"&gt;
    &lt;tbody&gt;&lt;tr&gt;
        &lt;th&gt;age&lt;/th&gt;
        &lt;th&gt;birdseed&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;1&lt;/td&gt;
        &lt;td&gt;10.00&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;2&lt;/td&gt;
        &lt;td&gt;9.00&lt;/td&gt;
    &lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;集約した結果に対し，さらに絞り込んだ結果を得ることができました！&lt;/p&gt;
&lt;h2 id="_6"&gt;ひとこと&lt;/h2&gt;
&lt;p&gt;SQLの集約関数について基本的な使い方を勉強しました．&lt;/p&gt;
&lt;div style="margin-bottom: 100px;"&gt;&lt;/div&gt;

&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;&lt;code&gt;ROUND(AVG(weight), 2)&lt;/code&gt;としているのは，出力結果を小数点第二位までとするためです．&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="SQL"></category><category term="PostgreSQL"></category></entry><entry><title>DataFrame内の文字列がリストに含まれるかを確認する方法</title><link href="https://www.tecrab.com/articles/dataframe-str-in-list-query.html" rel="alternate"></link><published>2021-11-12T00:00:00+09:00</published><updated>2022-08-07T00:00:00+09:00</updated><author><name>かに</name></author><id>tag:www.tecrab.com,2021-11-12:/articles/dataframe-str-in-list-query.html</id><summary type="html">&lt;p&gt;DataFrameの文字列をリストと照合する方法について解説しています．&lt;/p&gt;</summary><content type="html">&lt;div class="admonition abstract"&gt;
&lt;p&gt;本記事ではDataFrameの文字列と別途定義したリストを照合し，リストに含まれる/含まれない行を抽出する方法について解説しています．
&lt;ul style="margin: -5px 0px 0px 15px;"&gt;
  &lt;li&gt;
  公式 Reference: &lt;a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.query.html" rel="noopener noreferrer" target="_blank"&gt;pandas.DataFrame.query&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;目次&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;事前準備&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#dataframe"&gt;DataFrameの文字列をリストと照合&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#dataframe_1"&gt;DataFrame同士で比較&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;ひとこと&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="_1"&gt;事前準備&lt;/h2&gt;
&lt;p&gt;まずはサンプルのDataFrameを作成します．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;
import pandas as pd

df1 = pd.DataFrame({
    'birds': ['十姉妹', '文鳥', 'ハヤブサ', 'カラス'],
    'weight(g)': [15, 26, 950, 650]
})
df1
&lt;/code&gt;&lt;/pre&gt;

&lt;table class="dataframe" border="1"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;birds&lt;/th&gt;
      &lt;th&gt;weight(g)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;十姉妹&lt;/td&gt;
      &lt;td&gt;15&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;文鳥&lt;/td&gt;
      &lt;td&gt;26&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;ハヤブサ&lt;/td&gt;
      &lt;td&gt;950&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;カラス&lt;/td&gt;
      &lt;td&gt;650&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id="dataframe"&gt;DataFrameの文字列をリストと照合&lt;/h3&gt;
&lt;p&gt;作成したDataFrameのbirds列内に特定の文字列が含まれるかを調べます．&lt;br&gt;
特定の文字列をリストとして定義し，そのリスト内にある文字列とDataFrameのbirds列を照合します．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;
# 調べたいリスト
birds_list = ['文鳥', 'ハト', 'ムクドリ', 'カラス']

# dfの文字列がリスト内に含まれる場合，dfを返す
df1.query('birds in @birds_list')
&lt;/code&gt;&lt;/pre&gt;

&lt;table class="dataframe" border="1" style="margin-bottom: 30px;"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;birds&lt;/th&gt;
      &lt;th&gt;weight(g)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;文鳥&lt;/td&gt;
      &lt;td&gt;26&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;カラス&lt;/td&gt;
      &lt;td&gt;650&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;birds列と&lt;code&gt;birds_list&lt;/code&gt;で一致している「文鳥」「カラス」だけがDataFrameとして返ってきていますね．&lt;/p&gt;
&lt;div class="admonition info-box"&gt;
&lt;p class="admonition-title"&gt;参考&lt;/p&gt;
&lt;p&gt;&lt;code&gt;query()&lt;/code&gt;内で変数を使用する場合は&lt;code&gt;@&lt;/code&gt;を変数の前に付けます．&lt;br&gt;
今回は変数を使用していますが直接リストを指定してもOKです.&lt;/p&gt;
&lt;/div&gt;
&lt;h5 id="_2"&gt;リストに「含まれない」行を抽出&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;not in&lt;/code&gt;を使用して，以下のようにすればOKです．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;
# 含まれない，を調べる場合は not in 
df1.query('birds not in @birds_list')
&lt;/code&gt;&lt;/pre&gt;

&lt;table class="dataframe" border="1" style="margin-bottom: 30px;"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;birds&lt;/th&gt;
      &lt;th&gt;weight(g)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;十姉妹&lt;/td&gt;
      &lt;td&gt;15&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;ハヤブサ&lt;/td&gt;
      &lt;td&gt;950&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;birds列と&lt;code&gt;birds_list&lt;/code&gt;で一致していない「十姉妹」「ハヤブサ」だけになりましたね．&lt;/p&gt;
&lt;h3 id="dataframe_1"&gt;DataFrame同士で比較&lt;/h3&gt;
&lt;p&gt;DataFrame同士を比較することもできます．&lt;br&gt;
準備として比較用のDataFrameを新たに作成し&lt;code&gt;df1&lt;/code&gt;と共に出力しています．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;
# 比較するdfの作成
df2 = pd.DataFrame({
    'birds': ['十姉妹', '文鳥', 'ハヤブサ', 'ハト'],
    'weight(g)': [15, 26, 950, 350]
})
display(df1)
display(df2)
&lt;/code&gt;&lt;/pre&gt;

&lt;table class="dataframe" border="1" style="margin-bottom: 10px;"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;birds&lt;/th&gt;
      &lt;th&gt;weight(g)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;十姉妹&lt;/td&gt;
      &lt;td&gt;15&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;文鳥&lt;/td&gt;
      &lt;td&gt;26&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;ハヤブサ&lt;/td&gt;
      &lt;td&gt;950&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;カラス&lt;/td&gt;
      &lt;td&gt;650&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table class="dataframe" border="1" style="margin-bottom: 30px;"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;birds&lt;/th&gt;
      &lt;th&gt;weight(g)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;十姉妹&lt;/td&gt;
      &lt;td&gt;15&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;文鳥&lt;/td&gt;
      &lt;td&gt;26&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;ハヤブサ&lt;/td&gt;
      &lt;td&gt;950&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;ハト&lt;/td&gt;
      &lt;td&gt;350&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;以下でbirds列同士を比較します．&lt;br&gt;
&lt;code&gt;df1&lt;/code&gt;のbirds列のうち「カラス」だけが&lt;code&gt;df2&lt;/code&gt;のbirds列に含まれないので「カラス」が出力されています．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;
df1.query('birds not in @df2["birds"]')
&lt;/code&gt;&lt;/pre&gt;

&lt;table class="dataframe" border="1" style="margin-bottom: 30px;"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;birds&lt;/th&gt;
      &lt;th&gt;weight(g)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;カラス&lt;/td&gt;
      &lt;td&gt;650&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;details class="accordion-block"&gt;
&lt;summary&gt;詳細が知りたい方はこちらをクリック&lt;/summary&gt;
&lt;div class="accordion-summary"&gt;
&lt;p&gt;このコードではこれまでリストを指定していた&lt;code&gt;@&lt;/code&gt;以降の部分に&lt;code&gt;df2["birds"]&lt;/code&gt;(=pandas Series)を指定しています．&lt;/p&gt;
&lt;p&gt;Seriesはリストと概ね同じように扱うことができ&lt;code&gt;in&lt;/code&gt;演算子も使えるため，上記のようなコードを実行することが可能です．&lt;/p&gt;
&lt;p&gt;なお&lt;code&gt;df2["birds"]&lt;/code&gt;とデータ型を見ると以下のような感じです．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;
print(s := df2["birds"], '\n')  # '\n' は改行を入れているだけです．
print(type(s))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre style="margin-bottom: 10px;"&gt;
0     十姉妹
1      文鳥
2    ハヤブサ
3      ハト
Name: birds, dtype: object

&amp;lt;class 'pandas.core.series.Series'&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;h2 id="_3"&gt;ひとこと&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;query()&lt;/code&gt;はDataFrameのデータを見る際などによく使うので，さっと使えると便利ですね．&lt;/p&gt;
&lt;div style="margin-bottom: 100px;"&gt;&lt;/div&gt;</content><category term="Python"></category><category term="Python"></category><category term="pandas"></category></entry><entry><title>DataFrame同士の差分を確認する方法</title><link href="https://www.tecrab.com/articles/dataframe-isin.html" rel="alternate"></link><published>2021-11-06T00:00:00+09:00</published><updated>2022-08-07T00:00:00+09:00</updated><author><name>かに</name></author><id>tag:www.tecrab.com,2021-11-06:/articles/dataframe-isin.html</id><summary type="html">&lt;p&gt;２つのDataFrameを比較する方法を解説しています．&lt;/p&gt;</summary><content type="html">&lt;div class="admonition abstract"&gt;
&lt;p&gt;本記事ではDataFrame同士の差分を確認する方法について解説しています．&lt;br&gt;
pandasの&lt;code&gt;merge()&lt;/code&gt;や&lt;code&gt;isin()&lt;/code&gt;を使っています．&lt;/p&gt;
&lt;p&gt;公式 Reference
&lt;ul style="margin: -15px 0px 0px 15px;"&gt;
  &lt;li&gt;
  &lt;a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.merge.html" rel="noopener noreferrer" target="_blank"&gt;pandas.DataFrame.merge&lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
  &lt;a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.isin.html" rel="noopener noreferrer" target="_blank"&gt;pandas.DataFrame.isin&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;目次&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;事前準備&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#dataframe"&gt;DataFrame同士の差分を横並びで確認&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#dataframe_1"&gt;DataFrame同士の完全一致を確認&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;差分（一致しない）行だけを確認&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#dataframe_2"&gt;片方のDataFrameを基準に両者の差分のみを確認&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;ひとこと&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="_1"&gt;事前準備&lt;/h2&gt;
&lt;p&gt;まずはサンプルのDataFrameを２つ作成します．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;
import pandas as pd

df1 = pd.DataFrame({
    'sushi': ['まぐろ', 'いくら', 'えび'],
    'price': [500, 300, 150]
})
display(df1)

df2 = pd.DataFrame({
    'sushi': ['まぐろ', 'うに', 'えび'],
    'price': [500, 400, 130]
})
display(df2)
&lt;/code&gt;&lt;/pre&gt;
&lt;table class="dataframe" border="1" style="margin-bottom: 10px;"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;sushi&lt;/th&gt;
      &lt;th&gt;price&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;まぐろ&lt;/td&gt;
      &lt;td&gt;500&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;いくら&lt;/td&gt;
      &lt;td&gt;300&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;えび&lt;/td&gt;
      &lt;td&gt;150&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table class="dataframe" border="1"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;sushi&lt;/th&gt;
      &lt;th&gt;price&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;まぐろ&lt;/td&gt;
      &lt;td&gt;500&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;うに&lt;/td&gt;
      &lt;td&gt;400&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;えび&lt;/td&gt;
      &lt;td&gt;130&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id="dataframe"&gt;DataFrame同士の差分を横並びで確認&lt;/h3&gt;
&lt;p&gt;２つのDataFrameを横並びにして確認する場合は以下のとおりです．&lt;br&gt;
sushi列を基準にDataFrameを結合しています．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;
pd.merge(df1, df2, how='outer', on='sushi')
&lt;/code&gt;&lt;/pre&gt;

&lt;table class="dataframe" border="1" style="margin-bottom: 30px;"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;sushi&lt;/th&gt;
      &lt;th&gt;price_x&lt;/th&gt;
      &lt;th&gt;price_y&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;まぐろ&lt;/td&gt;
      &lt;td&gt;500.0&lt;/td&gt;
      &lt;td&gt;500.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;いくら&lt;/td&gt;
      &lt;td&gt;300.0&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;えび&lt;/td&gt;
      &lt;td&gt;150.0&lt;/td&gt;
      &lt;td&gt;130.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;うに&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;400.0&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;片方のDataFrameにしか存在しない要素に関しては&lt;code&gt;NaN&lt;/code&gt;となります.&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;div class="admonition info-box"&gt;
&lt;p class="admonition-title"&gt;参考&lt;/p&gt;
&lt;p&gt;結合したDataFrameのカラム名（&lt;code&gt;price_x&lt;/code&gt;, &lt;code&gt;price_y&lt;/code&gt;）を変更したい場合は以下のように&lt;code&gt;suffixes&lt;/code&gt;引数を追加します．&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code class="language-python"&gt;
pd.merge(df1, df2, how='outer', on='sushi', suffixes=('_df1', '_df2'))
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;&lt;table class="dataframe" border="1" style="margin: 10px 0px 20px 20px;"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;sushi&lt;/th&gt;
      &lt;th&gt;price_df1&lt;/th&gt;
      &lt;th&gt;price_df2&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;まぐろ&lt;/td&gt;
      &lt;td&gt;500.0&lt;/td&gt;
      &lt;td&gt;500.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;いくら&lt;/td&gt;
      &lt;td&gt;300.0&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;えび&lt;/td&gt;
      &lt;td&gt;150.0&lt;/td&gt;
      &lt;td&gt;130.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;うに&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;400.0&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;h3 id="dataframe_1"&gt;DataFrame同士の完全一致を確認&lt;/h3&gt;
&lt;p&gt;DataFrame同士で完全に一致しているデータを見たい場合は以下のとおりです．&lt;br&gt;
sushi列とprice列が一致している行だけが抽出されています．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;
pd.merge(df1, df2, how='inner')
&lt;/code&gt;&lt;/pre&gt;

&lt;table class="dataframe" border="1" style="margin-bottom: 90px;"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;sushi&lt;/th&gt;
      &lt;th&gt;price&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;まぐろ&lt;/td&gt;
      &lt;td&gt;500&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id="_2"&gt;差分（一致しない）行だけを確認&lt;/h3&gt;
&lt;p&gt;DataFrame同士の差分を確認するには以下のようにします．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;
df = pd.merge(df1, df2, how='outer', on='sushi', suffixes=('_df1', '_df2'))
df['flag'] = df['price_df1'] == df['price_df2']
df.query('flag == False')
&lt;/code&gt;&lt;/pre&gt;

&lt;table class="dataframe" border="1" style="margin-bottom: 30px;"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;sushi&lt;/th&gt;
      &lt;th&gt;price_df1&lt;/th&gt;
      &lt;th&gt;price_df2&lt;/th&gt;
      &lt;th&gt;flag&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;いくら&lt;/td&gt;
      &lt;td&gt;300.0&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;えび&lt;/td&gt;
      &lt;td&gt;150.0&lt;/td&gt;
      &lt;td&gt;130.0&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;うに&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;400.0&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;コードの内容は以下のとおりです．&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;DataFrameを結合&lt;/li&gt;
&lt;li&gt;各price列同士の一致を確認し，結果を新しい列として追加&lt;/li&gt;
&lt;li&gt;flag列が&lt;code&gt;False&lt;/code&gt;のデータだけを抽出&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="dataframe_2"&gt;片方のDataFrameを基準に両者の差分のみを確認&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;df1&lt;/code&gt;のsushi列と&lt;code&gt;df2&lt;/code&gt;のsushi列を比較して，&lt;code&gt;df1&lt;/code&gt;にのみ存在する要素を表示しています．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;
df1[~df1['sushi'].isin(df2['sushi'])]
&lt;/code&gt;&lt;/pre&gt;

&lt;table class="dataframe" border="2" style="margin-bottom: 30px;"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;sushi&lt;/th&gt;
      &lt;th&gt;price&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;いくら&lt;/td&gt;
      &lt;td&gt;300&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;code&gt;df2&lt;/code&gt;にのみ存在する要素は以下のとおりです．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;
df2[~df2['sushi'].isin(df1['sushi'])]
&lt;/code&gt;&lt;/pre&gt;

&lt;table class="dataframe" border="1" style="margin-bottom: 30px;"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;sushi&lt;/th&gt;
      &lt;th&gt;price&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;うに&lt;/td&gt;
      &lt;td&gt;400&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;なお，&lt;code&gt;df1&lt;/code&gt;, &lt;code&gt;df2&lt;/code&gt;の両方に存在する要素をsushi列基準で取得するには以下のとおりです．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;
df1[df1['sushi'].isin(df2['sushi'])]
&lt;/code&gt;&lt;/pre&gt;

&lt;table class="dataframe" border="1" style="margin-bottom: 50px;"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;sushi&lt;/th&gt;
      &lt;th&gt;price&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;まぐろ&lt;/td&gt;
      &lt;td&gt;500&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;えび&lt;/td&gt;
      &lt;td&gt;150&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;div class="admonition warning-box"&gt;
&lt;p class="admonition-title"&gt;注意&lt;/p&gt;
&lt;p&gt;この方法では他の列（=price列）の一致は無視しています．&lt;br&gt;
あくまでもsushi列同士の比較です．&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id="_3"&gt;ひとこと&lt;/h2&gt;
&lt;p&gt;たまに目視でDataFrame同士を見たりする際に使います．&lt;br&gt;
&lt;code&gt;isin()&lt;/code&gt;はここで紹介した以外でも色々と使えるので，使えると便利です．&lt;/p&gt;
&lt;div style="margin-bottom: 100px;"&gt;&lt;/div&gt;

&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;例えば「いくら」は&lt;code&gt;df1&lt;/code&gt;には存在しますが，&lt;code&gt;df2&lt;/code&gt;には存在しないので，&lt;code&gt;price_y&lt;/code&gt;(=&lt;code&gt;df2&lt;/code&gt;の&lt;code&gt;price&lt;/code&gt;列)は&lt;code&gt;NaN&lt;/code&gt;となっています．&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Python"></category><category term="Python"></category><category term="pandas"></category></entry><entry><title>【Mac Keynote】スライドのサイズ（比率）を変更する方法</title><link href="https://www.tecrab.com/articles/mac-keynote-slidesize.html" rel="alternate"></link><published>2021-11-04T00:00:00+09:00</published><updated>2022-07-05T00:00:00+09:00</updated><author><name>かに</name></author><id>tag:www.tecrab.com,2021-11-04:/articles/mac-keynote-slidesize.html</id><summary type="html">&lt;p&gt;Appleのプレゼンソフト「Keynote」でスライドのサイズ（比率）を変更する方法です．&lt;/p&gt;</summary><content type="html">&lt;div class="admonition abstract"&gt;
&lt;p&gt;Appleのプレゼンソフト「Keynote」でスライドのサイズ（比率）を変更する方法です．&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;目次&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;サイズ（比率）の設定方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#keynote"&gt;Keynote作成時にサイズを変更する場合&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#keynote_1"&gt;既存のKeynoteの設定を変更する&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_2"&gt;任意の比率に設定&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;ショートカットキーはありません・・・&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_4"&gt;ひとこと&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="_1"&gt;サイズ（比率）の設定方法&lt;/h2&gt;
&lt;p&gt;設定方法は以下の２種類がありますので，それぞれ見ていきましょう．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Keynote作成時にサイズを変更する&lt;/li&gt;
&lt;li&gt;既存のKeynoteの設定を変更する&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="keynote"&gt;Keynote作成時にサイズを変更する場合&lt;/h2&gt;
&lt;h5 id="1-keynote"&gt;① Keynoteのテーマを選択する画面の右上のプルダウンをクリック&lt;/h5&gt;
&lt;p&gt;&lt;img src="/images/keynote-slidesize/keynote-slidesize_01.png" width="600" height="218"&gt;&lt;/p&gt;
&lt;h5 id="2"&gt;② 出てきたメニューより任意のサイズを選択すれば完了です&lt;/h5&gt;
&lt;p&gt;&lt;img src="/images/keynote-slidesize/keynote-slidesize_02.png" width="600" height="178"&gt;&lt;/p&gt;
&lt;h2 id="keynote_1"&gt;既存のKeynoteの設定を変更する&lt;/h2&gt;
&lt;h5 id="1-keynote_1"&gt;① Keynote画面の右上にある「書類」をクリック&lt;/h5&gt;
&lt;p&gt;&lt;img src="/images/keynote-slidesize/keynote-slidesize_03.png" width="350" height="120"&gt;&lt;/p&gt;
&lt;h5 id="2_1"&gt;② 出てきたメニューにある「スライドのサイズ」のプルダウンをクリック&lt;/h5&gt;
&lt;p&gt;&lt;img src="/images/keynote-slidesize/keynote-slidesize_04.png" width="300" height="666"&gt;&lt;/p&gt;
&lt;h5 id="3"&gt;③ プルダウンのメニューより任意のサイズが選択できます&lt;/h5&gt;
&lt;p&gt;&lt;img src="/images/keynote-slidesize/keynote-slidesize_05.png" width="320" height="156" style="margin-bottom: 10px;"&gt;&lt;/p&gt;
&lt;div class="admonition danger-box"&gt;
&lt;p class="admonition-title"&gt;注意&lt;/p&gt;
&lt;p&gt;既存のスライドに新しいサイズを適用すると，全体の比率が変わってテキストボックスや図形，画像などの調整が必要になる場合があるのでご注意ください．&lt;/p&gt;
&lt;/div&gt;
&lt;h3 id="_2"&gt;任意の比率に設定&lt;/h3&gt;
&lt;p&gt;前項の手順「③ プルダウンのメニュー」で「カスタムのスライドサイズ」を選択すると以下の画面が出てきます．&lt;br&gt;
ここでスライドを任意のサイズに変更できるので，必要に応じて使ってみましょう．&lt;br&gt;
&lt;img src="/images/keynote-slidesize/keynote-slidesize_06.png" width="400" height="145"&gt;&lt;/p&gt;
&lt;h3 id="_3"&gt;ショートカットキーはありません・・・&lt;/h3&gt;
&lt;p&gt;残念ながらショートカットキーはないようです・・・&lt;/p&gt;
&lt;h2 id="_4"&gt;ひとこと&lt;/h2&gt;
&lt;p&gt;本記事ではKeynoteのスライドサイズ変更に関する方法をご紹介しました．&lt;br&gt;
最近16:4で作成されている資料が多いように思います（デフォルトのままなのかな）&lt;br&gt;
個人的には4:3の方が見やすくて好きなので4:3で統一しています．&lt;/p&gt;
&lt;div style="margin-bottom: 100px;"&gt;&lt;/div&gt;</content><category term="Mac"></category><category term="Keynote"></category></entry><entry><title>【pandas】applymap 関数の数値処理と速度</title><link href="https://www.tecrab.com/articles/dataframe-applymap-int-speed.html" rel="alternate"></link><published>2021-11-03T00:00:00+09:00</published><updated>2022-08-07T00:00:00+09:00</updated><author><name>かに</name></author><id>tag:www.tecrab.com,2021-11-03:/articles/dataframe-applymap-int-speed.html</id><summary type="html">&lt;p&gt;DataFrameのapplymap関数を使用した数値処理と速度を確認しています．&lt;/p&gt;</summary><content type="html">&lt;div class="admonition abstract"&gt;
&lt;p&gt;&lt;code&gt;applymap()&lt;/code&gt;を使用した数値処理と速度を確認しています．&lt;br&gt;
&lt;ul style="margin: -5px 0px 0px 15px;"&gt;
  &lt;li&gt;
  公式 Reference: &lt;a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.applymap.html" rel="noopener noreferrer" target="_blank"&gt;pandas.DataFrame.applymap&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;目次&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;事前準備&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#dataframe10"&gt;DataFrameの各要素を10倍にする&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;処理速度の比較&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;ひとこと&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="_1"&gt;事前準備&lt;/h2&gt;
&lt;p&gt;まずはサンプルのDataFrameを作成します．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;
import numpy as np
import pandas as pd

# DataFrameの作成
df = pd.DataFrame([[1, 2], [3, 4]], columns=['col1', 'col2'])
df
&lt;/code&gt;&lt;/pre&gt;

&lt;table class="dataframe" border="1"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;col1&lt;/th&gt;
      &lt;th&gt;col2&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id="dataframe10"&gt;DataFrameの各要素を10倍にする&lt;/h3&gt;
&lt;p&gt;DataFrameの各要素を10倍にする方法として以下の2種類を見てみましょう．&lt;br&gt;
得られる結果はいずれも同じです．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;
df * 10
&lt;/code&gt;&lt;/pre&gt;

&lt;table class="dataframe" border="1" style="margin-bottom: 50px;"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;col1&lt;/th&gt;
      &lt;th&gt;col2&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;10&lt;/td&gt;
      &lt;td&gt;20&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;30&lt;/td&gt;
      &lt;td&gt;40&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class="language-python"&gt;
# dfの各要素に対して10倍の処理を適用
df.applymap(lambda x: x * 10)
&lt;/code&gt;&lt;/pre&gt;

&lt;table class="dataframe" border="1"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;col1&lt;/th&gt;
      &lt;th&gt;col2&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;10&lt;/td&gt;
      &lt;td&gt;20&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;30&lt;/td&gt;
      &lt;td&gt;40&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id="_2"&gt;処理速度の比較&lt;/h3&gt;
&lt;p&gt;「DataFrame の各要素を10倍」という処理では&lt;code&gt;df * 10&lt;/code&gt;と&lt;code&gt;applymap()&lt;/code&gt;を使用するパターンの２パターンがありました．これらは処理速度の問題で前者の方が望ましいとされています&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;が，どの程度違うのか簡単に検証してみましょう．&lt;/p&gt;
&lt;p&gt;まず，1000x50のDataFrameを作成します．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;
m = 1000
n = 50

df_large = pd.DataFrame(np.random.normal(5, 2, m * n).reshape(m, n))
df_large.shape
&lt;/code&gt;&lt;/pre&gt;
&lt;pre style="margin-bottom: 90px;"&gt;
(1000, 50)
&lt;/pre&gt;

&lt;p&gt;上のコードで作成したDataFrameの各要素を10倍する処理を&lt;code&gt;df * 10&lt;/code&gt;と&lt;code&gt;applymap()&lt;/code&gt;の２パターンで比較します．&lt;/p&gt;
&lt;p&gt;以下のコードでは100回の処理を3回繰り返した場合における処理速度の平均と標準偏差を見ています.&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2"&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;
%%timeit -r 3 -n 100

# 100回の処理を3回繰り返した時の処理時間
df_large * 10
&lt;/code&gt;&lt;/pre&gt;
&lt;pre style="margin-bottom: 50px;"&gt;
33.1 µs ± 6.35 µs per loop (mean ± std. dev. of 3 runs, 100 loops each)
&lt;/pre&gt;

&lt;pre&gt;&lt;code class="language-python"&gt;
%%timeit -r 3 -n 100

# 100回の処理を3回繰り返した時の処理時間
df_large.applymap(lambda x: x * 10)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre style="margin-bottom: 50px;"&gt;
6.97 ms ± 78.4 µs per loop (mean ± std. dev. of 3 runs, 100 loops each)
&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;df * 10&lt;/code&gt;の方が200倍以上早いですね・・・&lt;br&gt;
数値計算では公式どおり&lt;code&gt;applymap()&lt;/code&gt;を使うことは避けましょう．&lt;/p&gt;
&lt;h2 id="_3"&gt;ひとこと&lt;/h2&gt;
&lt;p&gt;今回確認したDataFrameはそれほど大きいDataFrameではありませんが，かなりの差が出ました．もっと大きいDataFrameだと目も当てられない速度差になりそうです．&lt;/p&gt;
&lt;div class="admonition explanation"&gt;
&lt;p class="admonition-title"&gt;関連記事&lt;/p&gt;
&lt;p&gt;&lt;code&gt;applymap()&lt;/code&gt;で文字列を扱う記事はこちらです．
&lt;ul style="margin: -5px 0px 0px 15px;"&gt;
    &lt;li&gt;
    &lt;a href="https://www.revalab.net/dataframe-applymap-str-count/" rel="noopener noreferrer" target="_blank"&gt;【pandas】applymap 関数の数値処理と速度&lt;/a&gt;
    &lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div style="margin-bottom: 100px;"&gt;&lt;/div&gt;

&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;公式 Reference でそのように言及されています．&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;Jupyterのマジックコマンドを使用しています．&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Python"></category><category term="Python"></category><category term="pandas"></category></entry><entry><title>【pandas】DataFrame 要素の文字数をカウントする方法（applymap）</title><link href="https://www.tecrab.com/articles/dataframe-applymap-str-count.html" rel="alternate"></link><published>2021-11-03T00:00:00+09:00</published><updated>2022-08-07T00:00:00+09:00</updated><author><name>かに</name></author><id>tag:www.tecrab.com,2021-11-03:/articles/dataframe-applymap-str-count.html</id><summary type="html">&lt;p&gt;DataFrameの各要素に対する処理（文字数カウントなど）を解説しています．&lt;/p&gt;</summary><content type="html">&lt;div class="admonition abstract"&gt;
&lt;p&gt;本記事では&lt;code&gt;applymap()&lt;/code&gt;を使用した以下の内容を解説しています．
&lt;br&gt;
&lt;ul style="margin: -5px 0px 0px 15px;"&gt;
  &lt;li&gt;DataFrameにあるテキストの文字数をカウント&lt;/li&gt;
  &lt;li&gt;DataFrameの各要素に何らかの処理を適用する&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;
&lt;p&gt;公式 Reference: &lt;a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.applymap.html" rel="noopener noreferrer" target="_blank"&gt;pandas.DataFrame.applymap&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;目次&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;事前準備&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#dataframe"&gt;DataFrame の各要素の文字数をカウント&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;より複雑な処理を適用させることも可能&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;ひとこと&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="_1"&gt;事前準備&lt;/h2&gt;
&lt;p&gt;まずはサンプルのDataFrameを作成します．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;
import pandas as pd

# DataFrameの作成
df = pd.DataFrame({
    'Crab': ['たらばがに', '毛ガニ', '松葉がに'],
    'Shrimp': ['くるまえび', 'オニテナガエビ', '桜エビ']
})

df
&lt;/code&gt;&lt;/pre&gt;

&lt;table class="dataframe" border="1"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;Crab&lt;/th&gt;
      &lt;th&gt;Shrimp&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;たらばがに&lt;/td&gt;
      &lt;td&gt;くるまえび&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;毛ガニ&lt;/td&gt;
      &lt;td&gt;オニテナガエビ&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;松葉がに&lt;/td&gt;
      &lt;td&gt;桜エビ&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id="dataframe"&gt;DataFrame の各要素の文字数をカウント&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;applymap()&lt;/code&gt;は引数の処理をDataFrameの各要素に適用させ，DataFrameを返す関数です．&lt;br&gt;
今回は要素の文字数をカウントしたいので，引数に文字数をカウントする関数を指定します.&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;
# applymap関数を使用して各要素の文字数をカウント
# 戻り値はDataFrame

df_count = df.applymap(lambda x: len(x))
df_count
&lt;/code&gt;&lt;/pre&gt;

&lt;table class="dataframe" border="1" style="margin-bottom: 50px;"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;Crab&lt;/th&gt;
      &lt;th&gt;Shrimp&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;7&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;各要素の文字数がカウントされたDataFrameとして返ってきていますね．&lt;/p&gt;
&lt;div class="admonition warning-box"&gt;
&lt;p class="admonition-title"&gt;注意&lt;/p&gt;
&lt;p&gt;要素に欠損値が含まれる場合，欠損値が文字列として認識されるので注意してください．&lt;br&gt;
これを防ぐには&lt;code&gt;applymap()&lt;/code&gt;の引数に&lt;code&gt;na_action='ignore'&lt;/code&gt;を指定しましょう．&lt;/p&gt;
&lt;/div&gt;
&lt;h3 id="_2"&gt;より複雑な処理を適用させることも可能&lt;/h3&gt;
&lt;p&gt;別途関数を定義し，それを各要素に適用させることもできます．&lt;br&gt;
&lt;code&gt;applymap()&lt;/code&gt;の引数に指定する際は関数名だけでOKです．&lt;br&gt;&lt;/p&gt;
&lt;p&gt;文字列を変換・置換する処理を定義した関数の例を見てみましょう．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;
# 別途関数を定義して適用することも可能
# 一旦カタカナをひらがなに変換 → 文字列置換

import re
import jaconv

def test_func(x):
    hiragana = jaconv.kata2hira(x)
    replaced_text = re.sub('えび', '', hiragana)
    return replaced_text

# 関数名だけを指定
df.applymap(test_func)
&lt;/code&gt;&lt;/pre&gt;

&lt;table class="dataframe" border="1" style="margin-bottom: 50px;"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;Crab&lt;/th&gt;
      &lt;th&gt;Shrimp&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;たらばがに&lt;/td&gt;
      &lt;td&gt;くるま&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;毛がに&lt;/td&gt;
      &lt;td&gt;おにてなが&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;松葉がに&lt;/td&gt;
      &lt;td&gt;桜&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;code&gt;applymap()&lt;/code&gt;で指定した&lt;code&gt;test_func()&lt;/code&gt;関数は「えび（エビを含む）」を取り除く関数なので，各要素に関数を当てることで「えび（エビ）」が取り除かれていますね．&lt;/p&gt;
&lt;div class="admonition info-box"&gt;
&lt;p class="admonition-title"&gt;参考&lt;/p&gt;
&lt;p&gt;&lt;code&gt;jaconv&lt;/code&gt;ライブラリの&lt;code&gt;kata2hira()&lt;/code&gt;「カタカナ」を「ひらがな」に変換する関数です．&lt;br&gt;
なお&lt;code&gt;jaconv&lt;/code&gt;は外部ライブラリなのでインストールが必要です． &lt;/p&gt;
&lt;/div&gt;
&lt;details class="accordion-block" style="margin-top: -50px;"&gt;
&lt;summary&gt;コードの詳細が知りたい方はこちらをクリック&lt;/summary&gt;
&lt;div class="accordion-summary"&gt;
&lt;p&gt;&lt;code&gt;test_func(x)&lt;/code&gt;関数は「えび（もしくはエビ）」という文字を削除する関数です．&lt;br&gt;
 処理は以下のとおりです．&lt;/p&gt;
&lt;ol style="margin-top: 20px;"&gt;
     &lt;li&gt;引数の文字列を&lt;code&gt;jaconv.kata2hira()&lt;/code&gt;でひらがなに変換&lt;/li&gt;
     &lt;li&gt;変換した文字列に「えび」が含まれる場合はその文字を削除&lt;/li&gt;
     &lt;li&gt;処理した文字列を返す&lt;/li&gt;
 &lt;/ol&gt;
&lt;p&gt;&lt;code&gt;re.sub('えび', '', hiragana)&lt;/code&gt;で「えび」の削除を行なっています．&lt;br&gt;
&lt;code&gt;re.sub()&lt;/code&gt;は第一引数の文字列を第二引数の文字列に変換する関数です.（第三引数は置換対象のデータを指定します）&lt;/p&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;h2 id="_3"&gt;ひとこと&lt;/h2&gt;
&lt;p&gt;DataFrame の各要素に対して何らかの処理をしたい時に使える&lt;code&gt;applymap()&lt;/code&gt;を紹介しました．&lt;br&gt;
&lt;code&gt;applymap()&lt;/code&gt;は便利ですが，処理速度が遅いです．&lt;br&gt;
そのため，巨大なDataFrameに適用する際は時間も気にしておくと吉ですね．&lt;/p&gt;
&lt;div style="margin-bottom: 100px;"&gt;&lt;/div&gt;

&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;lambdaを使用して，引数にとった文字の数を&lt;code&gt;len()&lt;/code&gt;でカウントしています．&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Python"></category><category term="Python"></category><category term="pandas"></category></entry><entry><title>【Python】pandas, SciPyで疎行列の演算速度・メモリ使用量を比較</title><link href="https://www.tecrab.com/articles/scipy-pdsparse-cal-memory.html" rel="alternate"></link><published>2021-10-20T00:00:00+09:00</published><updated>2022-01-04T00:00:00+09:00</updated><author><name>かに</name></author><id>tag:www.tecrab.com,2021-10-20:/articles/scipy-pdsparse-cal-memory.html</id><summary type="html">&lt;p&gt;pandas, SciPyで疎行列・密行列のメモリ使用量・速度を検討しています．&lt;/p&gt;</summary><content type="html">&lt;div class="admonition abstract"&gt;
&lt;p&gt;本記事では以下の内容を扱っています．&lt;br&gt;
&lt;ul style="margin: -5px 0px 0px 15px;"&gt;
  &lt;li&gt;&lt;code&gt;scipy.sparse&lt;/code&gt;と&lt;code&gt;pandas.SparseDtype&lt;/code&gt;の演算速度・メモリ使用量比較&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;目次&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;バージョン情報&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;概要&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;演算速度とメモリ使用量の比較&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_4"&gt;演算速度の結果&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_5"&gt;メモリ使用量の結果&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_6"&gt;まとめ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_7"&gt;疎行列と密行列を合わせて演算する場合&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_9"&gt;結果&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_10"&gt;ひとこと&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="_1"&gt;バージョン情報&lt;/h2&gt;
&lt;p&gt;バージョンの情報は以下のとおりです．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Python 3.10.5&lt;/li&gt;
&lt;li&gt;NumPy 1.23.1&lt;/li&gt;
&lt;li&gt;pandas 1.4.3 &lt;/li&gt;
&lt;li&gt;SciPy 1.8.1&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_2"&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;scipy.sparse&lt;/code&gt;は疎行列を効率的に扱うためのクラスで&lt;code&gt;SciPy&lt;/code&gt;が提供しています．&lt;br&gt;
また&lt;code&gt;pandas&lt;/code&gt;においても疎行列を扱える&lt;code&gt;pandas.SparseDtype&lt;/code&gt;があります．&lt;/p&gt;
&lt;p&gt;本記事ではこれらの演算速度やメモリ使用量を比較していきます．&lt;/p&gt;
&lt;div class="admonition explanation"&gt;
&lt;p class="admonition-title"&gt;関連記事&lt;/p&gt;
&lt;p&gt;疎行列の基本的な内容については以下の記事をご覧ください．
&lt;ul style="margin: -5px 0px 0px 15px;"&gt;
    &lt;li&gt;
    &lt;a href="https://www.revalab.net/sparse-matrix-memory/" rel="noopener noreferrer" target="_blank"&gt;【Python】pandas, SciPyで疎行列を扱う方法とメモリ使用量比較&lt;/a&gt;
    &lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id="_3"&gt;演算速度とメモリ使用量の比較&lt;/h2&gt;
&lt;p&gt;本記事で使用するライブラリと関数は以下です．&lt;/p&gt;
&lt;pre style="margin-bottom: 90px;"&gt;
&lt;code class="language-python"&gt;
# 本記事中で使用するライブラリ
import numpy as np
import pandas as pd
from scipy import sparse as sp

# dfとscipy.sparseのメモリ使用量を算出する関数（単位を付与する関数を含む）
def format_bytes(size):
    power = 2**10
    n = 0
    power_labels = ['B', 'KB', 'MB', 'GB', 'TB']
    while size &gt; power and n &lt;= len(power_labels):
        size /= power
        n += 1
    return f'{size :.3f} {power_labels[n]}'

def get_size_of_df(df):
    return format_bytes(df.memory_usage().sum())

def get_size_sparse_matrix(sp_matrix):
    return format_bytes((sp_matrix.data.nbytes + sp_matrix.indices.nbytes + sp_matrix.indptr.nbytes))
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;以下のコードで演算速度，メモリ使用量を確認します．&lt;br&gt;
行列内の&lt;code&gt;0&lt;/code&gt;割合を変えた1000x1000行列で演算速度とメモリ使用量を見ています．&lt;br&gt;&lt;/p&gt;
&lt;p&gt;出力結果は以下のとおりです．&lt;br&gt;
（&lt;code&gt;scipy.sparse&lt;/code&gt;と&lt;code&gt;pandas.SparseDtype&lt;/code&gt;の結果がそれぞれ出ています）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;メモリ使用量と非&lt;code&gt;0&lt;/code&gt;割合(density&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;)&lt;/li&gt;
&lt;li&gt;行列積速度&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;
density_list = [0.0001, 0.001, 0.01, 0.1, 0.3, 0.5, 0.7, 0.9, 1.0]

# 疎行列の0でない成分の割合を変えてそれぞれ計算
for density in density_list:
    scipy_sp = sp.rand(1000, 1000, density=density, format='csr', random_state=42)
    pandas_sp = pd.DataFrame.sparse.from_spmatrix(scipy_sp)
    print(f'scipy_sp: {get_size_sparse_matrix(scipy_sp)}, density={density}')
    %timeit scipy_sp * scipy_sp
    print(f'pandas_sp: {get_size_of_df(pandas_sp)}, density={density}')
    %timeit pandas_sp @ pandas_sp
    print('')
&lt;/code&gt;&lt;/pre&gt;
&lt;pre style="margin-bottom: 50px; font-size: 0.89em;"&gt;
scipy_sp: 5.082 KB, density=0.0001
39.1 µs ± 80.7 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)
pandas_sp: 1.297 KB, density=0.0001
37.5 ms ± 1.45 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)

scipy_sp: 15.629 KB, density=0.001
44.1 µs ± 38.3 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)
pandas_sp: 11.844 KB, density=0.001
36.3 ms ± 1.66 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)

scipy_sp: 121.098 KB, density=0.01
560 µs ± 3.8 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)
pandas_sp: 117.312 KB, density=0.01
39.6 ms ± 3.46 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)

scipy_sp: 1.148 MB, density=0.1
24.6 ms ± 30.8 µs per loop (mean ± std. dev. of 7 runs, 10 loops each)
pandas_sp: 1.145 MB, density=0.1
39.9 ms ± 1.74 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)

scipy_sp: 3.437 MB, density=0.3
103 ms ± 112 µs per loop (mean ± std. dev. of 7 runs, 10 loops each)
pandas_sp: 3.433 MB, density=0.3
40.1 ms ± 1.75 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)

scipy_sp: 5.726 MB, density=0.5
257 ms ± 285 µs per loop (mean ± std. dev. of 7 runs, 1 loop each)
pandas_sp: 5.722 MB, density=0.5
43.1 ms ± 2.12 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)

scipy_sp: 8.015 MB, density=0.7
487 ms ± 697 µs per loop (mean ± std. dev. of 7 runs, 1 loop each)
pandas_sp: 8.011 MB, density=0.7
42.6 ms ± 2.47 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)

scipy_sp: 10.304 MB, density=0.9
787 ms ± 1.13 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)
pandas_sp: 10.300 MB, density=0.9
49.7 ms ± 1.59 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)

scipy_sp: 11.448 MB, density=1.0
966 ms ± 1.6 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)
pandas_sp: 11.444 MB, density=1.0
29.8 ms ± 1.1 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)
&lt;/pre&gt;

&lt;p&gt;for文では順に以下の演算をしています．&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;0&lt;/code&gt;でない成分の割合が異なる&lt;code&gt;scipy.sparse&lt;/code&gt;を作成（CSR format）&lt;/li&gt;
&lt;li&gt;作成した&lt;code&gt;scipy.sparse&lt;/code&gt;をpandasの&lt;code&gt;pandas.SparseDtype&lt;/code&gt;に変換&lt;/li&gt;
&lt;li&gt;それぞれの行列積にかかる時間を計測&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2"&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;メモリ使用量を算出する関数でそれぞれのメモリ使用量を確認し，densityと共に出力&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="_4"&gt;演算速度の結果&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;0&lt;/code&gt;割合が多い（＝疎な行列の）場合は&lt;code&gt;scipy.sparse&lt;/code&gt;の方が高速．&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0&lt;/code&gt;割合が少ない（＝密な行列の）場合は&lt;code&gt;pandas.SparseDtype&lt;/code&gt;の方が高速．&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pandas.SparseDtype&lt;/code&gt;は&lt;code&gt;0&lt;/code&gt;割合と速度に明確な関係がないが&lt;code&gt;0&lt;/code&gt;成分がないと演算速度が向上する．&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_5"&gt;メモリ使用量の結果&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;0&lt;/code&gt;割合が少ない場合のメモリ効率は&lt;code&gt;pandas.SparseDtype&lt;/code&gt;の方がよい．&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0&lt;/code&gt;成分が多い場合は両者に大きな差はない．&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;なお，密行列のDataFrame（データ型&lt;code&gt;float64&lt;/code&gt;）を作成し，演算速度とメモリ使用量を確認すると，以下のようになります．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;
csr = sp.rand(1000, 1000, density=1.0, format='csr', random_state=42)
normal_df = pd.DataFrame.sparse.from_spmatrix(csr).sparse.to_dense()
%timeit normal_df @ normal_df
print(get_size_of_df(normal_df))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre style="margin-bottom: 50px; font-size: 0.89em;"&gt;
20 ms ± 1.2 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)
7.630 MB
&lt;/pre&gt;

&lt;p&gt;密行列の演算速度・メモリ使用量は通常のDataFrameの方がよいですね.（当たり前ですが）&lt;br&gt;&lt;/p&gt;
&lt;h3 id="_6"&gt;まとめ&lt;/h3&gt;
&lt;p&gt;疎行列を扱う際には&lt;code&gt;scipy.sparse&lt;/code&gt;を使うと高速かつメモリ効率も向上するため，基本的には&lt;code&gt;scipy.sparse&lt;/code&gt;を使うとよいでしょう．&lt;/p&gt;
&lt;p&gt;一方でメモリ観点では&lt;code&gt;pandas.SparseDtype&lt;/code&gt;の方がよい場合もあります．疎行列を扱う際にDataFrameをそのまま使用するケースはあまりないと思いますが，必要性が出てきた時の選択肢として知っておくと吉ですね．&lt;/p&gt;
&lt;h2 id="_7"&gt;疎行列と密行列を合わせて演算する場合&lt;/h2&gt;
&lt;p&gt;実際にデータを扱う際には密行列と疎行列を組み合わせることが多いと思います．&lt;br&gt;
そのため，ここでは簡単な実験で演算速度とメモリ使用量を確認してみます．&lt;/p&gt;
&lt;h5 id="_8"&gt;準備&lt;/h5&gt;
&lt;p&gt;以下で前準備として密行列(1000x5)，疎行列(1000x995)を作成します．&lt;br&gt;
（後ほど行列を結合させて1000x1000行列を２パターン作成するためです）&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;
# 乱数シードの固定
np.random.seed(42)

# DataFrameの作成
df = pd.DataFrame({
    'col_1': np.ones(1000, dtype=np.int8), 
    'col_2': np.random.rand(1000), 
    'col_3': np.ones(1000, dtype=np.float32),
    'col_4': np.random.rand(1000), 
    'col_5': np.random.rand(1000)
})
df.head(3)
&lt;/code&gt;&lt;/pre&gt;
&lt;table class="dataframe" border="1"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;col_1&lt;/th&gt;
      &lt;th&gt;col_2&lt;/th&gt;
      &lt;th&gt;col_3&lt;/th&gt;
      &lt;th&gt;col_4&lt;/th&gt;
      &lt;th&gt;col_5&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0.374540&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
      &lt;td&gt;0.185133&lt;/td&gt;
      &lt;td&gt;0.261706&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0.950714&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
      &lt;td&gt;0.541901&lt;/td&gt;
      &lt;td&gt;0.246979&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0.731994&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
      &lt;td&gt;0.872946&lt;/td&gt;
      &lt;td&gt;0.906255&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class="language-python"&gt;
sparse_csr = sp.rand(1000, 995, density=0.005, format='csr', random_state=42)
sparse_csr
&lt;/code&gt;&lt;/pre&gt;
&lt;pre style="margin-bottom: 90px; font-size: 0.89em;"&gt;
&amp;lt;1000x995 sparse matrix of type '&amp;lt;class 'numpy.float64'&amp;gt;'
    with 4975 stored elements in Compressed Sparse Row format&amp;gt;
&lt;/pre&gt;

&lt;h5 id="route1-scipysparse"&gt;route1: scipy.sparseで揃えた行列&lt;/h5&gt;
&lt;p&gt;route1では&lt;code&gt;scipy.sparse&lt;/code&gt;で1000x1000行列を作成します．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;
# ルート1：両方をscipy.sparseに揃えて結合

# dfをsparse matrixに変換
df_sparse = sp.csr_matrix(df)

# 変換したdfとsparse_csrを結合
route_1 = sp.hstack((df_sparse, sparse_csr), format='csr')
route_1
&lt;/code&gt;&lt;/pre&gt;
&lt;pre style="margin-bottom: 90px; font-size: 0.89em;"&gt;
&amp;lt;1000x1000 sparse matrix of type '&amp;lt;class 'numpy.float64'&amp;gt;'
    with 9975 stored elements in Compressed Sparse Row format&amp;gt;
&lt;/pre&gt;

&lt;h5 id="route2-pandassparsedtype"&gt;route2: pandas.SparseDtypeで揃えた行列&lt;/h5&gt;
&lt;p&gt;route2では&lt;code&gt;pandas.SparseDtype&lt;/code&gt;で1000x1000行列を作成します．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;
# ルート2：scipy.sparse を pandas.SparseDtype に変換

# sparse_csr を pandas sparse に変換
sparse_pds = pd.DataFrame.sparse.from_spmatrix(sparse_csr)

route_2 = pd.concat([df, sparse_pds], axis=1)
route_2.shape
&lt;/code&gt;&lt;/pre&gt;
&lt;pre style="margin-bottom: 90px; font-size: 0.89em;"&gt;
(1000, 1000)
&lt;/pre&gt;

&lt;h3 id="_9"&gt;結果&lt;/h3&gt;
&lt;p&gt;演算速度とメモリ使用量はそれぞれ以下のとおりになりました．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;
print(f'route_1: {get_size_sparse_matrix(route_1)}')
%timeit route_1 * route_1

print('')

print(f'route_2: {get_size_of_df(route_2)}')
# 行列積の計算のため，index, columnsを揃える
route_2.index = route_2.columns
%timeit route_2 @ route_2
&lt;/code&gt;&lt;/pre&gt;
&lt;pre style="margin-bottom: 50px; font-size: 0.89em;"&gt;
route_1: 120.805 KB
361 µs ± 560 ns per loop (mean ± std. dev. of 7 runs, 1,000 loops each)

route_2: 86.746 KB
40 ms ± 1.66 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)
&lt;/pre&gt;

&lt;p&gt;演算速度は&lt;code&gt;scipy.sparse&lt;/code&gt;，メモリ使用量は&lt;code&gt;pandas.SparseDtype&lt;/code&gt;の方がいいですね．&lt;br&gt;
今回は簡易的な実験ですので，実際のデータ型やデータ量によって異なることがあると思います．&lt;br&gt;
しかし「&lt;a href="#_6"&gt;まとめ&lt;/a&gt;」でも記載したとおり通常は&lt;code&gt;scipy.sparse&lt;/code&gt;を使う方がよさそうです．&lt;/p&gt;
&lt;h2 id="_10"&gt;ひとこと&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;scipy.sparse&lt;/code&gt;と&lt;code&gt;pandas.SparseDtype&lt;/code&gt;で色々と実験してみましたが，より巨大でデータ型が混在する行列だと結果が異なってくるかもしれません．&lt;br&gt;
何らかの参考になれば幸いです．&lt;/p&gt;
&lt;div style="margin-bottom: 100px;"&gt;&lt;/div&gt;

&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;この値が小さいほど行列中に含まれる&lt;code&gt;0&lt;/code&gt;成分が多くなります．&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;Jupyter環境であれば&lt;code&gt;%timeit&lt;/code&gt;というマジックコマンドで行ごとの演算速度を計測できます．&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Python"></category><category term="Python"></category><category term="pandas"></category><category term="SciPy"></category></entry><entry><title>【Python】pandas, SciPyで疎行列を扱う方法とメモリ使用量比較</title><link href="https://www.tecrab.com/articles/sparse-matrix-memory.html" rel="alternate"></link><published>2021-10-18T00:00:00+09:00</published><updated>2022-08-07T00:00:00+09:00</updated><author><name>かに</name></author><id>tag:www.tecrab.com,2021-10-18:/articles/sparse-matrix-memory.html</id><summary type="html">&lt;p&gt;pandas, SciPyで疎行列を生成・変換する方法とメモリ使用量を確認している記事です．&lt;/p&gt;</summary><content type="html">&lt;div class="admonition abstract"&gt;
&lt;p&gt;本記事では以下の内容を扱っています．
&lt;ul style="margin: -5px 0px 0px 15px;"&gt;
 &lt;li&gt;sparse matrix（疎行列）と dense matrix（密行列）の概要&lt;/li&gt;
 &lt;li&gt;sparse matrix をpandasとSciPyで生成・変換する方法&lt;/li&gt;
 &lt;li&gt;sparse matrix のメモリ使用量比較&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;目次&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;バージョン情報&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sparse-matrixdense-matrix"&gt;sparse matrixとdense matrixの概要&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#import"&gt;ライブラリのimport&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sparse-matrix"&gt;疎行列(sparse matrix)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#dense-matrix"&gt;密行列(dense matrix)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;疎行列を効率的に扱う&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#sparse-matrixpandasscipy"&gt;sparse matrixをpandasとSciPyで生成・変換する方法&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#scipy"&gt;SciPy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pandas"&gt;pandas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#scipysparsepandassparse"&gt;scipy.sparseをpandasのsparse型に変換する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#sparse-matrix_1"&gt;sparse matrix のメモリ使用量&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;まとめ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="_1"&gt;バージョン情報&lt;/h2&gt;
&lt;p&gt;バージョンの情報は以下のとおりです．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Python 3.10.5&lt;/li&gt;
&lt;li&gt;NumPy 1.23.1&lt;/li&gt;
&lt;li&gt;pandas 1.4.3 &lt;/li&gt;
&lt;li&gt;SciPy 1.8.1&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="sparse-matrixdense-matrix"&gt;sparse matrixとdense matrixの概要&lt;/h2&gt;
&lt;p&gt;sparse matrixは行列の成分がほとんど&lt;code&gt;0&lt;/code&gt;である行列のことをいいます．&lt;br&gt;
sparse matrixを日本語で言うと「疎行列」です．&lt;br&gt;
反対に成分の多くが&lt;code&gt;0&lt;/code&gt;でない行列はdense matrixといい，日本語は「密行列」です．&lt;/p&gt;
&lt;p&gt;以下で疎行列と密行列を見てみましょう．&lt;/p&gt;
&lt;h3 id="import"&gt;ライブラリのimport&lt;/h3&gt;
&lt;p&gt;はじめに本記事で使用するライブラリをimportしておきます．&lt;/p&gt;
&lt;pre style="margin-bottom: 90px;"&gt;
&lt;code class="language-python"&gt;
# 本記事中で使用するライブラリ
import numpy as np
import pandas as pd
from scipy import sparse as sp
&lt;/code&gt;
&lt;/pre&gt;

&lt;h3 id="sparse-matrix"&gt;疎行列(sparse matrix)&lt;/h3&gt;
&lt;p&gt;以下のコードでDataFrameを作ります．&lt;br&gt;
3×1000の行列のうち，ほとんどが&lt;code&gt;0&lt;/code&gt;で稀に&lt;code&gt;1&lt;/code&gt;（＝データ）がある疎行列です．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;
np.random.seed(42) # 乱数シードの固定

# 乱数を生成して3×1000のdfを作成
sparse = np.random.binomial(n=1, p=0.1, size=3*1000)
sdf = pd.DataFrame(sparse.reshape(3, 1000))
sdf
&lt;/code&gt;&lt;/pre&gt;
&lt;table class="dataframe" border="1"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;th&gt;5&lt;/th&gt;
      &lt;th&gt;6&lt;/th&gt;
      &lt;th&gt;7&lt;/th&gt;
      &lt;th&gt;8&lt;/th&gt;
      &lt;th&gt;9&lt;/th&gt;
      &lt;th&gt;...&lt;/th&gt;
      &lt;th&gt;990&lt;/th&gt;
      &lt;th&gt;991&lt;/th&gt;
      &lt;th&gt;992&lt;/th&gt;
      &lt;th&gt;993&lt;/th&gt;
      &lt;th&gt;994&lt;/th&gt;
      &lt;th&gt;995&lt;/th&gt;
      &lt;th&gt;996&lt;/th&gt;
      &lt;th&gt;997&lt;/th&gt;
      &lt;th&gt;998&lt;/th&gt;
      &lt;th&gt;999&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;div class="under-df-info"&gt;&lt;p&gt;3 rows × 1000 columns&lt;/p&gt;&lt;/div&gt;

&lt;div class="admonition info-box"&gt;
&lt;p class="admonition-title"&gt;参考&lt;/p&gt;
&lt;p&gt;今回は例示のために小さい行列で見ていますが，sparse matrixの列数は非常に多いことが普通です．&lt;/p&gt;
&lt;/div&gt;
&lt;h3 id="dense-matrix"&gt;密行列(dense matrix)&lt;/h3&gt;
&lt;p&gt;続いて密行列を作成します．&lt;br&gt;
3×1000の行列のうち，ほとんどが&lt;code&gt;1&lt;/code&gt;で稀に&lt;code&gt;0&lt;/code&gt;があるデータです．&lt;br&gt;
ちなみに密行列の数値に決まりはありません.&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;
np.random.seed(42) # 乱数シードの固定

# 乱数を生成して3×1000のdfを作成
dense = np.random.binomial(n=1, p=0.9, size=3*1000)
ddf = pd.DataFrame(dense.reshape(3, 1000))
ddf
&lt;/code&gt;&lt;/pre&gt;

&lt;table class="dataframe" border="1"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;th&gt;5&lt;/th&gt;
      &lt;th&gt;6&lt;/th&gt;
      &lt;th&gt;7&lt;/th&gt;
      &lt;th&gt;8&lt;/th&gt;
      &lt;th&gt;9&lt;/th&gt;
      &lt;th&gt;...&lt;/th&gt;
      &lt;th&gt;990&lt;/th&gt;
      &lt;th&gt;991&lt;/th&gt;
      &lt;th&gt;992&lt;/th&gt;
      &lt;th&gt;993&lt;/th&gt;
      &lt;th&gt;994&lt;/th&gt;
      &lt;th&gt;995&lt;/th&gt;
      &lt;th&gt;996&lt;/th&gt;
      &lt;th&gt;997&lt;/th&gt;
      &lt;th&gt;998&lt;/th&gt;
      &lt;th&gt;999&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;div class="under-df-info"&gt;&lt;p&gt;3 rows × 1000 columns&lt;/p&gt;&lt;/div&gt;

&lt;h3 id="_2"&gt;疎行列を効率的に扱う&lt;/h3&gt;
&lt;p&gt;疎行列は成分のほとんどが&lt;code&gt;0&lt;/code&gt;です．&lt;br&gt;
そのため&lt;code&gt;1&lt;/code&gt;の場所だけを記憶しておくとメモリ効率がよくなります．&lt;/p&gt;
&lt;p&gt;上記のような方法でデータの保持するには&lt;code&gt;scipy.sparse&lt;/code&gt;やpandasのsparse型を使用します．&lt;/p&gt;
&lt;h2 id="sparse-matrixpandasscipy"&gt;sparse matrixをpandasとSciPyで生成・変換する方法&lt;/h2&gt;
&lt;h3 id="scipy"&gt;SciPy&lt;/h3&gt;
&lt;p&gt;先ほど作成した各DataFrameについて，SciPyの&lt;code&gt;coo_matrix()&lt;/code&gt;メソッドを使用して&lt;code&gt;scipy.sparse&lt;/code&gt;に変換してみます．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;
# sparse(sdf_sp) と dense(ddf_sp) を作成
sdf_sp = sp.coo_matrix(sdf.values)
ddf_sp = sp.coo_matrix(ddf.values)

# 例としてsdf_spを確認
sdf_sp
&lt;/code&gt;&lt;/pre&gt;
&lt;pre style="margin-bottom: 50px; font-size: 0.89em;"&gt;
&amp;lt;3x1000 sparse matrix of type '&amp;lt;class 'numpy.int64'&amp;gt;'
    with 298 stored elements in COOrdinate format&amp;gt;
&lt;/pre&gt;

&lt;p&gt;文字列が出力されていますが，これは&lt;code&gt;scipy.sparse&lt;/code&gt;の情報です．&lt;br&gt;
オブジェクトのデータ型は&lt;code&gt;scipy.sparse.coo.coo_matrix&lt;/code&gt;です．&lt;/p&gt;
&lt;details class="accordion-block"&gt;
&lt;summary&gt;出力された情報の見方が知りたい方はこちらをクリック&lt;/summary&gt;
&lt;div class="accordion-summary"&gt;
&lt;p&gt;出力結果の見方は以下のとおりです． 
  &lt;/p&gt;
&lt;ol style="margin-top: 20px;"&gt;
      &lt;li&gt;&lt;code&gt;3x1000 sparse matrix of type '&amp;lt;class 'numpy.int64'&amp;gt;'&lt;/code&gt;&lt;/li&gt;
      行列の大きさとデータ型を表しています．今回指定したDataFrameは3×1000でしたので一致していますね．なお，データ型は&lt;code&gt;numpy.int64&lt;/code&gt;です．
      &lt;li style="margin-top: 20px;"&gt;&lt;code&gt;with 298 stored elements in COOrdinate format&lt;/code&gt;&lt;/li&gt;
      298 stored elements部分は保持している&lt;code&gt;1&lt;/code&gt;の数です．今回のDataFrameには&lt;code&gt;1&lt;/code&gt;が298個あるということです．その後の&lt;code&gt;COOrdinate format&lt;/code&gt;はsparse matrixの種類です.（sparse matrixにおけるデータの持ち方には色々な種類がありますが，今回はCOOという種類を使っています）
  &lt;/ol&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;h3 id="pandas"&gt;pandas&lt;/h3&gt;
&lt;p&gt;次にpandasのメソッドを使用してsparse matrixを生成します．&lt;br&gt;
以下の２パターンを見てみましょう．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DataFrameから&lt;code&gt;astype&lt;/code&gt;メソッドでsparse型に変換する&lt;/li&gt;
&lt;li&gt;&lt;code&gt;scipy.sparse&lt;/code&gt;をpandasのsparse型に変換する&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id="dataframeastypesparse"&gt;DataFrameからastypeメソッドでsparse型に変換する&lt;/h5&gt;
&lt;p&gt;DataFrameに対して&lt;code&gt;astype&lt;/code&gt;メソッドを使用し&lt;code&gt;pandas.SparseDtype&lt;/code&gt;を指定すればOKです．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;
# sparse(pd_sdf) と dense(pd_ddf) を作成
pd_sdf = sdf.astype(pd.SparseDtype("int64", 0))
pd_ddf = ddf.astype(pd.SparseDtype("int64", 0))

# 例としてpd_sdfを確認
pd_sdf

&lt;/code&gt;&lt;/pre&gt;

&lt;table class="dataframe" border="1"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;th&gt;5&lt;/th&gt;
      &lt;th&gt;6&lt;/th&gt;
      &lt;th&gt;7&lt;/th&gt;
      &lt;th&gt;8&lt;/th&gt;
      &lt;th&gt;9&lt;/th&gt;
      &lt;th&gt;...&lt;/th&gt;
      &lt;th&gt;990&lt;/th&gt;
      &lt;th&gt;991&lt;/th&gt;
      &lt;th&gt;992&lt;/th&gt;
      &lt;th&gt;993&lt;/th&gt;
      &lt;th&gt;994&lt;/th&gt;
      &lt;th&gt;995&lt;/th&gt;
      &lt;th&gt;996&lt;/th&gt;
      &lt;th&gt;997&lt;/th&gt;
      &lt;th&gt;998&lt;/th&gt;
      &lt;th&gt;999&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;div class="under-df-info"&gt;&lt;p&gt;3 rows × 1000 columns&lt;/p&gt;&lt;/div&gt;

&lt;p&gt;オブジェクトのデータ型は&lt;code&gt;pandas.core.frame.DataFrame&lt;/code&gt;型です.&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2"&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;br&gt;
&lt;code&gt;dtypes&lt;/code&gt;メソッドで各カラムのデータ型を見ると，&lt;code&gt;Sparse[int64, 0]&lt;/code&gt; となっており，データがSparse型で保持されていることがわかります．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;
print(type(pd_sdf), '\n')
print(pd_sdf.dtypes)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre style="margin-bottom: 90px; font-size: 0.89em;"&gt;
&amp;lt;class 'pandas.core.frame.DataFrame'&amp;gt;

0      Sparse[int64, 0]
1      Sparse[int64, 0]
2      Sparse[int64, 0]
3      Sparse[int64, 0]
4      Sparse[int64, 0]
             ...       
995    Sparse[int64, 0]
996    Sparse[int64, 0]
997    Sparse[int64, 0]
998    Sparse[int64, 0]
999    Sparse[int64, 0]
Length: 1000, dtype: object
&lt;/pre&gt;

&lt;h3 id="scipysparsepandassparse"&gt;scipy.sparseをpandasのsparse型に変換する&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;scipy.sparse&lt;/code&gt;をpandasのsparse型に変換します．&lt;br&gt;
&lt;code&gt;pd.DataFrame.sparse.from_spmatrix&lt;/code&gt;というメソッドで変換することができます．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;
pd_sdf2 = pd.DataFrame.sparse.from_spmatrix(sdf_sp)
pd_sdf2
&lt;/code&gt;&lt;/pre&gt;
&lt;table class="dataframe" border="1"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;th&gt;5&lt;/th&gt;
      &lt;th&gt;6&lt;/th&gt;
      &lt;th&gt;7&lt;/th&gt;
      &lt;th&gt;8&lt;/th&gt;
      &lt;th&gt;9&lt;/th&gt;
      &lt;th&gt;...&lt;/th&gt;
      &lt;th&gt;990&lt;/th&gt;
      &lt;th&gt;991&lt;/th&gt;
      &lt;th&gt;992&lt;/th&gt;
      &lt;th&gt;993&lt;/th&gt;
      &lt;th&gt;994&lt;/th&gt;
      &lt;th&gt;995&lt;/th&gt;
      &lt;th&gt;996&lt;/th&gt;
      &lt;th&gt;997&lt;/th&gt;
      &lt;th&gt;998&lt;/th&gt;
      &lt;th&gt;999&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;div class="under-df-info"&gt;&lt;p&gt;3 rows × 1000 columns&lt;/p&gt;&lt;/div&gt;

&lt;p&gt;各カラムのデータ型は&lt;code&gt;scipy.sparse&lt;/code&gt;の型に依存します．&lt;br&gt;
今回は&lt;code&gt;scipy.sparse&lt;/code&gt;の型が&lt;code&gt;numpy.int64&lt;/code&gt;だったため&lt;code&gt;Sparse[int64, 0]&lt;/code&gt;になっています．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;
print(type(pd_sdf2), '\n')
print(pd_sdf2.dtypes)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre style="margin-bottom: 90px; font-size: 0.89em;"&gt;
&amp;lt;class 'pandas.core.frame.DataFrame'&amp;gt; 

0      Sparse[int64, 0]
1      Sparse[int64, 0]
2      Sparse[int64, 0]
3      Sparse[int64, 0]
4      Sparse[int64, 0]
             ...       
995    Sparse[int64, 0]
996    Sparse[int64, 0]
997    Sparse[int64, 0]
998    Sparse[int64, 0]
999    Sparse[int64, 0]
Length: 1000, dtype: object
&lt;/pre&gt;

&lt;h2 id="sparse-matrix_1"&gt;sparse matrix のメモリ使用量&lt;/h2&gt;
&lt;p&gt;DataFrameと&lt;code&gt;scipy.sparse&lt;/code&gt;の各行列について，メモリ使用量を確認してみましょう．&lt;br&gt;
以下の関数を使用してDataFrameとsparse matrixのメモリ使用量を見ることができます．&lt;/p&gt;
&lt;pre style="margin-bottom: 90px;"&gt;&lt;code class="language-python"&gt;
# DataFrame
def get_size_of_df(df):
    return df.memory_usage().sum()

# COO matrix
def get_size_of_coo(coo):
    return coo.data.nbytes + coo.row.nbytes + coo.col.nbytes
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id="dataframe"&gt;DataFrameの疎行列・密行列&lt;/h5&gt;
&lt;p&gt;DataFrameで作成した疎行列と密行列のメモリ使用量を比較すると，両者のメモリ使用量は同じです．&lt;br&gt;
通常のDataFrameで扱うとどちらもメモリ使用量が同じになるので非効率です．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;
print(f'DataFrame 疎行列：{get_size_of_df(sdf)}')
print(f'DataFrame 密行列：{get_size_of_df(ddf)}')
&lt;/code&gt;&lt;/pre&gt;
&lt;pre style="margin-bottom: 90px;"&gt;
DataFrame 疎行列：24128
DataFrame 密行列：24128
&lt;/pre&gt;

&lt;h5 id="scipysparse"&gt;scipy.sparseの疎行列・密行列&lt;/h5&gt;
&lt;p&gt;続いて&lt;code&gt;scipy.sparse&lt;/code&gt;に変換した疎行列と密行列のメモリ使用量を比較します．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;
print(f'scipy.sparse 疎行列：{get_size_of_coo(sdf_sp)}')
print(f'scipy.sparse 密行列：{get_size_of_coo(ddf_sp)}')
&lt;/code&gt;&lt;/pre&gt;
&lt;pre style="margin-bottom: 50px;"&gt;
scipy.sparse 疎行列：4768
scipy.sparse 密行列：43232
&lt;/pre&gt;

&lt;p&gt;疎行列についてはメモリ使用量が非常に少なくなっています．&lt;br&gt;
必要なデータだけを持っておくことでうまくメモリ使用量を節約できていますね．&lt;/p&gt;
&lt;p&gt;一方で密行列を&lt;code&gt;scipy.sparse&lt;/code&gt;に変換すると逆にメモリの使用量が増加してしまいました．&lt;br&gt;
密行列を&lt;code&gt;scipy.sparse&lt;/code&gt;に変換するメリットはないようです．&lt;/p&gt;
&lt;h5 id="pandas_1"&gt;pandasの疎行列・密行列&lt;/h5&gt;
&lt;p&gt;最後にpandasのsparse型を見ていきましょう．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;
print(f'pandas sparse 疎行列：{get_size_of_df(pd_sdf)}')
print(f'pandas sparse 密行列：{get_size_of_df(pd_ddf)}')
&lt;/code&gt;&lt;/pre&gt;
&lt;pre style="margin-bottom: 50px;"&gt;
pandas sparse 疎行列：3704
pandas sparse 密行列：32552
&lt;/pre&gt;

&lt;p&gt;pandasのsparse型も&lt;code&gt;scipy.sparse&lt;/code&gt;と同じ傾向&lt;sup id="fnref:3"&gt;&lt;a class="footnote-ref" href="#fn:3"&gt;3&lt;/a&gt;&lt;/sup&gt;になりました．&lt;/p&gt;
&lt;p&gt;また&lt;code&gt;scipy.sparse&lt;/code&gt;とpandasのsparse型を見るとメモリ使用量に関してはpandas sparseの方がより少ないことがわかります．&lt;/p&gt;
&lt;h2 id="_3"&gt;まとめ&lt;/h2&gt;
&lt;p&gt;疎行列と密行列を合わせて扱う際にはデータ型やsparse matrix化の方法を検討するとメモリ効率をよくすることができますね．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;疎行列はSciPyやpandasなどで効率的に扱うことができる．&lt;/li&gt;
&lt;li&gt;密行列をsparse型に変換するとメモリ使用量が増加する．&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="admonition explanation"&gt;
&lt;p class="admonition-title"&gt;関連記事&lt;/p&gt;
&lt;p&gt;SciPyとpandasの疎行列・密行列の演算速度について検討した記事は以下です．
&lt;ul style="margin: -5px 0px 0px 15px;"&gt;
    &lt;li&gt;
    &lt;a href="https://www.revalab.net/scipy-pdsparse-cal-memory/" rel="noopener noreferrer" target="_blank"&gt;Python, pandas, SciPyで疎行列の演算速度・メモリ使用量を比較&lt;/a&gt;
    &lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div style="margin-bottom: 100px;"&gt;&lt;/div&gt;

&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;密行列は&lt;code&gt;0&lt;/code&gt;と&lt;code&gt;1&lt;/code&gt;だけで構成されるものではないと言う意味です．なお，疎行列は通常&lt;code&gt;0&lt;/code&gt;か&lt;code&gt;1&lt;/code&gt;のみです．&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;以下コード&lt;code&gt;print(type(pd_sdf), '\n')&lt;/code&gt;の&lt;code&gt;'\n'&lt;/code&gt;は見栄えのために改行を入れているだけです．&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:3"&gt;
&lt;p&gt;疎行列をsparse型に変換するとメモリ使用量が非常に少なくなり，密行列をsparse型に変換すると逆にメモリ使用量が増加しています．&amp;#160;&lt;a class="footnote-backref" href="#fnref:3" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Python"></category><category term="Python"></category><category term="pandas"></category><category term="SciPy"></category></entry><entry><title>【Slack】リマインダーの設定・確認方法（明日・日時指定・定期）</title><link href="https://www.tecrab.com/articles/slack-remind.html" rel="alternate"></link><published>2021-10-03T00:00:00+09:00</published><updated>2022-08-03T00:00:00+09:00</updated><author><name>かに</name></author><id>tag:www.tecrab.com,2021-10-03:/articles/slack-remind.html</id><summary type="html">&lt;p&gt;Slack でリマインダーを設定する方法をご紹介します．&lt;/p&gt;</summary><content type="html">&lt;div class="admonition abstract"&gt;
&lt;p&gt;Slack でリマインダーを設定する方法をご紹介します．&lt;br&gt;
＜使用イメージ＞
&lt;ul style="margin: -5px 0px 0px 15px;"&gt;
  &lt;li&gt;明日の9:00に通知をして欲しい．&lt;/li&gt;
  &lt;li&gt;会議のURLをXX日の13:00に知らせて欲しい．&lt;/li&gt;
  &lt;li&gt;毎週火曜日にXXを知らせて欲しい．&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;目次&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;リマインドのコマンド&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;コマンドの具体例&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#900"&gt;明日の9:00に通知をして欲しい&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;日時指定でリマインドして欲しい&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#1000"&gt;毎週火曜日の10:00にリマインドして欲しい&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_4"&gt;リマインドのリストの確認&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_5"&gt;ひとこと&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="_1"&gt;リマインドのコマンド&lt;/h2&gt;
&lt;p&gt;基本のコマンドは以下のとおりです．&lt;br&gt;
入力枠に&lt;code&gt;/&lt;/code&gt;を入力すると新たな検索窓が出るので続けて&lt;code&gt;remind&lt;/code&gt;&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;と打てばOKです．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/remind me &amp;lt;リマインド内容&amp;gt; &amp;lt;日時&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;コマンドを入力した後に送信すればSlackbotが受け付けた内容を返してくれます．&lt;/p&gt;
&lt;div class="admonition info-box"&gt;
&lt;p class="admonition-title"&gt;参考&lt;/p&gt;
&lt;p&gt;&lt;code&gt;/&lt;/code&gt;を打つと様々なコマンド候補が表示されます．&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id="_2"&gt;コマンドの具体例&lt;/h2&gt;
&lt;p&gt;コマンドの具体的な例を見ていきましょう．&lt;/p&gt;
&lt;h3 id="900"&gt;明日の9:00に通知をして欲しい&lt;/h3&gt;
&lt;p&gt;明日知らせて欲しいと思い立ったときに・・・&lt;/p&gt;
&lt;pre&gt;
&lt;code class="language-bash"&gt;
/remind me 会議案内を送る at 9:00
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;&lt;img src="/images/slack-remind/slack-remind_01.png" width="600" height="97"&gt;&lt;/p&gt;
&lt;h3 id="_3"&gt;日時指定でリマインドして欲しい&lt;/h3&gt;
&lt;p&gt;日時を指定するには以下のような書き方です．&lt;/p&gt;
&lt;pre&gt;
&lt;code class="language-bash"&gt;
/remind me レビュー対応 10/5 at 9:00
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;&lt;img src="/images/slack-remind/slack-remind_02.png" width="600" height="88"&gt;&lt;/p&gt;
&lt;h3 id="1000"&gt;毎週火曜日の10:00にリマインドして欲しい&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;every 曜日の略記&lt;/code&gt;を指定すればOKです．&lt;/p&gt;
&lt;pre&gt;
&lt;code class="language-bash"&gt;
/remind me https://www.google.com every tue at 10:00
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;&lt;img src="/images/slack-remind/slack-remind_03.png" width="600" height="79"&gt;&lt;/p&gt;
&lt;div class="admonition info-box"&gt;
&lt;p class="admonition-title"&gt;参考&lt;/p&gt;
&lt;p&gt;リマインド内容にURLを指定することもできます．&lt;br&gt;
なお&lt;code&gt;every tuesday&lt;/code&gt;としても結果は同じです．&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id="_4"&gt;リマインドのリストの確認&lt;/h2&gt;
&lt;p&gt;現在登録されているリマインドのリストを確認することができます．&lt;/p&gt;
&lt;pre&gt;
&lt;code class="language-bash"&gt;
/remind list
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;&lt;img src="/images/slack-remind/slack-remind_04.png" width="350" height="145"&gt;&lt;/p&gt;
&lt;h2 id="_5"&gt;ひとこと&lt;/h2&gt;
&lt;p&gt;よく使っているリマインダーの設定を列挙してみました．&lt;br&gt;
今後も気がついたら追加していきたいと思います．&lt;/p&gt;
&lt;div style="margin-bottom: 100px;"&gt;&lt;/div&gt;

&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;&lt;code&gt;remind&lt;/code&gt;の後には半角スペースがあります．&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Slack"></category><category term="Slack"></category></entry><entry><title>【VSCode】Jupyter拡張機能でセル表示を常に展開させる方法</title><link href="https://www.tecrab.com/articles/vscode-jupyter-cell.html" rel="alternate"></link><published>2021-09-30T00:00:00+09:00</published><updated>2022-08-03T00:00:00+09:00</updated><author><name>かに</name></author><id>tag:www.tecrab.com,2021-09-30:/articles/vscode-jupyter-cell.html</id><summary type="html">&lt;p&gt;VSCodeのJupyter拡張機能でセル表示を常に展開させる設定を解説します．&lt;/p&gt;</summary><content type="html">&lt;div class="admonition abstract"&gt;
&lt;p&gt;VSCodeのJupyter拡張機能でセル表示を常に展開させる設定について解説します．&lt;/p&gt;
&lt;/div&gt;
&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;目次&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;イメージ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;表示の変更方法&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_3"&gt;参考&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_4"&gt;ひとこと&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="_1"&gt;イメージ&lt;/h2&gt;
&lt;p&gt;以下のような感じです．&lt;br&gt;
&lt;img src="/images/vscode-jupyter-cell/vscode-jupyter-cell_00.png" width="600" height="248"&gt;&lt;/p&gt;
&lt;h2 id="_2"&gt;表示の変更方法&lt;/h2&gt;
&lt;h5 id="1-vscodecommand"&gt;① VSCodeの設定を&lt;kbd&gt;&lt;kbd&gt;Command&lt;/kbd&gt;+&lt;kbd&gt;,&lt;/kbd&gt;&lt;/kbd&gt;で設定を開く&lt;/h5&gt;
&lt;p&gt;以下のような設定タブが表示されます．&lt;br&gt;
&lt;img src="/images/vscode-jupyter-cell/vscode-jupyter-cell_01.png" width="300" height="130"&gt;&lt;/p&gt;
&lt;h5 id="2-collapse-cell"&gt;② 設定タブの検索窓で「collapse cell」と入力&lt;/h5&gt;
&lt;p&gt;結果のうち「&lt;strong&gt;Interactive Window: Collapse Cell Input Code&lt;/strong&gt;」を確認します．&lt;br&gt;
&lt;img src="/images/vscode-jupyter-cell/vscode-jupyter-cell_02.png" width="600" height="229"&gt;&lt;/p&gt;
&lt;h5 id="3-never"&gt;③ 設定を「never」に変更する&lt;/h5&gt;
&lt;p&gt;&lt;img src="/images/vscode-jupyter-cell/vscode-jupyter-cell_03.png" width="600" height="238"&gt;&lt;/p&gt;
&lt;p&gt;これでセルが常に展開されて表示されます！&lt;/p&gt;
&lt;h3 id="_3"&gt;参考&lt;/h3&gt;
&lt;p&gt;セルの展開・折りたたみ&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;は「Interactive」タブのメニューで操作できます．&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/vscode-jupyter-cell/vscode-jupyter-cell_04.png" width="600" height="78"&gt;&lt;/p&gt;
&lt;p&gt;VSCodeのウィンドウサイズが小さいと以下のように&lt;code&gt;...&lt;/code&gt;となっている場合もあります．&lt;br&gt;
この場合は&lt;code&gt;...&lt;/code&gt;をクリックすると展開・折りたたみが選択できます．&lt;br&gt;
&lt;img src="/images/vscode-jupyter-cell/vscode-jupyter-cell_05.png" width="600" height="99"&gt;&lt;/p&gt;
&lt;h2 id="_4"&gt;ひとこと&lt;/h2&gt;
&lt;p&gt;実行したセルのコードと結果をまとめて確認したい派なので，このような設定をしました．&lt;br&gt;
処理時間や状況を合わせて確認できるのはいいですね．&lt;/p&gt;
&lt;div style="margin-bottom: 100px;"&gt;&lt;/div&gt;

&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;英語の場合は展開(Expand)，折りたたみ(Collapse)です．&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="VSCode"></category><category term="Python"></category><category term="Jupyter"></category></entry><entry><title>【Mac/Linux】openコマンドの活用例</title><link href="https://www.tecrab.com/articles/cli-c-open.html" rel="alternate"></link><published>2021-09-08T00:00:00+09:00</published><updated>2022-08-03T00:00:00+09:00</updated><author><name>かに</name></author><id>tag:www.tecrab.com,2021-09-08:/articles/cli-c-open.html</id><summary type="html">&lt;p&gt;Mac/Linuxのopenコマンドについてまとめています．&lt;/p&gt;</summary><content type="html">&lt;div class="admonition abstract"&gt;
&lt;p&gt;Mac/Linuxのopenコマンドについてまとめています．&lt;/p&gt;
&lt;/div&gt;
&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;目次&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;動作環境&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#macopen"&gt;Macにおけるopenコマンド&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;よく使うオプション&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#-a"&gt;-a （開くアプリを選択）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-n"&gt;-n （新しいインスタンスでアプリを開く）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-r-finder"&gt;-R （指定したファイルを Finder で表示）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#linuxopen"&gt;Linuxにおけるopenコマンド&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;ひとこと&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="_1"&gt;動作環境&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;macOS Monterey 12.5: &lt;code&gt;zsh&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Linux(Ubuntu 20.04 LTS): &lt;code&gt;bash&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="macopen"&gt;Macにおけるopenコマンド&lt;/h2&gt;
&lt;p&gt;Macではターミナル等で&lt;code&gt;open&lt;/code&gt;コマンドを使用するとアプリやURL，ファイルを開いたりすることができます．&lt;br&gt;
基本的には以下のように入力します．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;open [path or URL]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例えば，カレントディレクトリをFinderで開く場合は以下のようなコマンドです.&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;pre class="command-line" data-prompt="%" style="margin-bottom: 30px;"&gt;
&lt;code class="language-bash"&gt;
open .
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;カレントディレクトリに&lt;code&gt;hoge.txt&lt;/code&gt;がある場合，以下のコマンドで開くことができます.&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2"&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;pre class="command-line" data-prompt="%" style="margin-bottom: 70px;"&gt;
&lt;code class="language-bash"&gt;
open hoge.txt
&lt;/code&gt;
&lt;/pre&gt;

&lt;div class="admonition warning-box"&gt;
&lt;p class="admonition-title"&gt;ちなみに・・・&lt;/p&gt;
&lt;p&gt;アプリの起動やファイル展開などはSpotlightの方が基本的に早いです．&lt;br&gt;
ただし，自動化コマンドなどを作成する場合には&lt;code&gt;open&lt;/code&gt;コマンドを上手く使う必要があります．&lt;/p&gt;
&lt;/div&gt;
&lt;details class="accordion-block" style="margin-top: -50px"&gt;
&lt;summary&gt;Spotlightの詳細が知りたい方はこちらをクリック&lt;/summary&gt;
&lt;div class="accordion-summary"&gt;
&lt;p&gt;SpotlightはMac内のアプリ起動やファイル検索，展開を素早く行うことができるMacの標準機能です．基本的には以下のような流れで使用します．
  &lt;/p&gt;
&lt;ol style="margin-top: 20px;"&gt;
      &lt;li&gt;&lt;kbd&gt;&lt;kbd&gt;Command&lt;/kbd&gt;+&lt;kbd&gt;space&lt;/kbd&gt;&lt;/kbd&gt;でSpotlightを呼び出す&lt;/li&gt;
      &lt;li&gt;検索窓にアプリ名やファイル名を打ち込んで&lt;kbd&gt;&lt;kbd&gt;Return&lt;/kbd&gt;&lt;/kbd&gt;&lt;/li&gt;
      &lt;li&gt;検索結果に合致するアプリやファイル等が開かれる&lt;/li&gt;
  &lt;/ol&gt;
&lt;p&gt;管理人がよく使うのはアプリの起動です．&lt;br&gt;
  Chromeを起動する際はSpotlightで&lt;code&gt;chr&lt;/code&gt;くらいまで入力して&lt;code&gt;return&lt;/code&gt;を押すとChromeを開いてくれます．&lt;/p&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;h2 id="_2"&gt;よく使うオプション&lt;/h2&gt;
&lt;h3 id="-a"&gt;-a （開くアプリを選択）&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;open -a [アプリ名]&lt;/code&gt;のようにして実行します．&lt;/p&gt;
&lt;p&gt;下表にコマンドの実行例を記載しています．&lt;/p&gt;
&lt;table id="normal"&gt;
    &lt;tr&gt;
        &lt;td&gt;コマンド&lt;/td&gt;
        &lt;td&gt;起動するアプリ&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;&lt;code&gt;open -a calendar&lt;/code&gt;&lt;/td&gt;
        &lt;td&gt;カレンダー&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;&lt;code&gt;open -a notes&lt;/code&gt;&lt;/td&gt;
        &lt;td&gt;メモ&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;&lt;code&gt;open -a mail&lt;/code&gt;&lt;/td&gt;
        &lt;td&gt;メール&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;&lt;code&gt;open -a reminders&lt;/code&gt;&lt;/td&gt;
        &lt;td&gt;リマインダー&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;&lt;code&gt;open -a ‘google chrome’&lt;/code&gt;&lt;/td&gt;
        &lt;td&gt;Chrome&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;&lt;code&gt;open -a slack&lt;/code&gt;&lt;/td&gt;
        &lt;td&gt;Slack&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;

&lt;details class="accordion-block"&gt;
&lt;summary&gt;アプリの名前を調べる方法についてはこちらをクリック&lt;/summary&gt;
&lt;div class="accordion-summary"&gt;
&lt;p&gt;コマンドに渡すアプリ名を調べる方法は以下のとおりです．
 &lt;/p&gt;
&lt;ol style="margin-top: 20px;"&gt;
     &lt;li style="margin: 5px 0px 5px 0px;"&gt;Finderを起動して&lt;kbd&gt;&lt;kbd&gt;Command&lt;/kbd&gt;+&lt;kbd&gt;Shift&lt;/kbd&gt;+&lt;kbd&gt;a&lt;/kbd&gt;&lt;/kbd&gt;を押す．&lt;/li&gt;
     &lt;li style="margin: 5px 0px 5px 0px;"&gt;開いたアプリケーションディレクトリ内でアプリを探して右クリック．&lt;/li&gt;
     メニューの「パッケージの内容を表示」をクリック．&lt;br&gt;
     &lt;img src="/images/cli-c-open/cli-c-open_01.png" width="500" height="137"&gt;
     &lt;li style="margin: 5px 0px 5px 0px;"&gt;&lt;code&gt;Contents&lt;/code&gt;ディレクトリに飛ぶので&lt;code&gt;Contents&lt;/code&gt; &amp;gt; &lt;code&gt;MacOS&lt;/code&gt;と進む．&lt;/li&gt;
     &lt;code&gt;MacOS&lt;/code&gt;ディレクトリ内にある実行ファイルの名前がアプリ名です．&lt;br&gt;
     下図だと「App Store」です．なお，コマンドに渡す際は小文字でもOKです．&lt;br&gt;
     &lt;img src="/images/cli-c-open/cli-c-open_02.png" width="500" height="118"&gt;
 &lt;/ol&gt;
&lt;div class="admonition warning-box"&gt;
&lt;p class="admonition-title"&gt;注意&lt;/p&gt;
&lt;p&gt;アプリ名に半角スペースが入っている場合はアプリ名を&lt;code&gt;'&lt;/code&gt;（シングルクォテーション）で囲むことが必要です．&lt;br&gt;
そのため「App Store」を開くコマンドは&lt;code&gt;open -a 'app store'&lt;/code&gt;となります．&lt;/p&gt;
&lt;/div&gt;
&lt;div style="margin: -70px 0px 0px 0px"&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;p&gt;以下のコマンドを実行するとSafariで&lt;code&gt;hoge.pdf&lt;/code&gt;が開きます.&lt;sup id="fnref:3"&gt;&lt;a class="footnote-ref" href="#fn:3"&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;pre class="command-line" data-prompt="%" style="margin-bottom: 30px;"&gt;
&lt;code class="language-bash"&gt;
open -a Safari hoge.pdf
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;ブラウザを指定してURLを開く場合は以下のように使います．&lt;/p&gt;
&lt;pre class="command-line" data-prompt="%" style="margin-bottom: 90px;"&gt;
&lt;code class="language-bash"&gt;
open -a 'google chrome' https://www.google.com
&lt;/code&gt;
&lt;/pre&gt;

&lt;h3 id="-n"&gt;-n （新しいインスタンスでアプリを開く）&lt;/h3&gt;
&lt;p&gt;すでに起動しているアプリについて，別のウィンドウで開きたい場合に使えます．&lt;br&gt;
以下のコマンドではChromeが別ウィンドウで起動します．&lt;/p&gt;
&lt;pre class="command-line" data-prompt="%" style="margin-bottom: 90px;"&gt;
&lt;code class="language-bash"&gt;
open -n -a 'google chrome'
&lt;/code&gt;
&lt;/pre&gt;

&lt;h3 id="-r-finder"&gt;-R （指定したファイルを Finder で表示）&lt;/h3&gt;
&lt;p&gt;ファイルの場所をFinderで表示したい時に使えます．&lt;br&gt;
以下の例では&lt;code&gt;hoge.txt&lt;/code&gt;が存在する場所をFinderで表示してくれます．&lt;/p&gt;
&lt;pre class="command-line" data-prompt="%" style="margin-bottom: 90px;"&gt;
&lt;code class="language-bash"&gt;
open -R hoge.txt
&lt;/code&gt;
&lt;/pre&gt;

&lt;h2 id="linuxopen"&gt;Linuxにおけるopenコマンド&lt;/h2&gt;
&lt;p&gt;Linuxでは&lt;code&gt;xdg-open&lt;/code&gt;コマンドがMacの&lt;code&gt;open&lt;/code&gt;コマンドに相当します．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;xdg-open [path or URL]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;基本の使い方は同様ですが，オプションがないので上記だけです．&lt;br&gt;
コマンドが長いので&lt;code&gt;xdg-open&lt;/code&gt;コマンドはやや使い勝手が悪い印象・・・&lt;/p&gt;
&lt;p&gt;ちなみに，Linuxのデフォルトブラウザ（Firefox）を開く場合は以下のコマンドでOKです．&lt;/p&gt;
&lt;pre class="command-line" data-prompt="$" style="margin-bottom: 90px;"&gt;
&lt;code class="language-bash"&gt;
firefox
&lt;/code&gt;
&lt;/pre&gt;

&lt;h2 id="_3"&gt;ひとこと&lt;/h2&gt;
&lt;p&gt;本記事ではMac/Linuxにおける&lt;code&gt;open&lt;/code&gt;コマンドの活用例について紹介しました．&lt;br&gt;
&lt;code&gt;open&lt;/code&gt;コマンドはその場で使うよりも自動化処理で使う方が便利です．&lt;/p&gt;
&lt;p&gt;自動化についてはコマンドを自作する記事があるので，興味のある方はぜひ見てくださいね．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://revalab.net/auto-command"&gt;【Mac】自動化（自作）コマンドを３ステップで作成する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div style="margin-bottom: 100px;"&gt;&lt;/div&gt;

&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;Finderが起動してGUIで確認できます．&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;Mac標準アプリのテキストエディットで&lt;code&gt;cli-c-open.txt&lt;/code&gt;が開きます．&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:3"&gt;
&lt;p&gt;&lt;code&gt;open hoge.pdf&lt;/code&gt;とすると通常プレビューでPDFが展開されます．&amp;#160;&lt;a class="footnote-backref" href="#fnref:3" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Mac-Linux"></category><category term="zsh"></category></entry><entry><title>【Mac】簡単３ステップで自動化（自作）コマンドを作成する</title><link href="https://www.tecrab.com/articles/auto-command.html" rel="alternate"></link><published>2021-09-03T00:00:00+09:00</published><updated>2022-08-03T00:00:00+09:00</updated><author><name>かに</name></author><id>tag:www.tecrab.com,2021-09-03:/articles/auto-command.html</id><summary type="html">&lt;p&gt;Macで自動化（自作）コマンドを作成する方法です．&lt;/p&gt;</summary><content type="html">&lt;div class="admonition abstract"&gt;
&lt;p&gt;Macで自動化（自作）コマンドを作成する方法を解説します．&lt;br&gt;
一度作成してしまえば次からはサクッと任意の操作ができます！&lt;br&gt;
&lt;br&gt;
＜使用イメージ＞
&lt;ul style="margin: -5px 0px 0px 15px;"&gt;
  &lt;li&gt;複数のWebサイトを一気に開く&lt;/li&gt;
  &lt;li&gt;仕事始めに起動するアプリを一気に立ち上げ&lt;/li&gt;
  &lt;li&gt;一連のUnixコマンドをまとめて実行　などなど&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;目次&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;対象読者&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;作成の流れ&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_3"&gt;手順&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_4"&gt;コマンドの実行テスト&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_5"&gt;参考&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_6"&gt;ひとこと&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="_1"&gt;対象読者&lt;/h2&gt;
&lt;p&gt;本記事ではコマンドラインでの操作がある程度できる方を想定しています．&lt;br&gt;
また，Macのターミナルにおけるシェルが&lt;code&gt;zsh&lt;/code&gt;の方が対象です.&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;div class="admonition info-box"&gt;
&lt;p class="admonition-title"&gt;参考：シェルの確認&lt;/p&gt;
&lt;p&gt;ターミナルで&lt;code&gt;echo $SHELL&lt;/code&gt;を実行し&lt;code&gt;/bin/zsh&lt;/code&gt;と表示されたら&lt;code&gt;zsh&lt;/code&gt;です.&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id="_2"&gt;作成の流れ&lt;/h2&gt;
&lt;p&gt;自動化コマンドを作成する流れは以下の３ステップです．&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;コマンド定義ファイルを格納するフォルダを作成&lt;/li&gt;
&lt;li&gt;path を通す&lt;/li&gt;
&lt;li&gt;コマンド定義ファイルを作成・権限付与&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="_3"&gt;手順&lt;/h3&gt;
&lt;h5 id="1"&gt;① コマンド定義ファイルを格納するフォルダを作成&lt;/h5&gt;
&lt;p&gt;まずはフォルダ（ディレクトリ）を作成します．&lt;br&gt;
場所に指定はありませんが，以下の条件を満たしているとよいでしょう．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;管理しやすい場所&lt;/li&gt;
&lt;li&gt;フォルダ移動が発生しにくい場所&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2"&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本記事ではMacのホームディレクトリにファイルを作成します．&lt;br&gt;
（ホームディレクトリ以外に作成する場合は各コマンドのpathを変更してください）&lt;br&gt;
まずはターミナルで以下のコマンドを実行して&lt;code&gt;auto&lt;/code&gt;ディレクトリを作成しましょう．&lt;br&gt;&lt;/p&gt;
&lt;pre class="command-line" data-prompt="%" style="margin-bottom: 30px;"&gt;
&lt;code class="language-bash"&gt;
cd &amp;&amp; mkdir auto &amp;&amp; cd auto
&lt;/code&gt;
&lt;/pre&gt;

&lt;details class="accordion-block"&gt;
&lt;summary&gt;コマンドの内容が知りたい方はこちらをクリック&lt;/summary&gt;
&lt;div class="accordion-summary"&gt;
&lt;p&gt;上記のコマンドは以下の一連の操作を行なっています．
  &lt;/p&gt;
&lt;ol style="margin-top: 20px;"&gt;
      &lt;li&gt;&lt;code&gt;cd&lt;/code&gt;コマンドでホームディレクトリに移動&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;mkdir auto&lt;/code&gt;で「auto」という名前のディレクトリ作成&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;cd auto&lt;/code&gt;でautoディレクトリ内に移動&lt;/li&gt;
  &lt;/ol&gt;
&lt;p&gt;なお，ホームディレクトリをFinderで見て確認したい場合は&lt;code&gt;open ~&lt;/code&gt;を実行すればFinderで見ることができます．&lt;/p&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;h5 id="2-path"&gt;② pathを通す&lt;/h5&gt;
&lt;p&gt;以下のコマンドを実行してpathを通します．&lt;/p&gt;
&lt;pre class="command-line" data-prompt="%" style="margin-bottom: 30px;"&gt;
&lt;code class="language-bash"&gt;
echo export PATH=\"\$PATH:`pwd`\" &gt;&gt; ~/.zshrc &amp;&amp; source ~/.zshrc
&lt;/code&gt;
&lt;/pre&gt;

&lt;details class="accordion-block"&gt;
&lt;summary&gt;コマンドの内容が知りたい方はこちらをクリック&lt;/summary&gt;
&lt;div class="accordion-summary"&gt;
&lt;p&gt;上記のコマンドは以下の一連の操作を行なっています．
  &lt;/p&gt;
&lt;ol style="margin-top: 20px;"&gt;
      &lt;li style="margin: 5px 0px 5px 0px;"&gt;&lt;code&gt;echo export PATH=\"\$PATH:`pwd`\" &amp;gt;&amp;gt; ~/.zshrc&lt;/code&gt;でpathを通す設定をホームディレクトリの&lt;code&gt;.zshrc&lt;/code&gt;ファイルに書き込む&lt;/li&gt;
      &lt;li style="margin: 5px 0px 5px 0px;"&gt;&lt;code&gt;source ~/.zshrc&lt;/code&gt;で&lt;code&gt;.zshrc&lt;/code&gt;の変更を反映&lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;h5 id="3"&gt;③ コマンド定義ファイルを作成・権限付与&lt;/h5&gt;
&lt;p&gt;次はコマンド定義ファイルを作成していきましょう．&lt;/p&gt;
&lt;div class="admonition danger-box"&gt;
&lt;p class="admonition-title"&gt;注意&lt;/p&gt;
&lt;p&gt;ここで作成したファイル名（＝&lt;code&gt;stock&lt;/code&gt;）が自作のコマンド名になります．&lt;br&gt;
名前を変更する場合は，コマンドの&lt;code&gt;stock&lt;/code&gt;部分（２ヶ所）を任意の名前に書き換えてください．&lt;br&gt;
なお，任意の名前にする場合はUnixコマンド名と重複しないようご注意ください．&lt;/p&gt;
&lt;/div&gt;
&lt;details class="accordion-block" style="margin: -70px 0px 40px 0px;"&gt;
&lt;summary&gt;Unixコマンド名との重複を確認したい場合はこちらをクリック&lt;/summary&gt;
&lt;div class="accordion-summary"&gt;
&lt;p&gt;コマンド名にしたい文字列（例えば&lt;code&gt;hoge&lt;/code&gt;）をターミナルに打ち込んで実行してみると重複の有無がわかります．&lt;br&gt;
  &lt;code&gt;zsh: command not found: hoge&lt;/code&gt;と返ってくれば重複していないのでコマンド名として使えます．それ以外の結果が出てきたら重複しているのでコマンド名としては使えません．&lt;/p&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;p&gt;以下のコマンドを実行すると&lt;code&gt;stock&lt;/code&gt;という名前のファイルが作られ，テキストエディットが自動的に起動します．&lt;/p&gt;
&lt;pre class="command-line" data-prompt="%" style="margin-bottom: 50px;"&gt;
&lt;code class="language-bash"&gt;
touch stock &amp;&amp; open -a TextEdit stock
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;起動したテキストエディットで以下の内容を記載・保存しましょう．&lt;br&gt;
処理内容は以下のとおりです．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;デフォルトブラウザで証券会社２社のHPを開く（１〜２行目）&lt;/li&gt;
&lt;li&gt;Mac標準のメモアプリを開く（３行目）&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="command-line" data-prompt="%" style="margin-bottom: 50px;"&gt;
&lt;code class="language-bash"&gt;
open https://www.sbisec.co.jp/
open https://www.monex.co.jp/
open -a Notes.app
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;続いて，作成した&lt;code&gt;stock&lt;/code&gt;ファイルに対してコンピュータ制御の権限を付与します．&lt;br&gt;
以下のコマンドで&lt;code&gt;stock&lt;/code&gt;ファイルに権限を付与できます.&lt;sup id="fnref:3"&gt;&lt;a class="footnote-ref" href="#fn:3"&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;pre class="command-line" data-prompt="%" style="margin-bottom: 30px;"&gt;
&lt;code class="language-bash"&gt;
sudo chmod 755 stock
&lt;/code&gt;
&lt;/pre&gt;

&lt;div class="admonition warning-box"&gt;
&lt;p class="admonition-title"&gt;実行時の注意&lt;/p&gt;
&lt;p&gt;上記のコマンドを実行した際にパスワードを求められたら，Macのログインパスワードを入力しましょう．&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id="_4"&gt;コマンドの実行テスト&lt;/h2&gt;
&lt;p&gt;最後に自作したコマンド（＝&lt;code&gt;stock&lt;/code&gt;）が動作するかを確認してみましょう．
ターミナル上で以下のコマンドを実行します．&lt;/p&gt;
&lt;pre class="command-line" data-prompt="%" style="margin-bottom: 70px;"&gt;
&lt;code class="language-bash"&gt;
stock
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;自動でデフォルトブラウザが起動して証券会社のHPを開き，メモアプリが起動すればOKです！&lt;br&gt;
&lt;img src="/images/auto-command/auto-command_01.png" width="600" height="345"&gt;&lt;/p&gt;
&lt;h2 id="_5"&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;コマンド定義ファイルは ファイル名 ＝ コマンド名 となっているので，ファイルをリネームすればコマンド名も変更されます.&lt;sup id="fnref:4"&gt;&lt;a class="footnote-ref" href="#fn:4"&gt;4&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;本記事で作成した&lt;code&gt;auto&lt;/code&gt;ディレクトリ内に複数のコマンドファイルを置くことができます．&lt;code&gt;stock&lt;/code&gt;ファイルをコピーすると権限も含めてコピーされるので，ファイル名と内容を変更するだけで別コマンドを作ることができます．&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_6"&gt;ひとこと&lt;/h2&gt;
&lt;p&gt;自作コマンドの作成，お疲れ様でした．&lt;br&gt;
さっと操作したい内容や毎日の作業をコマンド化しておけば非常に便利ですね．&lt;/p&gt;
&lt;p&gt;なお，Unixコマンド以外にもPythonのコードなども実行することができます．
興味のある方は以下の記事を確認してみてくださいね．&lt;/p&gt;
&lt;p&gt;＜作成中です・・・＞&lt;/p&gt;
&lt;div style="margin-bottom: 100px;"&gt;&lt;/div&gt;

&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;MacのOSがCatalina以降であれば基本的に&lt;code&gt;zsh&lt;/code&gt;です．&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;後述の手順でファイルまでのpathを通すので，場所が変わると自作コマンドが使えなくなります（ファイルを移動するたびにpathを再度通す必要が出てきます）&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:3"&gt;
&lt;p&gt;ファイル名を変更している場合は&lt;code&gt;stock&lt;/code&gt;の部分を変更したファイル名に書き換えてから実行してください．&amp;#160;&lt;a class="footnote-backref" href="#fnref:3" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:4"&gt;
&lt;p&gt;&lt;code&gt;stock&lt;/code&gt;というファイル名称を&lt;code&gt;stk&lt;/code&gt;に変更したら，それ以降は&lt;code&gt;stk&lt;/code&gt;が自作コマンド名になります．&amp;#160;&lt;a class="footnote-backref" href="#fnref:4" title="Jump back to footnote 4 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Mac"></category><category term="zsh"></category><category term="自動化"></category></entry><entry><title>【Mac Keynote】表のセルのサイズ（高さ）を揃える方法</title><link href="https://www.tecrab.com/articles/mac-keynote-cellsize.html" rel="alternate"></link><published>2021-07-20T00:00:00+09:00</published><updated>2022-08-03T00:00:00+09:00</updated><author><name>かに</name></author><id>tag:www.tecrab.com,2021-07-20:/articles/mac-keynote-cellsize.html</id><summary type="html">&lt;p&gt;Appleのプレゼンソフト「Keynote」で挿入した表のサイズ（高さ）を揃える方法です．&lt;/p&gt;</summary><content type="html">&lt;div class="admonition abstract"&gt;
&lt;p&gt;Keynoteで挿入した表のサイズ（高さ）を揃える方法について解説します．&lt;/p&gt;
&lt;/div&gt;
&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;目次&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;イメージ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;行のサイズ（高さ）を揃える手順&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_3"&gt;参考&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pagesnumbers"&gt;Pages・Numbersでは？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_4"&gt;ショートカットキーはありません・・・&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_5"&gt;ひとこと&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="_1"&gt;イメージ&lt;/h2&gt;
&lt;p&gt;以下のような感じです．&lt;br&gt;
&lt;img src="/images/keynote-cellsize/keynote-cellsize_00.png" width="600" height="283"&gt;&lt;/p&gt;
&lt;h2 id="_2"&gt;行のサイズ（高さ）を揃える手順&lt;/h2&gt;
&lt;h5 id="1"&gt;① 揃えたい行全体を選択&lt;/h5&gt;
&lt;p&gt;&lt;img src="/images/keynote-cellsize/keynote-cellsize_01.png" width="600" height="291" style="margin-bottom: 20px;"&gt;&lt;/p&gt;
&lt;div class="admonition info-box"&gt;
&lt;p class="admonition-title"&gt;参考&lt;/p&gt;
&lt;p&gt;行全体を選択するには画像の赤枠部分をクリックすればOKです．
&lt;img src="/images/keynote-cellsize/keynote-cellsize_02.png" width="300" height="165" style="margin-bottom: 20px;"&gt;
&lt;br&gt;
その後&lt;kbd&gt;&lt;kbd&gt;shift&lt;/kbd&gt;&lt;/kbd&gt; + 矢印キーで他の行も選択できます．&lt;/p&gt;
&lt;/div&gt;
&lt;h5 id="2"&gt;② 画面右上にある「フォーマット」→ 「表」の順にクリック&lt;/h5&gt;
&lt;p&gt;&lt;img src="/images/keynote-cellsize/keynote-cellsize_03.png" width="450" height="186"&gt;&lt;/p&gt;
&lt;h5 id="3"&gt;③ 表のメニューの一番下「行と列のサイズ」でサイズを変更&lt;/h5&gt;
&lt;p&gt;複数行を選択した状態で高さを指定すると，選択行すべてが同一の高さになります．
&lt;img src="/images/keynote-cellsize/keynote-cellsize_04.png" width="400" height="228"&gt;&lt;/p&gt;
&lt;h3 id="_3"&gt;参考&lt;/h3&gt;
&lt;p&gt;「合わせる」ボタンを押すと選択した行をぎゅっとしてくれます．&lt;br&gt;
（文字サイズに合わせて自動調整されます）
&lt;img src="/images/keynote-cellsize/keynote-cellsize_05.png" width="600" height="238"&gt;&lt;/p&gt;
&lt;h3 id="pagesnumbers"&gt;Pages・Numbersでは？&lt;/h3&gt;
&lt;p&gt;PagesやNumbersでは行全体を選択した状態でセルのサイズを変えると選択したセル全体のサイズが変わります．&lt;/p&gt;
&lt;p&gt;感覚的にはKeynoteでもできそうですが，Keynoteではセルが個別に動いてしまいます．
そのため，行のサイズを統一させるにはいちいち設定するしかないようです．&lt;/p&gt;
&lt;h3 id="_4"&gt;ショートカットキーはありません・・・&lt;/h3&gt;
&lt;p&gt;残念ながらショートカットキーはないようです・・・&lt;/p&gt;
&lt;h2 id="_5"&gt;ひとこと&lt;/h2&gt;
&lt;p&gt;本記事ではKeynoteにおける表のセルサイズを揃える方法をご紹介しました．&lt;br&gt;
通常，セルのサイズ統一はさっとできるのですが，なぜKeynoteでできないのでしょうか・・・&lt;/p&gt;
&lt;p&gt;将来的にはPagesやNumbersと同じように操作できるようになることを期待しましょう．&lt;/p&gt;
&lt;div style="margin-bottom: 100px;"&gt;&lt;/div&gt;</content><category term="Mac"></category><category term="Keynote"></category></entry><entry><title>【Python・R】コード実行時の警告（Warning）を非表示にする方法</title><link href="https://www.tecrab.com/articles/nowarning.html" rel="alternate"></link><published>2021-07-20T00:00:00+09:00</published><updated>2022-08-03T00:00:00+09:00</updated><author><name>かに</name></author><id>tag:www.tecrab.com,2021-07-20:/articles/nowarning.html</id><summary type="html">&lt;p&gt;PythonやRで出てくる警告を非表示にする方法です．&lt;/p&gt;</summary><content type="html">&lt;div class="admonition abstract"&gt;
&lt;p&gt;Python や R でコード実行する際，エラーではないものの警告が出ることがあります．&lt;br&gt;
このような警告を消す方法をご紹介します．&lt;/p&gt;
&lt;/div&gt;
&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;目次&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#python"&gt;Pythonのコード例&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#r"&gt;Rのコード例&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_1"&gt;ひとこと&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="python"&gt;Pythonのコード例&lt;/h2&gt;
&lt;p&gt;Python の場合は以下のコードで警告を非表示にできます．&lt;/p&gt;
&lt;pre style="margin-bottom: 90px;"&gt;
&lt;code class="language-python"&gt;
# 警告を非表示にする
import warnings
warnings.filterwarnings('ignore')
&lt;/code&gt;
&lt;/pre&gt;

&lt;h2 id="r"&gt;Rのコード例&lt;/h2&gt;
&lt;p&gt;Rの場合は&lt;code&gt;options()&lt;/code&gt;関数の引数&lt;code&gt;warn = -1&lt;/code&gt;を指定することで警告を非表示にできます．&lt;/p&gt;
&lt;pre style="margin-bottom: 40px;"&gt;
&lt;code class="language-r"&gt;
# 警告を非表示にする
options(warn = -1)
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;なお&lt;code&gt;warn = 負の値&lt;/code&gt;とすればいいので&lt;code&gt;warn = -10&lt;/code&gt;などでもOKです．&lt;/p&gt;
&lt;div class="admonition info-box"&gt;
&lt;p class="admonition-title"&gt;参考&lt;/p&gt;
&lt;p&gt;最初から警告を非表示とするのはおすすめできないですが，警告内容が分かっている（非表示にしても問題ない）場合は使っていきましょう．&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id="_1"&gt;ひとこと&lt;/h2&gt;
&lt;p&gt;それほど頻度は多くないですが，時々使いますね．&lt;/p&gt;
&lt;div style="margin-bottom: 100px;"&gt;&lt;/div&gt;</content><category term="Python"></category><category term="Python"></category><category term="R"></category></entry><entry><title>【Python・R】グラフの背景色を変更する方法</title><link href="https://www.tecrab.com/articles/graph-bg.html" rel="alternate"></link><published>2021-07-17T00:00:00+09:00</published><updated>2022-08-03T00:00:00+09:00</updated><author><name>かに</name></author><id>tag:www.tecrab.com,2021-07-17:/articles/graph-bg.html</id><summary type="html">&lt;p&gt;PythonやRでグラフの背景色を変更する方法をご紹介します．&lt;/p&gt;</summary><content type="html">&lt;div class="admonition abstract"&gt;
&lt;p&gt;PythonやRでグラフの背景色を変更する方法を解説します．&lt;/p&gt;
&lt;/div&gt;
&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;目次&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;イメージ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#python"&gt;Pythonのコード例&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#r"&gt;Rのコード例&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_2"&gt;活用例&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;ひとこと&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="_1"&gt;イメージ&lt;/h2&gt;
&lt;p&gt;以下のような感じです．&lt;br&gt;
&lt;img alt="00" src="/images/graph-bg/graph-bg_00.png"&gt;&lt;/p&gt;
&lt;h2 id="python"&gt;Pythonのコード例&lt;/h2&gt;
&lt;p&gt;Pythonの場合は以下のようなコードでグラフの背景色を指定できます．&lt;br&gt;
（Pythonではグラフの背景色をあまり変更しませんが・・・）&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;
# ライブラリのインポート
import pandas as pd
import matplotlib.pyplot as plt
from sklearn import datasets

# irisデータセットの読み込み
iris_dataset = datasets.load_iris()

# irisデータセットのDataFrame化
iris = pd.DataFrame(data=iris_dataset.data, columns=iris_dataset.feature_names)

# 作画領域の設定
plt.figure(figsize=(5, 5), facecolor='antiquewhite').add_subplot(facecolor='lightblue')

# 散布図の作成・設定
plt.scatter(iris['sepal length (cm)'], iris['sepal width (cm)'], s=4, c='black')
plt.xlabel('sepal length (cm)')
plt.ylabel('sepal width (cm)')
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img alt="01" src="/images/graph-bg/graph-bg_01.png"&gt;&lt;/p&gt;
&lt;p&gt;作画領域ごとに色を指定する形式です．&lt;br&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;plt.figure()&lt;/code&gt; で作図枠を作成し，引数&lt;code&gt;facecolor&lt;/code&gt;で作図枠の色を指定.&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.add_subplot()&lt;/code&gt;の引数&lt;code&gt;facecolor&lt;/code&gt;でグラフ自体の背景色を指定．&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;したがって，外側の大きい枠が&lt;code&gt;antiquewhite&lt;/code&gt;，グラフ自体の色が&lt;code&gt;lightblue&lt;/code&gt;という色になっています．&lt;/p&gt;
&lt;h2 id="r"&gt;Rのコード例&lt;/h2&gt;
&lt;p&gt;Rの場合は&lt;code&gt;par()&lt;/code&gt;関数の引数&lt;code&gt;bg&lt;/code&gt;を指定することで作画領域の色&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2"&gt;2&lt;/a&gt;&lt;/sup&gt;を変更できます．&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-r"&gt;
# 標準データセットのiris
iris &lt;- iris

# par()関数で作画領域の色を指定
par(bg='gray95')

# 散布図を作成
plot(iris[, 'Sepal.Length'], iris[, 'Sepal.Width'], xlab='Sepal.Length', ylab='Sepal.Width', pch=16)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img alt="02" src="/images/graph-bg/graph-bg_02.png"&gt;&lt;/p&gt;
&lt;div class="alert-grey" style="margin-bottom: 70px;"&gt;
&lt;span class="alert-grey-box-title"&gt;Rの実行環境と&lt;code&gt;par()&lt;/code&gt;関数&lt;/span&gt;
Rの実行環境によって&lt;code&gt;par()&lt;/code&gt;関数の適用範囲が変わります.&lt;br&gt;
Rstudioで&lt;code&gt;par()&lt;/code&gt;関数を実行すると，それ以降に作成した他のグラフも&lt;code&gt;par()&lt;/code&gt;関数の実行内容が適用されます．&lt;br&gt;
Jupyter Labの場合は&lt;code&gt;par()&lt;/code&gt;関数はセルごとに適用されます．
&lt;/div&gt;

&lt;h3 id="_2"&gt;活用例&lt;/h3&gt;
&lt;p&gt;RのグラフをJupyter Labのダークモードで出力する際に使えます．&lt;br&gt;
そのままの設定だと背景色と重なってグラフが消えてしまいます・・・&lt;br&gt;
&lt;img alt="03" src="/images/graph-bg/graph-bg_03.png"&gt;&lt;/p&gt;
&lt;p&gt;これを解決するために&lt;code&gt;par()&lt;/code&gt;関数で背景色を指定しています．&lt;br&gt;
Pythonでグラフを書く際は自動で調整してくれるのでいちいち指定する必要がありません．&lt;/p&gt;
&lt;h2 id="_3"&gt;ひとこと&lt;/h2&gt;
&lt;p&gt;本記事ではRおよびPythonでグラフの背景色をつける方法を紹介しました．&lt;br&gt;
通常は変更しませんが・・・&lt;/p&gt;
&lt;div style="margin-bottom: 100px;"&gt;&lt;/div&gt;

&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;&lt;code&gt;figsize=(5, 5)&lt;/code&gt; という部分は作図領域のサイズを指定しています&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;今回は&lt;code&gt;bg='gray95'&lt;/code&gt;としているので背景色はグレー（gray95）になります．&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Python"></category><category term="Python"></category><category term="R"></category></entry><entry><title>【Mac Numbers】セルにプルダウンを設定する方法</title><link href="https://www.tecrab.com/articles/numbers-dataformat.html" rel="alternate"></link><published>2021-07-12T00:00:00+09:00</published><updated>2022-08-03T00:00:00+09:00</updated><author><name>かに</name></author><id>tag:www.tecrab.com,2021-07-12:/articles/numbers-dataformat.html</id><summary type="html">&lt;p&gt;Appleの表計算ソフト「Numbers」でExcelのプルダウンのような機能を設定する方法です．&lt;/p&gt;</summary><content type="html">&lt;div class="admonition abstract"&gt;
&lt;p&gt;NumbersでExcelのプルダウンのような機能を設定する方法についてご紹介します．&lt;br&gt;
Excelとの違いは「参考：Excelとの比較」をご覧ください．&lt;/p&gt;
&lt;/div&gt;
&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;目次&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;イメージ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;プルダウンの設定方法&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_3"&gt;ショートカットキーはありません・・・&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#excel"&gt;参考：Excelとの比較&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_4"&gt;ひとこと&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="_1"&gt;イメージ&lt;/h2&gt;
&lt;p&gt;以下のような感じです．&lt;br&gt;
&lt;img alt="00" src="/images/numbers-dataformat/numbers-dataformat_00.png"&gt;&lt;/p&gt;
&lt;h2 id="_2"&gt;プルダウンの設定方法&lt;/h2&gt;
&lt;h5 id="1"&gt;① プルダウンを設定したい範囲を選択&lt;/h5&gt;
&lt;p&gt;&lt;img alt="01" src="/images/numbers-dataformat/numbers-dataformat_01.png"&gt;&lt;/p&gt;
&lt;h5 id="2-numbers"&gt;② Numbers メニューバーにある「フォーマット」（ウィンドウ右上）をクリック&lt;/h5&gt;
&lt;p&gt;&lt;img alt="02" src="/images/numbers-highlight/numbers-highlight_02.png"&gt;&lt;/p&gt;
&lt;h5 id="3-12"&gt;③ 出てきたメニューの ①「セル」を選択し，②「自動」部分をクリック&lt;/h5&gt;
&lt;p&gt;表示されたメニューの③「ポップアップメニュー」をクリックしましょう．&lt;br&gt;
&lt;img alt="03" src="/images/numbers-dataformat/numbers-dataformat_03.png"&gt;&lt;/p&gt;
&lt;h5 id="4"&gt;④ 続いて「最初の項目で開始」をクリックし「空白で開始」に変更&lt;/h5&gt;
&lt;p&gt;この設定は任意です．&lt;br&gt;
もしプルダウンを空白から始めたくない場合は手順をスキップしましょう．&lt;br&gt;
&lt;img alt="04" src="/images/numbers-dataformat/numbers-dataformat_04.png"&gt;&lt;/p&gt;
&lt;h5 id="5"&gt;⑤ プルダウンの内容を任意の文字などに変更します&lt;/h5&gt;
&lt;p&gt;編集したい欄を選択後&lt;kbd&gt;&lt;kbd&gt;return&lt;/kbd&gt;&lt;/kbd&gt;を押せばOKです．&lt;br&gt;
&lt;img alt="05" src="/images/numbers-dataformat/numbers-dataformat_05.png"&gt;&lt;/p&gt;
&lt;div class="admonition info-box"&gt;
&lt;p class="admonition-title"&gt;参考&lt;/p&gt;
&lt;p&gt;プルダウンの項目を増減させたい場合は矢頭部分の「＋ ー」で変更できます．&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;これでプルダウンの設定ができました！&lt;br&gt;
&lt;img alt="00" src="/images/numbers-dataformat/numbers-dataformat_00.png"&gt;&lt;/p&gt;
&lt;h3 id="_3"&gt;ショートカットキーはありません・・・&lt;/h3&gt;
&lt;p&gt;残念ながらショートカットキーはないようです・・・&lt;/p&gt;
&lt;h2 id="excel"&gt;参考：Excelとの比較&lt;/h2&gt;
&lt;p&gt;細かな違いは色々とありますが，大きな違いはプルダウンのセル参照でしょう．&lt;br&gt;
Excelではプルダウンをセル参照で設定することができますが，Numbersでは現状できません．&lt;/p&gt;
&lt;p&gt;そのため，プルダウンの候補を変更したい場合は再びポップアップメニューから追加しないといけないのでやや面倒ですね・・・&lt;/p&gt;
&lt;h2 id="_4"&gt;ひとこと&lt;/h2&gt;
&lt;p&gt;本記事では Numbers でプルダウンを設定する方法をご紹介しました．&lt;br&gt;
Excel とは使用感がやや異なりますが，慣れてしまえばサクッと設定できていいと思います．&lt;/p&gt;
&lt;div style="margin-bottom: 100px;"&gt;&lt;/div&gt;</content><category term="Mac"></category><category term="Numbers"></category></entry><entry><title>【Python】インストール済みのライブラリを一覧or絞り込んで確認する方法</title><link href="https://www.tecrab.com/articles/jupyter-lab-pip-list.html" rel="alternate"></link><published>2021-07-08T00:00:00+09:00</published><updated>2022-07-08T00:00:00+09:00</updated><author><name>かに</name></author><id>tag:www.tecrab.com,2021-07-08:/articles/jupyter-lab-pip-list.html</id><summary type="html">&lt;p&gt;ローカルPCにインストール済みのPythonライブラリを一覧/絞り込みで確認する方法です．&lt;/p&gt;</summary><content type="html">&lt;div class="admonition abstract"&gt;
&lt;p&gt;既にインストール済みのPythonライブラリを確認する方法です．&lt;br&gt;
ライブラリを一覧で確認 or 特定のライブラリのみを確認する方法をご紹介します．&lt;/p&gt;
&lt;/div&gt;
&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;目次&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;パッケージすべてを一覧で表示&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;特定のライブラリを確認&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_4"&gt;ひとこと&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="_1"&gt;パッケージすべてを一覧で表示&lt;/h2&gt;
&lt;h5 id="_2"&gt;ターミナル&lt;/h5&gt;
&lt;p&gt;ターミナルで以下のコマンドを実行すればライブラリが一覧で表示されます.&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;br&gt;
Anacondaを使っている場合は&lt;code&gt;conda list&lt;/code&gt;です．&lt;/p&gt;
&lt;pre class="command-line" data-prompt="%" style="margin-bottom: 90px;"&gt;
&lt;code class="language-bash"&gt;
pip list
&lt;/code&gt;
&lt;/pre&gt;

&lt;h5 id="jupyter"&gt;Jupyterのセルで確認&lt;/h5&gt;
&lt;p&gt;Jupyter Lab&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2"&gt;2&lt;/a&gt;&lt;/sup&gt;でも確認することができます．&lt;br&gt;
セルで以下を実行すればOKです．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python" style="margin-bottom: 90px;"&gt;
!pip list
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="_3"&gt;特定のライブラリを確認&lt;/h2&gt;
&lt;p&gt;文字列を検索できる&lt;code&gt;grep&lt;/code&gt;コマンド を使用して特定のライブラリを検索することができます．&lt;br&gt;
以下の例ではNumPyがインストール済みのライブラリ一覧にあるかを確認するコマンドです．&lt;/p&gt;
&lt;pre class="command-line" data-prompt="%"&gt;
&lt;code class="language-bash"&gt;
pip list | grep numpy
&lt;/code&gt;
&lt;/pre&gt;
&lt;pre style="margin-bottom: 40px;"&gt;
numpy        1.20.3
numpydoc     1.1.0
&lt;/pre&gt;

&lt;p&gt;管理人の環境ではNumPyがインストールされているので出力されましたが，インストールされていない場合は何も表示されません．&lt;br&gt;
インストールしたいライブラリの有無を確認するときなどに利用するといいですね．&lt;/p&gt;
&lt;div class="admonition info-box"&gt;
&lt;p class="admonition-title"&gt;参考&lt;/p&gt;
&lt;p&gt;&lt;code&gt;grep&lt;/code&gt;コマンドは部分一致する文字を取得してくれる&lt;sup id="fnref:3"&gt;&lt;a class="footnote-ref" href="#fn:3"&gt;3&lt;/a&gt;&lt;/sup&gt;ので，ライブラリ名の一部だけを指定してもOKです．&lt;br&gt;
そのため，以下のコマンドでもNumPyのインストール有無を確認できます(&lt;code&gt;num&lt;/code&gt;を含むライブラリを取得しているのでNumPy以外も出力されています).&lt;/p&gt;
&lt;p&gt;&lt;pre class="command-line" data-prompt="%" style="margin: 10px 0px;"&gt;&lt;code class="language-bash"&gt;
pip list | grep num
&lt;/code&gt;&lt;/pre&gt;
&lt;pre style="margin: -0.2em 1em 1.2em 1em;"&gt;
numba        0.53.1
numexpr      2.7.3
numpy        1.20.3
numpydoc     1.1.0
&lt;/pre&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id="_4"&gt;ひとこと&lt;/h2&gt;
&lt;p&gt;新しいライブラリを導入する際などに確認としてよく使います．&lt;/p&gt;
&lt;div style="margin-bottom: 100px;"&gt;&lt;/div&gt;

&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;出力結果が長いので結果の表記を省略していますが，ライブラリ名とそのバージョンがセットで出力されます．&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;Jupyter Notebook，Google Colaboratoryでも可能です．&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:3"&gt;
&lt;p&gt;オプションをつければ完全一致なども指定できます．&amp;#160;&lt;a class="footnote-backref" href="#fnref:3" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Python"></category><category term="Python"></category><category term="Jupyter"></category></entry><entry><title>【Python】使っているライブラリのバージョンを確認する方法</title><link href="https://www.tecrab.com/articles/jupyter-lab-version-check.html" rel="alternate"></link><published>2021-06-28T00:00:00+09:00</published><updated>2022-07-05T00:00:00+09:00</updated><author><name>かに</name></author><id>tag:www.tecrab.com,2021-06-28:/articles/jupyter-lab-version-check.html</id><summary type="html">&lt;p&gt;Pythonのライブラリのバージョンを確認する方法です．&lt;/p&gt;</summary><content type="html">&lt;div class="admonition abstract"&gt;
&lt;p&gt;Pythonのライブラリのバージョンを確認する方法です．&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;目次&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;バージョン確認のコード&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#python"&gt;Python自体のバージョン確認&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;ひとこと&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="_1"&gt;バージョン確認のコード&lt;/h2&gt;
&lt;p&gt;ライブラリのバージョンは&lt;code&gt;ライブラリ名.__version__&lt;/code&gt;で確認することができます．&lt;br&gt;
以下のコードは現在使用しているNumPyのバージョンを確認できるコードです.&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;
# ライブラリのインポート
import numpy as np

# NumPyのバージョン確認
print(np.__version__)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre style="margin-bottom: 40px;"&gt;
'1.20.3'
&lt;/pre&gt;

&lt;p&gt;pandasの場合なら以下のようにします．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;
import pandas as pd

print(pd.__version__)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre style="margin-bottom: 90px;"&gt;
'1.3.1'
&lt;/pre&gt;

&lt;h2 id="python"&gt;Python自体のバージョン確認&lt;/h2&gt;
&lt;p&gt;こちらはおまけですが，Pythonのバージョンを確認するにはターミナル等で以下のコマンドを実行すればOKです．&lt;/p&gt;
&lt;pre class="command-line" data-prompt="%"&gt;
&lt;code class="language-bash"&gt;
python --version
&lt;/code&gt;
&lt;/pre&gt;
&lt;pre style="margin-bottom: 90px;"&gt;
Python 3.10.5
&lt;/pre&gt;

&lt;h2 id="_2"&gt;ひとこと&lt;/h2&gt;
&lt;p&gt;使用頻度はあまり高くありませんが，時々確認することがあるので備忘録として書きました．&lt;/p&gt;
&lt;div style="margin-bottom: 100px;"&gt;&lt;/div&gt;

&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;自分の環境にインストールされているバージョンが出力されるので，結果は環境によって違います．&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Python"></category><category term="Python"></category><category term="Jupyter"></category></entry><entry><title>【pandas】locメソッド：DataFrameの行・列を指定して抽出</title><link href="https://www.tecrab.com/articles/pandas-loc.html" rel="alternate"></link><published>2021-06-18T00:00:00+09:00</published><updated>2022-07-07T00:00:00+09:00</updated><author><name>かに</name></author><id>tag:www.tecrab.com,2021-06-18:/articles/pandas-loc.html</id><summary type="html">&lt;p&gt;DataFrameの行・列データを抽出する方法のうち，locメソッドについて簡潔にまとめました．&lt;/p&gt;</summary><content type="html">&lt;div class="admonition abstract"&gt;
&lt;p&gt;DataFrameのlocメソッドについて簡潔にまとめました．&lt;br&gt;
以下のような操作を行っています．
&lt;ul style="margin: -5px 0px 0px 15px;"&gt;
  &lt;li&gt;特定の行を抽出したい&lt;/li&gt;
  &lt;li&gt;２列目と３列目だけが見たい&lt;/li&gt;
  &lt;li&gt;５行目以降の４列目が見たい&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;
&lt;p&gt;公式 Reference: &lt;a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.loc.html" rel="noopener noreferrer" target="_blank"&gt;pandas.DataFrame.loc&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;目次&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#loc"&gt;locメソッド&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_1"&gt;コードの書き方&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_2"&gt;行の抽出（行の名前を指定）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;列の抽出（列の名前を指定）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_4"&gt;行・列の指定&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#boolean"&gt;booleanでも指定ができる&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_5"&gt;ひとこと&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="loc"&gt;locメソッド&lt;/h2&gt;
&lt;p&gt;locメソッドはDataFrameの&lt;strong&gt;行・列の名前&lt;/strong&gt;を指定して抽出する関数です．&lt;br&gt;
以下の図は行・列（または行・列両方）を指定した際の範囲を示しています．&lt;br&gt;
&lt;img src="/images/pandas-loc/pandas-loc_01.png" width="650" height="178"&gt;&lt;br&gt;
最初はあやふやになりますよね．&lt;br&gt;
行・列の範囲をイメージしながらコードを見ていきましょう．&lt;/p&gt;
&lt;h2 id="_1"&gt;コードの書き方&lt;/h2&gt;
&lt;p&gt;まずはサンプルのDataFrameを作成します．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;
# DataFrameの作成
import pandas as pd

df = pd.DataFrame([[100, 300, 30000], [300, 50, 15000], [1000, 20, 20000]],
                  index = ['いか', 'えび', 'かに'], 
                  columns = ['単価', '数量', '総額'])
df
&lt;/code&gt;&lt;/pre&gt;

&lt;table class="dataframe" border="1"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;単価&lt;/th&gt;
      &lt;th&gt;数量&lt;/th&gt;
      &lt;th&gt;総額&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;いか&lt;/th&gt;
      &lt;td&gt;100&lt;/td&gt;
      &lt;td&gt;300&lt;/td&gt;
      &lt;td&gt;30000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;えび&lt;/th&gt;
      &lt;td&gt;300&lt;/td&gt;
      &lt;td&gt;50&lt;/td&gt;
      &lt;td&gt;15000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;かに&lt;/th&gt;
      &lt;td&gt;1000&lt;/td&gt;
      &lt;td&gt;20&lt;/td&gt;
      &lt;td&gt;20000&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id="_2"&gt;行の抽出（行の名前を指定）&lt;/h3&gt;
&lt;p&gt;locメソッドを用いて，行の名前を指定します．&lt;br&gt;
これで「いか・えび」の行だけが抽出できます．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;
df.loc[['いか', 'えび']]
&lt;/code&gt;&lt;/pre&gt;
&lt;table class="dataframe" border="1"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;単価&lt;/th&gt;
      &lt;th&gt;数量&lt;/th&gt;
      &lt;th&gt;総額&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;いか&lt;/th&gt;
      &lt;td&gt;100&lt;/td&gt;
      &lt;td&gt;300&lt;/td&gt;
      &lt;td&gt;30000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;えび&lt;/th&gt;
      &lt;td&gt;300&lt;/td&gt;
      &lt;td&gt;50&lt;/td&gt;
      &lt;td&gt;15000&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id="_3"&gt;列の抽出（列の名前を指定）&lt;/h3&gt;
&lt;p&gt;次は列の名前で指定してみましょう．&lt;br&gt;
これで「単価・総額」列の全行が抽出できます．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;
# 列を指定したい
df.loc[:, ['単価', '総額']]
&lt;/code&gt;&lt;/pre&gt;
&lt;table class="dataframe" border="1"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;単価&lt;/th&gt;
      &lt;th&gt;総額&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;いか&lt;/th&gt;
      &lt;td&gt;100&lt;/td&gt;
      &lt;td&gt;30000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;えび&lt;/th&gt;
      &lt;td&gt;300&lt;/td&gt;
      &lt;td&gt;15000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;かに&lt;/th&gt;
      &lt;td&gt;1000&lt;/td&gt;
      &lt;td&gt;20000&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;div class="admonition info-box"&gt;
&lt;p class="admonition-title"&gt;参考&lt;/p&gt;
&lt;p&gt;&lt;code&gt;[]&lt;/code&gt;内の&lt;code&gt;:,&lt;/code&gt;は「すべての行」を指定するために必要です． &lt;/p&gt;
&lt;/div&gt;
&lt;h3 id="_4"&gt;行・列の指定&lt;/h3&gt;
&lt;p&gt;さらに行・列の名前を同時に指定してみましょう．&lt;br&gt;
「えび・かに」行の「単価」列だけが抽出できます．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;
# 行・列の指定
df.loc[['えび', 'かに'], ['単価']]
&lt;/code&gt;&lt;/pre&gt;
&lt;table class="dataframe" border="1"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;単価&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;えび&lt;/th&gt;
      &lt;td&gt;300&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;かに&lt;/th&gt;
      &lt;td&gt;1000&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id="boolean"&gt;booleanでも指定ができる&lt;/h3&gt;
&lt;p&gt;locメソッドは行や列の名前だけでなく，boolean（=&lt;code&gt;True&lt;/code&gt;or&lt;code&gt;False&lt;/code&gt;）でも指定ができます．&lt;br&gt;
これは&lt;code&gt;True&lt;/code&gt;となっている行（または列）を抽出できるということです．&lt;br&gt;
早速見てみましょう．&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;
# Trueである行を抽出
df.loc[[False, True, False]]
&lt;/code&gt;&lt;/pre&gt;
&lt;table class="dataframe" border="1" style="margin-bottom: 30px;"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;単価&lt;/th&gt;
      &lt;th&gt;数量&lt;/th&gt;
      &lt;th&gt;総額&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;えび&lt;/th&gt;
      &lt;td&gt;300&lt;/td&gt;
      &lt;td&gt;50&lt;/td&gt;
      &lt;td&gt;15000&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;今回は行の数が３つなので，各行に対して&lt;code&gt;True&lt;/code&gt;or&lt;code&gt;False&lt;/code&gt;を指定しています．&lt;br&gt;
※ 行数が指定する&lt;code&gt;True&lt;/code&gt;と&lt;code&gt;False&lt;/code&gt;の数と一致しないとエラーが出ます.&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;div class="admonition info-box"&gt;
&lt;p class="admonition-title"&gt;参考&lt;/p&gt;
&lt;p&gt;以下のようにすれば列を boolean で指定することも可能です．
&lt;pre style="margin: 10px 0px;"&gt;&lt;code class="language-python"&gt;
df.loc[:, [False, True, False]]
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;上記のコードを実行すると&lt;code&gt;True&lt;/code&gt;の列である「数量」列が抽出されます．&lt;br&gt;
なお，行・列の同時指定もできます．&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id="_5"&gt;ひとこと&lt;/h2&gt;
&lt;p&gt;DataFrameは慣れるまでは結構ややこしいですよね．&lt;br&gt;
他にも行・列の番号で指定するilocメソッドなど，様々な関数があるので興味のある方は調べてみるといいと思います．&lt;/p&gt;
&lt;div style="margin-bottom: 100px;"&gt;&lt;/div&gt;

&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;例えば &lt;code&gt;df.loc[[False, True]]&lt;/code&gt; は行数３に対して２つしか&lt;code&gt;True&lt;/code&gt;と&lt;code&gt;False&lt;/code&gt;を指定していないのでエラーが出ます．&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Python"></category><category term="Python"></category><category term="pandas"></category></entry><entry><title>【Mac Numbers】条件付き書式（条件付きハイライト）を設定する方法</title><link href="https://www.tecrab.com/articles/numbers-highlight.html" rel="alternate"></link><published>2021-03-15T00:00:00+09:00</published><updated>2022-07-05T00:00:00+09:00</updated><author><name>かに</name></author><id>tag:www.tecrab.com,2021-03-15:/articles/numbers-highlight.html</id><summary type="html">&lt;p&gt;Appleの表計算ソフト「Numbers」でExcelの条件付き書式のような機能を使う方法です．&lt;/p&gt;</summary><content type="html">&lt;div class="admonition abstract"&gt;
&lt;p&gt;Numbersの条件付きハイライト（Excel＝条件付き書式）の設定方法をご紹介します．&lt;br&gt;
Excelとできることは概ね同じですが，数式が使えないなどの違いもあります．&lt;/p&gt;
&lt;/div&gt;
&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;目次&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;イメージ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;条件付きハイライトの適用方法&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_3"&gt;ショートカットキーはありません・・・&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_4"&gt;複数のルールを適用するには？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_5"&gt;条件付きハイライトの削除&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_6"&gt;条件付きハイライトのルール結合&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#excel"&gt;参考：Excelと違って数式が使えない・・・&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_7"&gt;ひとこと&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="_1"&gt;イメージ&lt;/h2&gt;
&lt;p&gt;以下のような感じです．&lt;br&gt;
&lt;img alt="00" src="/images/numbers-highlight/numbers-highlight_00.png"&gt;&lt;/p&gt;
&lt;h2 id="_2"&gt;条件付きハイライトの適用方法&lt;/h2&gt;
&lt;h5 id="1"&gt;① 条件を適用したい範囲を選択&lt;/h5&gt;
&lt;p&gt;&lt;img alt="01" src="/images/numbers-highlight/numbers-highlight_01.png"&gt;&lt;/p&gt;
&lt;h5 id="2-numbers"&gt;② Numbersメニューバーの「フォーマット」（ウィンドウ右上）をクリック&lt;/h5&gt;
&lt;p&gt;&lt;img alt="02" src="/images/numbers-highlight/numbers-highlight_02.png"&gt;&lt;/p&gt;
&lt;h5 id="3"&gt;③ メニューより「セル」→「条件付きハイライト」をクリック&lt;/h5&gt;
&lt;p&gt;&lt;img alt="03" src="/images/numbers-highlight/numbers-highlight_03.png"&gt;&lt;/p&gt;
&lt;h5 id="4"&gt;④「ルールを追加」をクリックで適用ルールが選択できます&lt;/h5&gt;
&lt;p&gt;&lt;img alt="04" src="/images/numbers-highlight/numbers-highlight_04.png"&gt;
&lt;br&gt;
その後，必要なルールを設定すれば該当するセルがハイライトされます！&lt;/p&gt;
&lt;div class="admonition info-box"&gt;
&lt;p class="admonition-title"&gt;参考&lt;/p&gt;
&lt;p&gt;条件を適用させたいセルを選択していれば，&lt;br&gt;
Macのメニューバー「フォーマット」→「条件付きハイライト」からでも可能です．&lt;br&gt;
&lt;img src="/images/numbers-highlight/numbers-highlight_05.png" style="margin: 10px 0px 10px 0px"&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;h3 id="_3"&gt;ショートカットキーはありません・・・&lt;/h3&gt;
&lt;p&gt;残念ながらショートカットキーはないようです・・・&lt;/p&gt;
&lt;h3 id="_4"&gt;複数のルールを適用するには？&lt;/h3&gt;
&lt;p&gt;複数のルールを適用させたい場合は「&lt;strong&gt;ルールを追加&lt;/strong&gt;」を再度クリックすればOKです．&lt;br&gt;
ルール１，ルール２・・・というようにルールが追加されていきます．&lt;br&gt;
&lt;img alt="06" src="/images/numbers-highlight/numbers-highlight_06.png"&gt;&lt;/p&gt;
&lt;h3 id="_5"&gt;条件付きハイライトの削除&lt;/h3&gt;
&lt;p&gt;設定したルールの枠内にある「ゴミ箱マーク」をクリックすればOKです．&lt;br&gt;
&lt;img alt="07" src="/images/numbers-highlight/numbers-highlight_07.png"&gt;&lt;/p&gt;
&lt;div class="admonition info-box"&gt;
&lt;p class="admonition-title"&gt;ルールの一括削除&lt;/p&gt;
&lt;p&gt;条件付きハイライトの設定エリア最下部に以下のような「歯車マーク」があります．&lt;br&gt;
&lt;img src="/images/numbers-highlight/numbers-highlight_08.png" style="margin: 10px 0px 10px 0px"&gt;&lt;br&gt;
このマークをクリックすると「&lt;strong&gt;すべてのルールを削除&lt;/strong&gt;」というメニューが表示されるので，これをクリックすればOKです．&lt;/p&gt;
&lt;/div&gt;
&lt;h3 id="_6"&gt;条件付きハイライトのルール結合&lt;/h3&gt;
&lt;p&gt;条件付きハイライトの適用範囲を広げたい場合は，以下の手順で可能です．&lt;/p&gt;
&lt;h5 id="1_1"&gt;①「条件が適用されているセル」＋「条件を新たに適用したいセル」を共に選択&lt;/h5&gt;
&lt;p&gt;&lt;img alt="09" src="/images/numbers-highlight/numbers-highlight_09.png"&gt;&lt;/p&gt;
&lt;h5 id="2"&gt;② ルールの結合&lt;/h5&gt;
&lt;p&gt;セルを選択した状態で「ハイライトルールを表示...」をクリック．&lt;br&gt;
&lt;img alt="10" src="/images/numbers-highlight/numbers-highlight_10.png"&gt;&lt;/p&gt;
&lt;p&gt;出てくるメニューのうち，「ルールを結合」をクリック．&lt;br&gt;
&lt;img alt="11" src="/images/numbers-highlight/numbers-highlight_11.png"&gt;&lt;/p&gt;
&lt;h5 id="3_1"&gt;③ 選択したセル全体に条件が適用される&lt;/h5&gt;
&lt;p&gt;上記の操作を行うと，選択したセル全体に条件が適用されます．&lt;br&gt;
右側のセルも条件&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;に合致するセルが無事にハイライトされましたね．&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="12" src="/images/numbers-highlight/numbers-highlight_12.png"&gt;&lt;/p&gt;
&lt;h2 id="excel"&gt;参考：Excelと違って数式が使えない・・・&lt;/h2&gt;
&lt;p&gt;Excelでは，例えば「A1セルが〜という文字列を含む場合，C2セルをハイライト」といった操作が条件付き書式の機能（数式）で可能です．&lt;/p&gt;
&lt;p&gt;しかしNumbersではこの機能がないため，既存のルールから選択するしかないようです．&lt;/p&gt;
&lt;h2 id="_7"&gt;ひとこと&lt;/h2&gt;
&lt;p&gt;本記事ではNumbersで条件付きハイライトを使う方法をご紹介しました．&lt;br&gt;&lt;/p&gt;
&lt;p&gt;条件付きハイライトは使いやすくていいですね〜．&lt;br&gt;
でも数式が使えないのは微妙なところです．Appleさん，機能追加を待ってます！&lt;/p&gt;
&lt;div style="margin-bottom: 100px;"&gt;&lt;/div&gt;

&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;「齊藤」という文字列のみが黄色でハイライトされる条件&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Mac"></category><category term="Numbers"></category></entry></feed>